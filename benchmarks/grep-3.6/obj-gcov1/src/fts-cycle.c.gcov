        -:    0:Source:../../lib/fts-cycle.c
        -:    0:Programs:50
        -:    1:/* Detect cycles in file tree walks.
        -:    2:
        -:    3:   Copyright (C) 2003-2006, 2009-2020 Free Software Foundation, Inc.
        -:    4:
        -:    5:   Written by Jim Meyering.
        -:    6:
        -:    7:   This program is free software: you can redistribute it and/or modify
        -:    8:   it under the terms of the GNU General Public License as published by
        -:    9:   the Free Software Foundation; either version 3 of the License, or
        -:   10:   (at your option) any later version.
        -:   11:
        -:   12:   This program is distributed in the hope that it will be useful,
        -:   13:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   14:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   15:   GNU General Public License for more details.
        -:   16:
        -:   17:   You should have received a copy of the GNU General Public License
        -:   18:   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
        -:   19:
        -:   20:#include "cycle-check.h"
        -:   21:#include "hash.h"
        -:   22:
        -:   23:/* Use each of these to map a device/inode pair to an FTSENT.  */
        -:   24:struct Active_dir
        -:   25:{
        -:   26:  dev_t dev;
        -:   27:  ino_t ino;
        -:   28:  FTSENT *fts_ent;
        -:   29:};
        -:   30:
        -:   31:static bool
function AD_compare called 0 returned 0% blocks executed 0%
    #####:   32:AD_compare (void const *x, void const *y)
        -:   33:{
    #####:   34:  struct Active_dir const *ax = x;
    #####:   35:  struct Active_dir const *ay = y;
    #####:   36:  return ax->ino == ay->ino
    #####:   37:      && ax->dev == ay->dev;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   38:}
        -:   39:
        -:   40:static size_t
function AD_hash called 0 returned 0% blocks executed 0%
    #####:   41:AD_hash (void const *x, size_t table_size)
        -:   42:{
    #####:   43:  struct Active_dir const *ax = x;
    #####:   44:  return (uintmax_t) ax->ino % table_size;
        -:   45:}
        -:   46:
        -:   47:/* Set up the cycle-detection machinery.  */
        -:   48:
        -:   49:static bool
function setup_dir called 0 returned 0% blocks executed 0%
    #####:   50:setup_dir (FTS *fts)
        -:   51:{
    #####:   52:  if (fts->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))
branch  0 never executed
branch  1 never executed
        -:   53:    {
        -:   54:      enum { HT_INITIAL_SIZE = 31 };
    #####:   55:      fts->fts_cycle.ht = hash_initialize (HT_INITIAL_SIZE, NULL, AD_hash,
call    0 never executed
        -:   56:                                           AD_compare, free);
    #####:   57:      if (! fts->fts_cycle.ht)
branch  0 never executed
branch  1 never executed
    #####:   58:        return false;
        -:   59:    }
        -:   60:  else
        -:   61:    {
    #####:   62:      fts->fts_cycle.state = malloc (sizeof *fts->fts_cycle.state);
    #####:   63:      if (! fts->fts_cycle.state)
branch  0 never executed
branch  1 never executed
    #####:   64:        return false;
    #####:   65:      cycle_check_init (fts->fts_cycle.state);
call    0 never executed
        -:   66:    }
        -:   67:
    #####:   68:  return true;
        -:   69:}
        -:   70:
        -:   71:/* Enter a directory during a file tree walk.  */
        -:   72:
        -:   73:static bool
function enter_dir called 0 returned 0% blocks executed 0%
    #####:   74:enter_dir (FTS *fts, FTSENT *ent)
        -:   75:{
    #####:   76:  if (fts->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))
branch  0 never executed
branch  1 never executed
        -:   77:    {
    #####:   78:      struct stat const *st = ent->fts_statp;
    #####:   79:      struct Active_dir *ad = malloc (sizeof *ad);
        -:   80:      struct Active_dir *ad_from_table;
        -:   81:
    #####:   82:      if (!ad)
branch  0 never executed
branch  1 never executed
    #####:   83:        return false;
        -:   84:
    #####:   85:      ad->dev = st->st_dev;
    #####:   86:      ad->ino = st->st_ino;
    #####:   87:      ad->fts_ent = ent;
        -:   88:
        -:   89:      /* See if we've already encountered this directory.
        -:   90:         This can happen when following symlinks as well as
        -:   91:         with a corrupted directory hierarchy. */
    #####:   92:      ad_from_table = hash_insert (fts->fts_cycle.ht, ad);
call    0 never executed
        -:   93:
    #####:   94:      if (ad_from_table != ad)
branch  0 never executed
branch  1 never executed
        -:   95:        {
    #####:   96:          free (ad);
    #####:   97:          if (!ad_from_table)
branch  0 never executed
branch  1 never executed
    #####:   98:            return false;
        -:   99:
        -:  100:          /* There was an entry with matching dev/inode already in the table.
        -:  101:             Record the fact that we've found a cycle.  */
    #####:  102:          ent->fts_cycle = ad_from_table->fts_ent;
    #####:  103:          ent->fts_info = FTS_DC;
        -:  104:        }
        -:  105:    }
        -:  106:  else
        -:  107:    {
    #####:  108:      if (cycle_check (fts->fts_cycle.state, ent->fts_statp))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  109:        {
        -:  110:          /* FIXME: setting fts_cycle like this isn't proper.
        -:  111:             To do what the documentation requires, we'd have to
        -:  112:             go around the cycle again and find the right entry.
        -:  113:             But no callers in coreutils use the fts_cycle member. */
    #####:  114:          ent->fts_cycle = ent;
    #####:  115:          ent->fts_info = FTS_DC;
        -:  116:        }
        -:  117:    }
        -:  118:
    #####:  119:  return true;
        -:  120:}
        -:  121:
        -:  122:/* Leave a directory during a file tree walk.  */
        -:  123:
        -:  124:static void
function leave_dir called 0 returned 0% blocks executed 0%
    #####:  125:leave_dir (FTS *fts, FTSENT *ent)
        -:  126:{
    #####:  127:  struct stat const *st = ent->fts_statp;
    #####:  128:  if (fts->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))
branch  0 never executed
branch  1 never executed
        -:  129:    {
        -:  130:      struct Active_dir obj;
        -:  131:      void *found;
    #####:  132:      obj.dev = st->st_dev;
    #####:  133:      obj.ino = st->st_ino;
    #####:  134:      found = hash_remove (fts->fts_cycle.ht, &obj);
call    0 never executed
    #####:  135:      if (!found)
branch  0 never executed
branch  1 never executed
    #####:  136:        abort ();
call    0 never executed
    #####:  137:      free (found);
        -:  138:    }
        -:  139:  else
        -:  140:    {
    #####:  141:      FTSENT *parent = ent->fts_parent;
    #####:  142:      if (parent != NULL && 0 <= parent->fts_level)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  143:        CYCLE_CHECK_REFLECT_CHDIR_UP (fts->fts_cycle.state,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -:  144:                                      *(parent->fts_statp), *st);
        -:  145:    }
    #####:  146:}
        -:  147:
        -:  148:/* Free any memory used for cycle detection.  */
        -:  149:
        -:  150:static void
function free_dir called 0 returned 0% blocks executed 0%
    #####:  151:free_dir (FTS *sp)
        -:  152:{
    #####:  153:  if (sp->fts_options & (FTS_TIGHT_CYCLE_CHECK | FTS_LOGICAL))
branch  0 never executed
branch  1 never executed
        -:  154:    {
    #####:  155:      if (sp->fts_cycle.ht)
branch  0 never executed
branch  1 never executed
    #####:  156:        hash_free (sp->fts_cycle.ht);
call    0 never executed
        -:  157:    }
        -:  158:  else
    #####:  159:    free (sp->fts_cycle.state);
    #####:  160:}
