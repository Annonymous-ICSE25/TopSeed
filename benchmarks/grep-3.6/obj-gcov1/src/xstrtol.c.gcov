        -:    0:Source:../../lib/xstrtol.c
        -:    0:Programs:50
        -:    1:/* A more useful interface to strtol.
        -:    2:
        -:    3:   Copyright (C) 1995-1996, 1998-2001, 2003-2007, 2009-2020 Free Software
        -:    4:   Foundation, Inc.
        -:    5:
        -:    6:   This program is free software: you can redistribute it and/or modify
        -:    7:   it under the terms of the GNU General Public License as published by
        -:    8:   the Free Software Foundation; either version 3 of the License, or
        -:    9:   (at your option) any later version.
        -:   10:
        -:   11:   This program is distributed in the hope that it will be useful,
        -:   12:   but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:   GNU General Public License for more details.
        -:   15:
        -:   16:   You should have received a copy of the GNU General Public License
        -:   17:   along with this program.  If not, see <https://www.gnu.org/licenses/>.  */
        -:   18:
        -:   19:/* Written by Jim Meyering. */
        -:   20:
        -:   21:#ifndef __strtol
        -:   22:# define __strtol strtol
        -:   23:# define __strtol_t long int
        -:   24:# define __xstrtol xstrtol
        -:   25:# define STRTOL_T_MINIMUM LONG_MIN
        -:   26:# define STRTOL_T_MAXIMUM LONG_MAX
        -:   27:#endif
        -:   28:
        -:   29:#include <config.h>
        -:   30:
        -:   31:#include "xstrtol.h"
        -:   32:
        -:   33:/* Some pre-ANSI implementations (e.g. SunOS 4)
        -:   34:   need stderr defined if assertion checking is enabled.  */
        -:   35:#include <stdio.h>
        -:   36:
        -:   37:#include <ctype.h>
        -:   38:#include <errno.h>
        -:   39:#include <limits.h>
        -:   40:#include <stdlib.h>
        -:   41:#include <string.h>
        -:   42:
        -:   43:#include "assure.h"
        -:   44:
        -:   45:#define TYPE_SIGNED(t) (! ((t) 0 < (t) -1))
        -:   46:
        -:   47:static strtol_error
function bkm_scale called 0 returned 0% blocks executed 0%
    #####:   48:bkm_scale (__strtol_t *x, int scale_factor)
        -:   49:{
    #####:   50:  if (TYPE_SIGNED (__strtol_t) && *x < STRTOL_T_MINIMUM / scale_factor)
branch  0 never executed
branch  1 never executed
        -:   51:    {
    #####:   52:      *x = STRTOL_T_MINIMUM;
    #####:   53:      return LONGINT_OVERFLOW;
        -:   54:    }
    #####:   55:  if (STRTOL_T_MAXIMUM / scale_factor < *x)
branch  0 never executed
branch  1 never executed
        -:   56:    {
    #####:   57:      *x = STRTOL_T_MAXIMUM;
    #####:   58:      return LONGINT_OVERFLOW;
        -:   59:    }
    #####:   60:  *x *= scale_factor;
    #####:   61:  return LONGINT_OK;
        -:   62:}
        -:   63:
        -:   64:static strtol_error
function bkm_scale_by_power called 0 returned 0% blocks executed 0%
    #####:   65:bkm_scale_by_power (__strtol_t *x, int base, int power)
        -:   66:{
    #####:   67:  strtol_error err = LONGINT_OK;
    #####:   68:  while (power--)
branch  0 never executed
branch  1 never executed
    #####:   69:    err |= bkm_scale (x, base);
call    0 never executed
    #####:   70:  return err;
        -:   71:}
        -:   72:
        -:   73:/* FIXME: comment.  */
        -:   74:
        -:   75:strtol_error
function xstrtoimax called 0 returned 0% blocks executed 0%
    #####:   76:__xstrtol (const char *s, char **ptr, int strtol_base,
        -:   77:           __strtol_t *val, const char *valid_suffixes)
        -:   78:{
        -:   79:  char *t_ptr;
        -:   80:  char **p;
        -:   81:  __strtol_t tmp;
    #####:   82:  strtol_error err = LONGINT_OK;
        -:   83:
    #####:   84:  assure (0 <= strtol_base && strtol_base <= 36);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -:   85:
    #####:   86:  p = (ptr ? ptr : &t_ptr);
branch  0 never executed
branch  1 never executed
        -:   87:
    #####:   88:  errno = 0;
        -:   89:
        -:   90:  if (! TYPE_SIGNED (__strtol_t))
        -:   91:    {
        -:   92:      const char *q = s;
        -:   93:      unsigned char ch = *q;
        -:   94:      while (isspace (ch))
        -:   95:        ch = *++q;
        -:   96:      if (ch == '-')
        -:   97:        return LONGINT_INVALID;
        -:   98:    }
        -:   99:
    #####:  100:  tmp = __strtol (s, p, strtol_base);
call    0 never executed
        -:  101:
    #####:  102:  if (*p == s)
branch  0 never executed
branch  1 never executed
        -:  103:    {
        -:  104:      /* If there is no number but there is a valid suffix, assume the
        -:  105:         number is 1.  The string is invalid otherwise.  */
    #####:  106:      if (valid_suffixes && **p && strchr (valid_suffixes, **p))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  107:        tmp = 1;
        -:  108:      else
    #####:  109:        return LONGINT_INVALID;
        -:  110:    }
    #####:  111:  else if (errno != 0)
branch  0 never executed
branch  1 never executed
        -:  112:    {
    #####:  113:      if (errno != ERANGE)
branch  0 never executed
branch  1 never executed
    #####:  114:        return LONGINT_INVALID;
    #####:  115:      err = LONGINT_OVERFLOW;
        -:  116:    }
        -:  117:
        -:  118:  /* Let valid_suffixes == NULL mean "allow any suffix".  */
        -:  119:  /* FIXME: update all callers except the ones that allow suffixes
        -:  120:     after the number, changing last parameter NULL to "".  */
    #####:  121:  if (!valid_suffixes)
branch  0 never executed
branch  1 never executed
        -:  122:    {
    #####:  123:      *val = tmp;
    #####:  124:      return err;
        -:  125:    }
        -:  126:
    #####:  127:  if (**p != '\0')
branch  0 never executed
branch  1 never executed
        -:  128:    {
    #####:  129:      int base = 1024;
    #####:  130:      int suffixes = 1;
        -:  131:      strtol_error overflow;
        -:  132:
    #####:  133:      if (!strchr (valid_suffixes, **p))
branch  0 never executed
branch  1 never executed
        -:  134:        {
    #####:  135:          *val = tmp;
    #####:  136:          return err | LONGINT_INVALID_SUFFIX_CHAR;
        -:  137:        }
        -:  138:
    #####:  139:      switch (**p)
branch  0 never executed
branch  1 never executed
        -:  140:        {
    #####:  141:        case 'E': case 'G': case 'g': case 'k': case 'K': case 'M': case 'm':
        -:  142:        case 'P': case 'T': case 't': case 'Y': case 'Z':
        -:  143:
        -:  144:          /* The "valid suffix" '0' is a special flag meaning that
        -:  145:             an optional second suffix is allowed, which can change
        -:  146:             the base.  A suffix "B" (e.g. "100MB") stands for a power
        -:  147:             of 1000, whereas a suffix "iB" (e.g. "100MiB") stands for
        -:  148:             a power of 1024.  If no suffix (e.g. "100M"), assume
        -:  149:             power-of-1024.  */
        -:  150:
    #####:  151:          if (strchr (valid_suffixes, '0'))
branch  0 never executed
branch  1 never executed
    #####:  152:            switch (p[0][1])
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  153:              {
    #####:  154:              case 'i':
    #####:  155:                if (p[0][2] == 'B')
branch  0 never executed
branch  1 never executed
    #####:  156:                  suffixes += 2;
    #####:  157:                break;
        -:  158:
    #####:  159:              case 'B':
        -:  160:              case 'D': /* 'D' is obsolescent */
    #####:  161:                base = 1000;
    #####:  162:                suffixes++;
    #####:  163:                break;
        -:  164:              }
        -:  165:        }
        -:  166:
    #####:  167:      switch (**p)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
        -:  168:        {
    #####:  169:        case 'b':
    #####:  170:          overflow = bkm_scale (&tmp, 512);
call    0 never executed
    #####:  171:          break;
        -:  172:
    #####:  173:        case 'B':
        -:  174:          /* This obsolescent first suffix is distinct from the 'B'
        -:  175:             second suffix above.  E.g., 'tar -L 1000B' means change
        -:  176:             the tape after writing 1000 KiB of data.  */
    #####:  177:          overflow = bkm_scale (&tmp, 1024);
call    0 never executed
    #####:  178:          break;
        -:  179:
    #####:  180:        case 'c':
    #####:  181:          overflow = LONGINT_OK;
    #####:  182:          break;
        -:  183:
    #####:  184:        case 'E': /* exa or exbi */
    #####:  185:          overflow = bkm_scale_by_power (&tmp, base, 6);
call    0 never executed
    #####:  186:          break;
        -:  187:
    #####:  188:        case 'G': /* giga or gibi */
        -:  189:        case 'g': /* 'g' is undocumented; for compatibility only */
    #####:  190:          overflow = bkm_scale_by_power (&tmp, base, 3);
call    0 never executed
    #####:  191:          break;
        -:  192:
    #####:  193:        case 'k': /* kilo */
        -:  194:        case 'K': /* kibi */
    #####:  195:          overflow = bkm_scale_by_power (&tmp, base, 1);
call    0 never executed
    #####:  196:          break;
        -:  197:
    #####:  198:        case 'M': /* mega or mebi */
        -:  199:        case 'm': /* 'm' is undocumented; for compatibility only */
    #####:  200:          overflow = bkm_scale_by_power (&tmp, base, 2);
call    0 never executed
    #####:  201:          break;
        -:  202:
    #####:  203:        case 'P': /* peta or pebi */
    #####:  204:          overflow = bkm_scale_by_power (&tmp, base, 5);
call    0 never executed
    #####:  205:          break;
        -:  206:
    #####:  207:        case 'T': /* tera or tebi */
        -:  208:        case 't': /* 't' is undocumented; for compatibility only */
    #####:  209:          overflow = bkm_scale_by_power (&tmp, base, 4);
call    0 never executed
    #####:  210:          break;
        -:  211:
    #####:  212:        case 'w':
    #####:  213:          overflow = bkm_scale (&tmp, 2);
call    0 never executed
    #####:  214:          break;
        -:  215:
    #####:  216:        case 'Y': /* yotta or 2**80 */
    #####:  217:          overflow = bkm_scale_by_power (&tmp, base, 8);
call    0 never executed
    #####:  218:          break;
        -:  219:
    #####:  220:        case 'Z': /* zetta or 2**70 */
    #####:  221:          overflow = bkm_scale_by_power (&tmp, base, 7);
call    0 never executed
    #####:  222:          break;
        -:  223:
    #####:  224:        default:
    #####:  225:          *val = tmp;
    #####:  226:          return err | LONGINT_INVALID_SUFFIX_CHAR;
        -:  227:        }
        -:  228:
    #####:  229:      err |= overflow;
    #####:  230:      *p += suffixes;
    #####:  231:      if (**p)
branch  0 never executed
branch  1 never executed
    #####:  232:        err |= LONGINT_INVALID_SUFFIX_CHAR;
        -:  233:    }
        -:  234:
    #####:  235:  *val = tmp;
    #####:  236:  return err;
        -:  237:}
