        -:    0:Source:../../src/rc-insert.c
        -:    0:Programs:20
        -:    1:/*!
        -:    2:*  \file rc-insert.c
        -:    3:*  \brief Inserts a line (of a resource file) into `rc_elems_table[]'.
        -:    4:*/
        -:    5:/*
        -:    6:*  Copyright (c) 1994, 95, 96, 1997, 2000, 2011 Thomas Esken
        -:    7:*  Copyright (c) 2010, 2011, 2013 Free Software Foundation, Inc.
        -:    8:*
        -:    9:*  This software doesn't claim completeness, correctness or usability.
        -:   10:*  On principle I will not be liable for ANY damages or losses (implicit
        -:   11:*  or explicit), which result from using or handling my software.
        -:   12:*  If you use this software, you agree without any exception to this
        -:   13:*  agreement, which binds you LEGALLY !!
        -:   14:*
        -:   15:*  This program is free software; you can redistribute it and/or modify
        -:   16:*  it under the terms of the `GNU General Public License' as published by
        -:   17:*  the `Free Software Foundation'; either version 3, or (at your option)
        -:   18:*  any later version.
        -:   19:*
        -:   20:*  You should have received a copy of the `GNU General Public License'
        -:   21:*  along with this program; if not, write to the:
        -:   22:*
        -:   23:*/
        -:   24:
        -:   25:
        -:   26:
        -:   27:/*
        -:   28:*  Include definition header file to see whether USE_RC is defined there.
        -:   29:*    Compile this module only if USE_RC is defined, otherwise skip it.
        -:   30:*/
        -:   31:#include "tailor.h"
        -:   32:
        -:   33:
        -:   34:
        -:   35:#if USE_RC
        -:   36:
        -:   37:/*
        -:   38:*  Include header files.
        -:   39:*/
        -:   40:# if HAVE_CTYPE_H
        -:   41:#  include <ctype.h>
        -:   42:# endif
        -:   43:# if TIME_WITH_SYS_TIME
        -:   44:#  include <sys/time.h>
        -:   45:#  include <time.h>
        -:   46:# else /* !TIME_WITH_SYS_TIME */
        -:   47:#  if HAVE_SYS_TIME_H
        -:   48:#   include <sys/time.h>
        -:   49:#  else	/* !HAVE_SYS_TIME_H */
        -:   50:#   include <time.h>
        -:   51:#  endif /* !HAVE_SYS_TIME_H */
        -:   52:# endif	/* !TIME_WITH_SYS_TIME */
        -:   53:# include "common.h"
        -:   54:# include "rc-defs.h"
        -:   55:# include "globals.h"
        -:   56:# include "hd-astro.h"
        -:   57:# include "hd-use.h"
        -:   58:# include "rc-astro.h"
        -:   59:# include "rc-utils.h"
        -:   60:# include "tty.h"
        -:   61:# include "utils.h"
        -:   62:# include "rc-insert.h"
        -:   63:
        -:   64:
        -:   65:
        -:   66:/*
        -:   67:*  static variables definitions.
        -:   68:*/
        -:   69:/*!
        -:   70:   The table containing the codes that define the output and error format
        -:   71:   types used for formatting the data of the %sun* and %moon* special texts.
        -:   72:*/
        -:   73:static const Aobj_oformat_struct aobj_oformat[][AOBJ_MOON + 1] = {
        -:   74:/*
        -:   75:  { SUN::{char data_format, char error_format}, MOON::{char data_format, char error_format} }
        -:   76:*/
        -:   77:  /* Mode 0...4. */
        -:   78:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:   79:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:   80:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:   81:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:   82:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:   83:  /* Mode 5...9. */
        -:   84:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:   85:  {{FMT_HHH, ERR_HHH}, {FMT_DDD, ERR_DDD}},
        -:   86:  {{FMT_HHH, ERR_HHH}, {FMT_DDD, ERR_DDD}},
        -:   87:  {{FMT_HHH, ERR_HHH}, {FMT_NSD, ERR_NNN}},
        -:   88:  {{FMT_HHH, ERR_HHH}, {FMT_NND, ERR_NNN}},
        -:   89:  /* Mode 10...14. */
        -:   90:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:   91:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:   92:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:   93:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:   94:  {{FMT_TTT, ERR_TTT}, {FMT_DDS, ERR_DDD}},
        -:   95:  /* Mode 15...19. */
        -:   96:  {{FMT_NND, ERR_NNN}, {FMT_TTT, ERR_TTT}},
        -:   97:  {{FMT_DDD, ERR_DDD}, {FMT_NND, ERR_NNN}},
        -:   98:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:   99:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:  100:  {{FMT_DDS, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:  101:  /* Mode 20...24. */
        -:  102:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:  103:  {{FMT_DDS, ERR_DDD}, {FMT_NSD, ERR_NNN}},
        -:  104:  {{FMT_DDD, ERR_DDD}, {FMT_NND, ERR_NNN}},
        -:  105:  {{FMT_TTT, ERR_TTT}, {FMT_DDS, ERR_DDD}},
        -:  106:  {{FMT_NND, ERR_NNN}, {FMT_DDD, ERR_DDD}},
        -:  107:  /* Mode 25...29. */
        -:  108:  {{FMT_DDD, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  109:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:  110:  {{FMT_NSD, ERR_NNN}, {FMT_DDS, ERR_DDD}},
        -:  111:  {{FMT_HHH, ERR_HHH}, {FMT_TTT, ERR_TTT}},
        -:  112:  {{FMT_TXS, ERR_TTT}, {FMT_NND, ERR_NNN}},
        -:  113:  /* Mode 30...34. */
        -:  114:  {{FMT_NND, ERR_NNN}, {FMT_DDD, ERR_DDD}},
        -:  115:  {{FMT_NND, ERR_NNN}, {FMT_NSD, ERR_NNN}},
        -:  116:  {{FMT_TTS, ERR_TTT}, {FMT_HHH, ERR_HHH}},
        -:  117:  {{FMT_DDS, ERR_DDD}, {FMT_TXS, ERR_TTT}},
        -:  118:  {{FMT_DDS, ERR_DDD}, {FMT_NND, ERR_NNN}},
        -:  119:  /* Mode 35...39. */
        -:  120:  {{FMT_DDS, ERR_DDD}, {FMT_NND, ERR_NNN}},
        -:  121:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  122:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  123:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  124:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  125:  /* Mode 40...44. */
        -:  126:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  127:  {{FMT_TTS, ERR_TTT}, {FMT_DDS, ERR_DDD}},
        -:  128:  {{FMT_TTS, ERR_TTT}, {FMT_DDS, ERR_DDD}},
        -:  129:  {{FMT_TTS, ERR_TTT}, {FMT_DDS, ERR_DDD}},
        -:  130:  {{FMT_DDS, ERR_DDD}, {FMT_TTS, ERR_TTT}},
        -:  131:  /* Mode 45...49. */
        -:  132:  {{FMT_DDS, ERR_DDD}, {FMT_TTS, ERR_TTT}},
        -:  133:  {{FMT_DDS, ERR_DDD}, {FMT_TTS, ERR_TTT}},
        -:  134:  {{FMT_DDD, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  135:  {{FMT_DDS, ERR_DDD}, {FMT_NND, ERR_NNN}},
        -:  136:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  137:  /* Mode 50...54. */
        -:  138:  {{FMT_DDS, ERR_DDD}, {FMT_NND, ERR_NNN}},
        -:  139:  {{FMT_DDD, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  140:  {{FMT_HHH, ERR_HHH}, {FMT_DDD, ERR_DDD}},
        -:  141:  {{FMT_HHH, ERR_HHH}, {FMT_NND, ERR_NNN}},
        -:  142:  {{FMT_NIL, ERR_NIL}, {FMT_DDS, ERR_DDD}},
        -:  143:  /* Mode 55...60. */
        -:  144:  {{FMT_NIL, ERR_NIL}, {FMT_NND, ERR_NNN}},
        -:  145:  {{FMT_NIL, ERR_NIL}, {FMT_DDS, ERR_DDD}},
        -:  146:  {{FMT_NIL, ERR_NIL}, {FMT_NND, ERR_NNN}},
        -:  147:  {{FMT_NIL, ERR_NIL}, {FMT_DDS, ERR_DDD}},
        -:  148:  {{FMT_NIL, ERR_NIL}, {FMT_DDD, ERR_DDD}},
        -:  149:  {{FMT_NIL, ERR_NIL}, {FMT_NND, ERR_NNN}},
        -:  150:  /* Auxiliary modes 61 ..68. */
        -:  151:  {{FMT_NNN, ERR_NNN}, {FMT_NNN, ERR_NNN}},
        -:  152:  {{FMT_NND, ERR_NNN}, {FMT_NND, ERR_NNN}},
        -:  153:  {{FMT_NSD, ERR_NNN}, {FMT_NSD, ERR_NNN}},
        -:  154:  {{FMT_HHH, ERR_HHH}, {FMT_HHH, ERR_HHH}},
        -:  155:  {{FMT_TTT, ERR_TTT}, {FMT_TTT, ERR_TTT}},
        -:  156:  {{FMT_TTS, ERR_TTT}, {FMT_TTS, ERR_TTT}},
        -:  157:  {{FMT_DDD, ERR_DDD}, {FMT_DDD, ERR_DDD}},
        -:  158:  {{FMT_DDS, ERR_DDD}, {FMT_DDS, ERR_DDD}},
        -:  159:};
        -:  160:
        -:  161:
        -:  162:
        -:  163:/*
        -:  164:*  Function implementations.
        -:  165:*/
        -:  166:void
function insert_line_into_table called 0 returned 0% blocks executed 0%
    #####:  167:insert_line_into_table (line_buffer, filename, line_number, rc_elems,
        -:  168:			len_date, print_twice)
        -:  169:     char *line_buffer;
        -:  170:     const char *filename;
        -:  171:     const long line_number;
        -:  172:     int *rc_elems;
        -:  173:     int len_date;
        -:  174:     int print_twice;
        -:  175:/*!
        -:  176:   Inserts a line into `rc_elems_table[]',
        -:  177:     but before this the line is checked and evaluated first
        -:  178:     for TVAR text variables and then for %?... special texts.
        -:  179:*/
        -:  180:{
        -:  181:  auto Slint num;
        -:  182:  register int i;
        -:  183:  register int j;
        -:  184:  register int j_buf;
        -:  185:  register int j_diff;
        -:  186:  register int k;
        -:  187:  register int kk;
        -:  188:  register int kpos;
        -:  189:  register int kkpos;
    #####:  190:  register int len_fn = len_year_max + 5;	/* Position of the `(' of the "(FILENAME)" text */
    #####:  191:  register int tmp_year = year;
        -:  192:  auto int len;
        -:  193:  auto int rlen;
        -:  194:  auto int dd;
        -:  195:  auto int rdd;
        -:  196:  auto int mm;
        -:  197:  auto int rmm;
        -:  198:  auto int yy;
        -:  199:  auto int ryy;
        -:  200:  auto int nn;
        -:  201:  auto int rnn;
        -:  202:  auto int hhn;
        -:  203:  auto int rhn;
        -:  204:  auto int hhwd;
        -:  205:  auto int rhwd;
        -:  206:  auto int bio_emo_phase;
        -:  207:  auto int bio_emo_waxes;
        -:  208:  auto int bio_int_phase;
        -:  209:  auto int bio_int_waxes;
        -:  210:  auto int bio_phy_phase;
        -:  211:  auto int bio_phy_waxes;
        -:  212:  auto int bio_critical_day;
        -:  213:  auto int bio_positive_day;
        -:  214:  auto int bio_negative_day;
        -:  215:  auto int fstyle;
        -:  216:  auto int fwidth;
        -:  217:  static char buffer[40];
        -:  218:  static char date_text[23];
        -:  219:  static char bio_emo_ptext[7];
        -:  220:  static char bio_int_ptext[7];
        -:  221:  static char bio_phy_ptext[7];
        -:  222:  auto char *ptr_date_text;
    #####:  223:  auto char *ptr_char = line_buffer + len_date;
        -:  224:  auto char hhc;
        -:  225:  auto char rhc;
        -:  226:  static Bool inclusive_date_map[DAY_LAST + 2];
        -:  227:  static Bool exclusive_date_map[DAY_LAST + 2];
        -:  228:  auto Bool ie_date_maps_set;
        -:  229:  auto Bool hls1_set;
        -:  230:  auto Bool hls2_set;
        -:  231:  auto Bool is_weekday_mode;
        -:  232:  auto Bool ris_weekday_mode;
        -:  233:  auto Bool moon_min_max;
        -:  234:  auto Bool ok;
        -:  235:  auto Bool hls_set;
        -:  236:  auto Bool print_line;
        -:  237:  auto Bool is_obsolete_whitespace;
        -:  238:  auto Bool is_cformat;
        -:  239:  auto Bool is_lformat;
        -:  240:  auto Bool is_sign;
        -:  241:  auto Bool is_lzero;
        -:  242:  auto Bool is_fformat;
        -:  243:  auto Bool is_suffix;
    #####:  244:  auto Bool got_command = FALSE;
        -:  245:
        -:  246:
    #####:  247:  if (rc_enable_fn_flag)
branch  0 never executed
branch  1 never executed
    #####:  248:    len_fn += (int) strlen (filename) + 3;	/* +3 due to the "(THE_REAL_FILENAME_ITSELF) " text */
        -:  249:  /*
        -:  250:     Skip the delimiting whitespace characters between the "date"-part and the "text"-part.
        -:  251:   */
    #####:  252:  while (isspace (*ptr_char))
branch  0 never executed
branch  1 never executed
    #####:  253:    ptr_char++;
    #####:  254:  if (*ptr_char)
branch  0 never executed
branch  1 never executed
        -:  255:    {
        -:  256:      /*
        -:  257:         If the "text"-part starts with a QUOTEd whitespace character, exchange
        -:  258:         the QUOTE character by a PSEUDO_QUOTE character ('\001') to keep the
        -:  259:         internal sorting order intact.
        -:  260:       */
    #####:  261:      if ((*ptr_char == QUOTE_CHAR) && isspace (*(ptr_char + 1)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  262:	*ptr_char = PSEUDO_QUOTE;
    #####:  263:      if ((Uint) len_the_text < maxlen_max)
branch  0 never executed
branch  1 never executed
        -:  264:	{
    #####:  265:	  len_the_text = (int) maxlen_max;
    #####:  266:	  the_text = (char *) my_realloc ((VOID_PTR) the_text,
call    0 never executed
        -:  267:					  len_the_text,
        -:  268:					  ERR_NO_MEMORY_AVAILABLE,
        -:  269:					  __FILE__, ((long) __LINE__) - 3L,
        -:  270:					  "the_text", len_the_text);
        -:  271:	}
    #####:  272:      strcpy (the_text, ptr_char);
        -:  273:    }
        -:  274:  else
        -:  275:    /*
        -:  276:       No "text"-part given.
        -:  277:     */
    #####:  278:    *the_text = '\0';
        -:  279:  do
        -:  280:    {
        -:  281:      /*
        -:  282:         Initialize some controlling variables.
        -:  283:       */
    #####:  284:      print_line = TRUE;
    #####:  285:      ptr_date_text = date_text;
    #####:  286:      j = k = j_buf = kk = j_diff = kpos = kkpos = 0;
    #####:  287:      ie_date_maps_set = is_obsolete_whitespace = hls_set = hls1_set =
    #####:  288:	hls2_set = FALSE;
    #####:  289:      fstyle = FSTYLE_NONE;
    #####:  290:      fwidth = SPECIAL_VALUE;
    #####:  291:      ok = is_cformat = is_lformat = is_sign = is_lzero = is_fformat =
    #####:  292:	is_suffix = FALSE;
        -:  293:      /*
        -:  294:         If `--filter-period=ARG' is given and ARG matches the
        -:  295:         date of the fixed date, suppress this fixed date!
        -:  296:       */
    #####:  297:      if ((rc_filter_period != (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####:  298:	  && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####:  299:	print_line =
call    0 never executed
    #####:  300:	  rc_valid_period (rc_filter_period, d, m, y, incr_year, decr_year);
        -:  301:      /*
        -:  302:         If `--filter-day=ARG' is given and ARG matches the
        -:  303:         date of the fixed date, suppress this fixed date!
        -:  304:       */
    #####:  305:      if (print_line
branch  0 never executed
branch  1 never executed
    #####:  306:	  && (rc_filter_day != (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####:  307:	  && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####:  308:	print_line =
call    0 never executed
    #####:  309:	  rc_valid_day (rc_filter_day, d, m, year + incr_year - decr_year);
    #####:  310:      if (!print_line)
branch  0 never executed
branch  1 never executed
    #####:  311:	ok = TRUE;
        -:  312:      else
        -:  313:	/*
        -:  314:	   Check line for %?... special texts and quoted TVAR text variables.
        -:  315:	 */
    #####:  316:	*s6 = *date_text = '\0';
    #####:  317:      while (!ok)
branch  0 never executed
branch  1 never executed
        -:  318:	{
    #####:  319:	  while (*(the_text + j))
branch  0 never executed
branch  1 never executed
        -:  320:	    {
    #####:  321:	      if ((Uint) k >= maxlen_max - (Uint) len_fn)
branch  0 never executed
branch  1 never executed
    #####:  322:		resize_all_strings (maxlen_max << 1, FALSE, __FILE__,
call    0 never executed
        -:  323:				    (long) __LINE__);
    #####:  324:	      if (*(the_text + j) == RC_SPECIAL_TEXT_CHAR
branch  0 never executed
branch  1 never executed
    #####:  325:		  || *(the_text + j) == RC_TVAR_CHAR)
branch  0 never executed
branch  1 never executed
        -:  326:		{
    #####:  327:		  if (j)
branch  0 never executed
branch  1 never executed
        -:  328:		    {
        -:  329:		      /*
        -:  330:		         Check if the %?... special text or the TVAR text variable is quoted.
        -:  331:		       */
    #####:  332:		      if (*(the_text + (j - 1)) == QUOTE_CHAR)
branch  0 never executed
branch  1 never executed
        -:  333:			{
    #####:  334:			  k--;
    #####:  335:			  kk--;
        -:  336:			}
    #####:  337:		      else if (*(the_text + j) == RC_SPECIAL_TEXT_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  338:			break;
        -:  339:		    }
    #####:  340:		  else if (*(the_text + j) == RC_SPECIAL_TEXT_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  341:		    break;
        -:  342:		}
    #####:  343:	      if (is_obsolete_whitespace && isspace (*(the_text + j)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  344:		{
    #####:  345:		  is_obsolete_whitespace = FALSE;
    #####:  346:		  j++;
        -:  347:		}
        -:  348:	      else
    #####:  349:		s1[k++] = s6[kk++] = *(the_text + j++);
        -:  350:	    }
    #####:  351:	  if ((Uint) k >= maxlen_max - (Uint) len_fn)
branch  0 never executed
branch  1 never executed
    #####:  352:	    resize_all_strings (maxlen_max << 1, FALSE, __FILE__,
call    0 never executed
        -:  353:				(long) __LINE__);
    #####:  354:	  if (*(the_text + j))
branch  0 never executed
branch  1 never executed
        -:  355:	    {
        -:  356:	      auto char special_text_char;
        -:  357:
        -:  358:
        -:  359:	      /*
        -:  360:	         A '%' character (special text prefix) found!
        -:  361:	       */
    #####:  362:	      j_buf = j++;
        -:  363:	      /*
        -:  364:	         Check for a special text format.
        -:  365:	       */
    #####:  366:	      j = decode_format (the_text, j, &is_cformat,
call    0 never executed
        -:  367:				 &is_lformat, &is_sign, &is_lzero,
        -:  368:				 &is_suffix, &is_fformat, &fstyle, &fwidth);
    #####:  369:	      *s2 = '\0';
    #####:  370:	      special_text_char = *(the_text + j);
    #####:  371:	      if ((!got_command
branch  0 never executed
branch  1 never executed
    #####:  372:		   && (special_text_char == RC_IDATE_CHAR
branch  0 never executed
branch  1 never executed
    #####:  373:		       || special_text_char == RC_EDATE_CHAR))
branch  0 never executed
branch  1 never executed
    #####:  374:		  || special_text_char == RC_TDATE_CHAR
branch  0 never executed
branch  1 never executed
    #####:  375:		  || special_text_char == RC_WDNAME_CHAR
branch  0 never executed
branch  1 never executed
    #####:  376:		  || special_text_char == RC_WDNR_M1_2_S7_CHAR
branch  0 never executed
branch  1 never executed
    #####:  377:		  || special_text_char == RC_WDNR_M0_2_S6_CHAR
branch  0 never executed
branch  1 never executed
    #####:  378:		  || special_text_char == RC_WDNR_S1_2_S7_CHAR
branch  0 never executed
branch  1 never executed
    #####:  379:		  || special_text_char == RC_WDNR_S0_2_S6_CHAR
branch  0 never executed
branch  1 never executed
    #####:  380:		  || special_text_char == RC_WDNR_X1_2_X7_CHAR
branch  0 never executed
branch  1 never executed
    #####:  381:		  || special_text_char == RC_WDNR_X0_2_X6_CHAR
branch  0 never executed
branch  1 never executed
    #####:  382:		  || special_text_char == RC_DOYNR_CHAR
branch  0 never executed
branch  1 never executed
    #####:  383:		  || special_text_char == RC_DAYNR_CHAR
branch  0 never executed
branch  1 never executed
    #####:  384:		  || special_text_char == RC_MONTHNAME_CHAR
branch  0 never executed
branch  1 never executed
    #####:  385:		  || special_text_char == RC_MONTHNR_CHAR
branch  0 never executed
branch  1 never executed
    #####:  386:		  || special_text_char == RC_YEARNR_CHAR
branch  0 never executed
branch  1 never executed
    #####:  387:		  || special_text_char == RC_WEEKNR_CHAR
branch  0 never executed
branch  1 never executed
    #####:  388:		  || special_text_char == RC_BYEAR_CHAR
branch  0 never executed
branch  1 never executed
    #####:  389:		  || ((special_text_char == RC_YEAR_DIFF_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  390:		      && *(the_text + j + 1)
branch  0 never executed
branch  1 never executed
    #####:  391:		      && !isspace (*(the_text + j + 1)))
branch  0 never executed
branch  1 never executed
    #####:  392:		  || special_text_char == RC_MOON_CHAR
branch  0 never executed
branch  1 never executed
    #####:  393:		  || special_text_char == RC_MOON_IMAGE_CHAR
branch  0 never executed
branch  1 never executed
    #####:  394:		  || special_text_char == RC_BIO_CHAR
branch  0 never executed
branch  1 never executed
    #####:  395:		  || special_text_char == RC_BIO_BAR_CHAR)
branch  0 never executed
branch  1 never executed
        -:  396:		{
    #####:  397:		  j++;
    #####:  398:		  if (special_text_char == RC_TDATE_CHAR)
branch  0 never executed
branch  1 never executed
        -:  399:		    {
        -:  400:		      auto Slint jdate;
        -:  401:
        -:  402:
        -:  403:		      /*
        -:  404:		         %textual_date[[+|-]N] special text found.
        -:  405:		       */
    #####:  406:		      i = 0;
    #####:  407:		      if (*(the_text + j) == *ASC_LIT
branch  0 never executed
branch  1 never executed
    #####:  408:			  || *(the_text + j) == *DES_LIT)
branch  0 never executed
branch  1 never executed
    #####:  409:			s2[i++] = *(the_text + j++);
    #####:  410:		      while (isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -:  411:			{
    #####:  412:			  if ((Uint) i >= maxlen_max)
branch  0 never executed
branch  1 never executed
    #####:  413:			    resize_all_strings (maxlen_max << 1, FALSE,
call    0 never executed
        -:  414:						__FILE__, (long) __LINE__);
    #####:  415:			  s2[i++] = *(the_text + j++);
        -:  416:			}
    #####:  417:		      s2[i] = '\0';
    #####:  418:		      num = atol (s2);
    #####:  419:		      jdate =
    #####:  420:			(Slint) date2num (d, m, year + incr_year - decr_year);
call    0 never executed
    #####:  421:		      if ((jdate + num <=
branch  0 never executed
branch  1 never executed
    #####:  422:			   (Slint) date2num (dvec[MONTH_MAX - 1], MONTH_MAX,
call    0 never executed
        -:  423:					     YEAR_MAX))
    #####:  424:			  && (jdate + num >= 1L))
branch  0 never executed
branch  1 never executed
        -:  425:			{
    #####:  426:			  num2date (jdate + num, &dd, &mm, &yy);
call    0 never executed
    #####:  427:			  if (transform_year)
branch  0 never executed
branch  1 never executed
        -:  428:			    {
    #####:  429:			      yy = yy - transform_year;
    #####:  430:			      if ((yy >= 0) && (transform_year > 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  431:				yy++;
        -:  432:			    }
    #####:  433:			  sprintf (s2, "%02d-%s-%0*d", dd,
call    0 never executed
        -:  434:				   short_month_name (mm), len_year_max, yy);
        -:  435:			}
        -:  436:		      else
    #####:  437:			*s2 = '\0';
        -:  438:		      /*
        -:  439:		         And copy the expanded special text into the target string.
        -:  440:		       */
    #####:  441:		      i = 0;
    #####:  442:		      while (s2[i])
branch  0 never executed
branch  1 never executed
        -:  443:			{
    #####:  444:			  if ((Uint) k >= maxlen_max - (Uint) len_fn)
branch  0 never executed
branch  1 never executed
    #####:  445:			    resize_all_strings (maxlen_max << 1, FALSE,
call    0 never executed
        -:  446:						__FILE__, (long) __LINE__);
    #####:  447:			  s1[k++] = s6[kk++] = s2[i++];
        -:  448:			}
        -:  449:		    }
        -:  450:		  else
        -:  451:		    {
    #####:  452:		      auto Bool is_ie = FALSE;
    #####:  453:		      auto Bool is_range = FALSE;
    #####:  454:		      auto Bool dflt_yy_set = FALSE;
    #####:  455:		      auto Bool dflt_ryy_set = FALSE;
        -:  456:
        -:  457:
    #####:  458:		      rhc = '\0';
    #####:  459:		      rlen = rdd = rmm = ryy = rnn = 0;
        -:  460:		      /*
        -:  461:		         Check if a range of dates is given.
        -:  462:		       */
    #####:  463:		      if (special_text_char == RC_IDATE_CHAR
branch  0 never executed
branch  1 never executed
    #####:  464:			  || special_text_char == RC_EDATE_CHAR)
branch  0 never executed
branch  1 never executed
        -:  465:			{
    #####:  466:			  is_ie = TRUE;
    #####:  467:			  if (!ie_date_maps_set)
branch  0 never executed
branch  1 never executed
        -:  468:			    {
    #####:  469:			      for (i = 1; i < DAY_LAST + 2; i++)
branch  0 never executed
branch  1 never executed
    #####:  470:				inclusive_date_map[i] =
    #####:  471:				  !(exclusive_date_map[i] = TRUE);
    #####:  472:			      ie_date_maps_set = !(*inclusive_date_map =
    #####:  473:						   *exclusive_date_map =
        -:  474:						   FALSE);
        -:  475:			    }
    #####:  476:			  ptr_char = the_text + j;
    #####:  477:			  while (*ptr_char
branch  0 never executed
branch  1 never executed
    #####:  478:				 && !isspace (*ptr_char)
branch  0 never executed
branch  1 never executed
    #####:  479:				 && (*ptr_char != RC_DRANGE_CHAR))
branch  0 never executed
branch  1 never executed
    #####:  480:			    ptr_char++;
    #####:  481:			  if (*ptr_char == RC_DRANGE_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  482:			    is_range = TRUE;
        -:  483:			}
    #####:  484:		      if (is_range)
branch  0 never executed
branch  1 never executed
    #####:  485:			*ptr_char = '\0';
    #####:  486:		      (void) rc_get_date (the_text + j, lptrs2, FALSE,
call    0 never executed
        -:  487:					  &is_weekday_mode, &dd, &mm, &yy,
        -:  488:					  &nn, &len, &hhc, &hhn, &hhwd,
        -:  489:					  filename, line_number,
    #####:  490:					  the_text + j - 2, TRUE);
    #####:  491:		      j += len;
    #####:  492:		      if (is_range)
branch  0 never executed
branch  1 never executed
        -:  493:			{
    #####:  494:			  j++;
    #####:  495:			  (void) rc_get_date (the_text + j, lptrs2, FALSE,
call    0 never executed
        -:  496:					      &ris_weekday_mode, &rdd, &rmm,
        -:  497:					      &ryy, &rnn, &rlen, &rhc, &rhn,
        -:  498:					      &rhwd, filename, line_number,
    #####:  499:					      the_text + j, TRUE);
    #####:  500:			  j += rlen;
        -:  501:			}
    #####:  502:		      if (is_ie)
branch  0 never executed
branch  1 never executed
        -:  503:			{
    #####:  504:			  if (!len)
branch  0 never executed
branch  1 never executed
    #####:  505:			    dflt_yy_set = TRUE;
    #####:  506:			  if (!rlen)
branch  0 never executed
branch  1 never executed
    #####:  507:			    dflt_ryy_set = TRUE;
        -:  508:			}
    #####:  509:		      if (!yy)
branch  0 never executed
branch  1 never executed
        -:  510:			{
    #####:  511:			  if (dflt_yy_set)
branch  0 never executed
branch  1 never executed
    #####:  512:			    yy = YEAR_MIN;
        -:  513:			  else
        -:  514:			    {
    #####:  515:			      yy = year;
    #####:  516:			      if (y && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  517:				yy = y;
        -:  518:			    }
        -:  519:			}
    #####:  520:		      if (!ryy)
branch  0 never executed
branch  1 never executed
        -:  521:			{
    #####:  522:			  if (dflt_ryy_set)
branch  0 never executed
branch  1 never executed
    #####:  523:			    ryy = YEAR_MAX;
        -:  524:			  else
        -:  525:			    {
    #####:  526:			      ryy = year;
    #####:  527:			      if (y && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  528:				ryy = y;
        -:  529:			    }
        -:  530:			}
        -:  531:		      /*
        -:  532:		         Respect possible fiscal year.
        -:  533:		       */
    #####:  534:		      if (!dflt_yy_set && (yy != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  535:			{
    #####:  536:			  yy -= incr_year;
    #####:  537:			  yy += decr_year;
        -:  538:			}
    #####:  539:		      if (!dflt_ryy_set && (ryy != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  540:			{
    #####:  541:			  ryy -= incr_year;
    #####:  542:			  ryy += decr_year;
        -:  543:			}
        -:  544:		      /*
        -:  545:		         If @... "date"-part is given, compute the according date.
        -:  546:		       */
    #####:  547:		      switch (hhc)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  548:			{
    #####:  549:			case RC_EASTER_CHAR:
        -:  550:			case RC_TODAY_CHAR:
    #####:  551:			  if (!dflt_yy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  552:			    {
    #####:  553:			      if (!precomp_date
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  554:				  (hhn, hhwd, &dd, &mm, yy + incr_year,
    #####:  555:				   (hhc == RC_EASTER_CHAR) ? EAster : TOday))
    #####:  556:				yy = SPECIAL_VALUE;
        -:  557:			    }
        -:  558:			  else
    #####:  559:			    if (!precomp_date (hhn, hhwd, &dd, &mm, yy,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  560:					       (hhc ==
        -:  561:						RC_EASTER_CHAR) ? EAster :
        -:  562:					       TOday))
    #####:  563:			    yy = SPECIAL_VALUE;
    #####:  564:			  break;
    #####:  565:			case 'D':
        -:  566:			case 'W':
    #####:  567:			  if (!dflt_yy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  568:			    {
    #####:  569:			      auto int fiscal_year = yy + incr_year;
        -:  570:
        -:  571:
    #####:  572:			      if (!precomp_nth_wd
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  573:				  (hhn, hhwd, &hhn, &dd, &mm, &fiscal_year,
    #####:  574:				   (hhc == 'D') ? DAy : WEek))
    #####:  575:				yy = fiscal_year;
        -:  576:			    }
        -:  577:			  else
    #####:  578:			    (void) precomp_nth_wd (hhn, hhwd, &hhn, &dd, &mm,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  579:						   &yy,
    #####:  580:						   (hhc == 'D') ? DAy : WEek);
    #####:  581:			  break;
    #####:  582:			default:
    #####:  583:			  if (islower (hhc))
branch  0 never executed
branch  1 never executed
        -:  584:			    {
    #####:  585:			      if (rc_dvar[IDX (hhc)].dvar_local.dvar_month)
branch  0 never executed
branch  1 never executed
        -:  586:				{
    #####:  587:				  mm =
    #####:  588:				    (int) rc_dvar[IDX (hhc)].dvar_local.
        -:  589:				    dvar_month;
    #####:  590:				  dd =
    #####:  591:				    (int) rc_dvar[IDX (hhc)].dvar_local.
        -:  592:				    dvar_day;
        -:  593:				}
        -:  594:			      else
    #####:  595:				if (rc_dvar[IDX (hhc)].dvar_global.dvar_month)
branch  0 never executed
branch  1 never executed
        -:  596:				{
    #####:  597:				  mm =
    #####:  598:				    (int) rc_dvar[IDX (hhc)].dvar_global.
        -:  599:				    dvar_month;
    #####:  600:				  dd =
    #####:  601:				    (int) rc_dvar[IDX (hhc)].dvar_global.
        -:  602:				    dvar_day;
        -:  603:				}
    #####:  604:			      if (!dflt_yy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  605:				{
    #####:  606:				  if (!precomp_date
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  607:				      (hhn, hhwd, &dd, &mm, yy + incr_year,
        -:  608:				       DVar))
    #####:  609:				    yy = SPECIAL_VALUE;
        -:  610:				}
        -:  611:			      else
    #####:  612:				if (!precomp_date
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  613:				    (hhn, hhwd, &dd, &mm, yy, DVar))
    #####:  614:				yy = SPECIAL_VALUE;
        -:  615:			    }
        -:  616:			}
    #####:  617:		      switch (rhc)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -:  618:			{
    #####:  619:			case RC_EASTER_CHAR:
        -:  620:			case RC_TODAY_CHAR:
    #####:  621:			  if (!dflt_ryy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  622:			    {
    #####:  623:			      if (!precomp_date
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  624:				  (rhn, rhwd, &rdd, &rmm, ryy + incr_year,
    #####:  625:				   (rhc == RC_EASTER_CHAR) ? EAster : TOday))
    #####:  626:				ryy = SPECIAL_VALUE;
        -:  627:			    }
        -:  628:			  else
    #####:  629:			    if (!precomp_date (rhn, rhwd, &rdd, &rmm, ryy,
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
    #####:  630:					       (rhc ==
        -:  631:						RC_EASTER_CHAR) ? EAster :
        -:  632:					       TOday))
    #####:  633:			    ryy = SPECIAL_VALUE;
    #####:  634:			  break;
    #####:  635:			case 'D':
        -:  636:			case 'W':
    #####:  637:			  if (!dflt_ryy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  638:			    {
    #####:  639:			      auto int fiscal_year = ryy + incr_year;
        -:  640:
        -:  641:
    #####:  642:			      if (!precomp_nth_wd
branch  0 never executed
branch  1 never executed
call    2 never executed
branch  3 never executed
branch  4 never executed
        -:  643:				  (rhn, rhwd, &rhn, &rdd, &rmm, &fiscal_year,
    #####:  644:				   (rhc == 'D') ? DAy : WEek))
    #####:  645:				ryy = fiscal_year;
        -:  646:			    }
        -:  647:			  else
    #####:  648:			    (void) precomp_nth_wd (rhn, rhwd, &rhn, &rdd,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  649:						   &rmm, &ryy,
    #####:  650:						   (rhc == 'D') ? DAy : WEek);
    #####:  651:			  break;
    #####:  652:			default:
    #####:  653:			  if (islower (rhc))
branch  0 never executed
branch  1 never executed
        -:  654:			    {
    #####:  655:			      if (rc_dvar[IDX (rhc)].dvar_local.dvar_month)
branch  0 never executed
branch  1 never executed
        -:  656:				{
    #####:  657:				  rmm =
    #####:  658:				    (int) rc_dvar[IDX (rhc)].dvar_local.
        -:  659:				    dvar_month;
    #####:  660:				  rdd =
    #####:  661:				    (int) rc_dvar[IDX (rhc)].dvar_local.
        -:  662:				    dvar_day;
        -:  663:				}
        -:  664:			      else
    #####:  665:				if (rc_dvar[IDX (rhc)].dvar_global.dvar_month)
branch  0 never executed
branch  1 never executed
        -:  666:				{
    #####:  667:				  rmm =
    #####:  668:				    (int) rc_dvar[IDX (rhc)].dvar_global.
        -:  669:				    dvar_month;
    #####:  670:				  rdd =
    #####:  671:				    (int) rc_dvar[IDX (rhc)].dvar_global.
        -:  672:				    dvar_day;
        -:  673:				}
    #####:  674:			      if (!dflt_ryy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  675:				{
    #####:  676:				  if (!precomp_date
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  677:				      (rhn, rhwd, &rdd, &rmm, ryy + incr_year,
        -:  678:				       DVar))
    #####:  679:				    ryy = SPECIAL_VALUE;
        -:  680:				}
        -:  681:			      else
    #####:  682:				if (!precomp_date
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  683:				    (rhn, rhwd, &rdd, &rmm, ryy, DVar))
    #####:  684:				ryy = SPECIAL_VALUE;
        -:  685:			    }
        -:  686:			}
    #####:  687:		      if (len > len_year_max)
branch  0 never executed
branch  1 never executed
    #####:  688:			len -= len_year_max;
        -:  689:		      else
    #####:  690:			len = 0;
    #####:  691:		      if (rlen > len_year_max)
branch  0 never executed
branch  1 never executed
    #####:  692:			rlen -= len_year_max;
        -:  693:		      else
    #####:  694:			rlen = 0;
        -:  695:		      /*
        -:  696:		         All %?[STARTING_DATE][#[ENDING_DATE]] special texts.
        -:  697:		       */
    #####:  698:		      if (is_ie)
branch  0 never executed
branch  1 never executed
        -:  699:			{
        -:  700:			  /*
        -:  701:			     Assume current/first month of year.
        -:  702:			   */
    #####:  703:			  if (!mm)
branch  0 never executed
branch  1 never executed
        -:  704:			    {
    #####:  705:			      if (len >= 1)
branch  0 never executed
branch  1 never executed
        -:  706:				{
    #####:  707:				  mm = m;
    #####:  708:				  if (len == 2)
branch  0 never executed
branch  1 never executed
    #####:  709:				    len = 0;
        -:  710:				  else
    #####:  711:				    len--;
        -:  712:				}
        -:  713:			      else
    #####:  714:				mm = MONTH_MIN;
        -:  715:			    }
        -:  716:			  else
        -:  717:			    {
    #####:  718:			      if (len == 2)
branch  0 never executed
branch  1 never executed
    #####:  719:				len = 0;
        -:  720:			      else
    #####:  721:				len--;
        -:  722:			    }
        -:  723:			  /*
        -:  724:			     Assume current/first day of month.
        -:  725:			   */
    #####:  726:			  if (!dd)
branch  0 never executed
branch  1 never executed
        -:  727:			    {
    #####:  728:			      if (len >= 1)
branch  0 never executed
branch  1 never executed
    #####:  729:				dd = d;
        -:  730:			      else
    #####:  731:				dd = DAY_MIN;
        -:  732:			    }
        -:  733:			  /*
        -:  734:			     Assume current/last month of year.
        -:  735:			   */
    #####:  736:			  if (!rmm)
branch  0 never executed
branch  1 never executed
        -:  737:			    {
    #####:  738:			      if (rlen >= 1)
branch  0 never executed
branch  1 never executed
        -:  739:				{
    #####:  740:				  rmm = m;
    #####:  741:				  if (rlen == 2)
branch  0 never executed
branch  1 never executed
    #####:  742:				    rlen = 0;
        -:  743:				  else
    #####:  744:				    rlen--;
        -:  745:				}
        -:  746:			      else
    #####:  747:				rmm = MONTH_MAX;
        -:  748:			    }
        -:  749:			  else
        -:  750:			    {
    #####:  751:			      if (rlen == 2)
branch  0 never executed
branch  1 never executed
    #####:  752:				rlen = 0;
        -:  753:			      else
    #####:  754:				rlen--;
        -:  755:			    }
        -:  756:			  /*
        -:  757:			     Assume current/last day of month.
        -:  758:			   */
    #####:  759:			  if (!rdd)
branch  0 never executed
branch  1 never executed
        -:  760:			    {
    #####:  761:			      if (rlen >= 1)
branch  0 never executed
branch  1 never executed
    #####:  762:				rdd = d;
        -:  763:			      else
        -:  764:				{
    #####:  765:				  if (rmm == 2)
branch  0 never executed
branch  1 never executed
        -:  766:				    {
    #####:  767:				      if (!dflt_ryy_set
branch  0 never executed
branch  1 never executed
    #####:  768:					  && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
    #####:  769:					rdd =
    #####:  770:					  days_of_february (ryy + incr_year);
call    0 never executed
        -:  771:				      else
    #####:  772:					rdd = days_of_february (ryy);
call    0 never executed
        -:  773:				    }
        -:  774:				  else
    #####:  775:				    rdd = dvec[rmm - 1];
        -:  776:				}
        -:  777:			    }
        -:  778:			}
        -:  779:		      else
        -:  780:			/*
        -:  781:			   All other %?[DATE] special texts.
        -:  782:			 */
        -:  783:			{
        -:  784:			  /*
        -:  785:			     Assume current month/day.
        -:  786:			   */
    #####:  787:			  if (!mm)
branch  0 never executed
branch  1 never executed
    #####:  788:			    mm = m;
    #####:  789:			  if (!dd)
branch  0 never executed
branch  1 never executed
    #####:  790:			    dd = d;
        -:  791:			}
        -:  792:		      /*
        -:  793:		         If special value "99" for day `dd' is given,
        -:  794:		         set the day to last day of month.
        -:  795:		       */
    #####:  796:		      if (dd == 99)
branch  0 never executed
branch  1 never executed
        -:  797:			{
        -:  798:			  /*
        -:  799:			     Assume the last day of month.
        -:  800:			   */
    #####:  801:			  if (mm == 2)
branch  0 never executed
branch  1 never executed
    #####:  802:			    dd = days_of_february (yy);
call    0 never executed
        -:  803:			  else
    #####:  804:			    dd = dvec[mm - 1];
        -:  805:			}
    #####:  806:		      if (rdd == 99)
branch  0 never executed
branch  1 never executed
        -:  807:			{
        -:  808:			  /*
        -:  809:			     Assume the last day of month.
        -:  810:			   */
    #####:  811:			  if (rmm == 2)
branch  0 never executed
branch  1 never executed
        -:  812:			    {
    #####:  813:			      if (!dflt_ryy_set && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  814:				rdd = days_of_february (ryy + incr_year);
call    0 never executed
        -:  815:			      else
    #####:  816:				rdd = days_of_february (ryy);
call    0 never executed
        -:  817:			    }
        -:  818:			  else
    #####:  819:			    rdd = dvec[rmm - 1];
        -:  820:			}
        -:  821:		      /*
        -:  822:		         If "N'th weekday of month" entry set, compute the according date.
        -:  823:		       */
    #####:  824:		      if (nn)
branch  0 never executed
branch  1 never executed
    #####:  825:			nth_weekday_of_month (&dd, &mm, &yy, &nn,
call    0 never executed
        -:  826:					      &is_weekday_mode);
    #####:  827:		      if (rnn)
branch  0 never executed
branch  1 never executed
    #####:  828:			nth_weekday_of_month (&rdd, &rmm, &ryy, &rnn,
call    0 never executed
        -:  829:					      &ris_weekday_mode);
        -:  830:		      /*
        -:  831:		         Proceed if (optionally specified) date is valid.
        -:  832:		       */
    #####:  833:		      if ((!is_range
branch  0 never executed
branch  1 never executed
    #####:  834:			   && (yy != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####:  835:			  || (is_range
branch  0 never executed
branch  1 never executed
    #####:  836:			      && (yy != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
    #####:  837:			      && (ryy != SPECIAL_VALUE)))
branch  0 never executed
branch  1 never executed
        -:  838:			{
    #####:  839:			  register int true_year = (y) ? y : year + incr_year;
branch  0 never executed
branch  1 never executed
        -:  840:
        -:  841:
    #####:  842:			  if (!nn
branch  0 never executed
branch  1 never executed
    #####:  843:			      && !dflt_yy_set
branch  0 never executed
branch  1 never executed
    #####:  844:			      && (fiscal_month > MONTH_MIN
branch  0 never executed
branch  1 never executed
    #####:  845:				  || (incr_year
branch  0 never executed
branch  1 never executed
    #####:  846:				      && (rc_tomorrow_flag || rc_week_flag))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  847:			    yy += incr_year;
    #####:  848:			  if (!rnn
branch  0 never executed
branch  1 never executed
    #####:  849:			      && !dflt_ryy_set
branch  0 never executed
branch  1 never executed
    #####:  850:			      && (fiscal_month > MONTH_MIN
branch  0 never executed
branch  1 never executed
    #####:  851:				  || (incr_year
branch  0 never executed
branch  1 never executed
    #####:  852:				      && (rc_tomorrow_flag || rc_week_flag))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  853:			    ryy += incr_year;
        -:  854:			  /*
        -:  855:			     Manage the %?[STARTING_DATE[#ENDING_DATE]] special texts.
        -:  856:			   */
    #####:  857:			  if (is_ie)
branch  0 never executed
branch  1 never executed
        -:  858:			    {
        -:  859:			      /*
        -:  860:			         If starting date of event not greater than ending
        -:  861:			         date of event, mark the period in according map,
        -:  862:			         otherwise ignore the %?... special text completely.
        -:  863:			       */
    #####:  864:			      num = d_between (dd, mm, yy, rdd, rmm, ryy);
call    0 never executed
    #####:  865:			      if (num >= 0L)
branch  0 never executed
branch  1 never executed
        -:  866:				{
    #####:  867:				  register int s_doy = DAY_MIN;
    #####:  868:				  register int e_doy = DAY_LAST + 1;
        -:  869:
        -:  870:
    #####:  871:				  if (special_text_char == RC_IDATE_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  872:				    *inclusive_date_map = TRUE;
        -:  873:				  else
    #####:  874:				    *exclusive_date_map = TRUE;
    #####:  875:				  if (yy == true_year)
branch  0 never executed
branch  1 never executed
    #####:  876:				    s_doy = day_of_year (dd, mm, yy);
call    0 never executed
    #####:  877:				  else if (yy > true_year)
branch  0 never executed
branch  1 never executed
    #####:  878:				    s_doy = SPECIAL_VALUE;
    #####:  879:				  if (ryy == true_year)
branch  0 never executed
branch  1 never executed
    #####:  880:				    e_doy = day_of_year (rdd, rmm, ryy);
call    0 never executed
    #####:  881:				  else if (ryy < true_year)
branch  0 never executed
branch  1 never executed
    #####:  882:				    e_doy = SPECIAL_VALUE;
    #####:  883:				  if ((s_doy != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
    #####:  884:				      && (e_doy != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
        -:  885:				    {
    #####:  886:				      if (special_text_char == RC_IDATE_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  887:					for (i = s_doy; i <= e_doy; i++)
branch  0 never executed
branch  1 never executed
    #####:  888:					  inclusive_date_map[i] = TRUE;
        -:  889:				      else
    #####:  890:					for (i = s_doy; i <= e_doy; i++)
branch  0 never executed
branch  1 never executed
    #####:  891:					  exclusive_date_map[i] = FALSE;
        -:  892:				    }
        -:  893:				}
        -:  894:			    }
        -:  895:			  else
        -:  896:			    /*
        -:  897:			       Manage the %?[DATE] special texts.
        -:  898:			     */
        -:  899:			    {
    #####:  900:			      if ((special_text_char != RC_BYEAR_CHAR)
branch  0 never executed
branch  1 never executed
    #####:  901:				  && (special_text_char != RC_YEAR_DIFF_CHAR))
branch  0 never executed
branch  1 never executed
    #####:  902:				yy += incr_year;
    #####:  903:			      i = weekday_of_date (dd, mm, yy);
call    0 never executed
    #####:  904:			      switch (special_text_char)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
        -:  905:				{
    #####:  906:				case RC_WDNAME_CHAR:
        -:  907:				  /*
        -:  908:				     %weekday_name special text.
        -:  909:				   */
    #####:  910:				  (void) use_format (&s2, 0, day_name (i), 0,
call    0 never executed
call    1 never executed
        -:  911:						     FALSE, is_cformat,
        -:  912:						     is_lformat, is_sign,
        -:  913:						     is_lzero, is_suffix,
        -:  914:						     is_fformat, fstyle,
        -:  915:						     fwidth, 0);
    #####:  916:				  break;
    #####:  917:				case RC_WDNR_M1_2_S7_CHAR:
        -:  918:				  /*
        -:  919:				     %weekday_number special text.
        -:  920:				   */
    #####:  921:				  (void) use_format (&s2, 0, "", i, TRUE,
call    0 never executed
        -:  922:						     is_cformat, is_lformat,
        -:  923:						     is_sign, is_lzero,
        -:  924:						     is_suffix, is_fformat,
        -:  925:						     fstyle, fwidth, 0);
    #####:  926:				  break;
    #####:  927:				case RC_WDNR_M0_2_S6_CHAR:
        -:  928:				  /*
        -:  929:				     %weekday_number special text.
        -:  930:				   */
    #####:  931:				  (void) use_format (&s2, 0, "", i - 1, TRUE,
call    0 never executed
        -:  932:						     is_cformat, is_lformat,
        -:  933:						     is_sign, is_lzero,
        -:  934:						     is_suffix, is_fformat,
        -:  935:						     fstyle, fwidth, 0);
    #####:  936:				  break;
    #####:  937:				case RC_WDNR_S1_2_S7_CHAR:
        -:  938:				  /*
        -:  939:				     %weekday_number special text.
        -:  940:				   */
    #####:  941:				  (void) use_format (&s2, 0, "",
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  942:						     (i ==
    #####:  943:						      DAY_MAX) ? DAY_MIN : i +
        -:  944:						     1, TRUE, is_cformat,
        -:  945:						     is_lformat, is_sign,
        -:  946:						     is_lzero, is_suffix,
        -:  947:						     is_fformat, fstyle,
        -:  948:						     fwidth, 0);
    #####:  949:				  break;
    #####:  950:				case RC_WDNR_S0_2_S6_CHAR:
        -:  951:				  /*
        -:  952:				     %weekday_number special text.
        -:  953:				   */
    #####:  954:				  (void) use_format (&s2, 0, "",
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  955:						     (i ==
        -:  956:						      DAY_MAX) ? DAY_MIN -
        -:  957:						     1 : i, TRUE, is_cformat,
        -:  958:						     is_lformat, is_sign,
        -:  959:						     is_lzero, is_suffix,
        -:  960:						     is_fformat, fstyle,
        -:  961:						     fwidth, 0);
    #####:  962:				  break;
    #####:  963:				case RC_WDNR_X1_2_X7_CHAR:
        -:  964:				  /*
        -:  965:				     %weekday_number special text.
        -:  966:				   */
    #####:  967:				  (void) use_format (&s2, 0, "",
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  968:						     SYEAR (i, start_day),
        -:  969:						     TRUE, is_cformat,
        -:  970:						     is_lformat, is_sign,
        -:  971:						     is_lzero, is_suffix,
        -:  972:						     is_fformat, fstyle,
        -:  973:						     fwidth, 0);
    #####:  974:				  break;
    #####:  975:				case RC_WDNR_X0_2_X6_CHAR:
        -:  976:				  /*
        -:  977:				     %weekday_number special text.
        -:  978:				   */
    #####:  979:				  (void) use_format (&s2, 0, "",
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  980:						     (SYEAR (i, start_day)) -
        -:  981:						     1, TRUE, is_cformat,
        -:  982:						     is_lformat, is_sign,
        -:  983:						     is_lzero, is_suffix,
        -:  984:						     is_fformat, fstyle,
        -:  985:						     fwidth, 0);
    #####:  986:				  break;
    #####:  987:				case RC_DOYNR_CHAR:
        -:  988:				  /*
        -:  989:				     %day_of_year_number special text.
        -:  990:				   */
    #####:  991:				  (void) use_format (&s2, 0, "",
call    0 never executed
    #####:  992:						     day_of_year (dd, mm, yy),
call    0 never executed
        -:  993:						     TRUE, is_cformat,
        -:  994:						     is_lformat, is_sign,
        -:  995:						     is_lzero, is_suffix,
        -:  996:						     is_fformat, fstyle,
        -:  997:						     fwidth, 0);
    #####:  998:				  break;
    #####:  999:				case RC_DAYNR_CHAR:
        -: 1000:				  /*
        -: 1001:				     %day_number special text.
        -: 1002:				   */
    #####: 1003:				  (void) use_format (&s2, 0, "", dd, TRUE,
call    0 never executed
        -: 1004:						     is_cformat, is_lformat,
        -: 1005:						     is_sign, is_lzero,
        -: 1006:						     is_suffix, is_fformat,
        -: 1007:						     fstyle, fwidth, 0);
    #####: 1008:				  break;
    #####: 1009:				case RC_MONTHNAME_CHAR:
        -: 1010:				  /*
        -: 1011:				     %month_name special text.
        -: 1012:				   */
    #####: 1013:				  (void) use_format (&s2, 0, month_name (mm),
call    0 never executed
call    1 never executed
        -: 1014:						     0, FALSE, is_cformat,
        -: 1015:						     is_lformat, is_sign,
        -: 1016:						     is_lzero, is_suffix,
        -: 1017:						     is_fformat, fstyle,
        -: 1018:						     fwidth, 0);
    #####: 1019:				  break;
    #####: 1020:				case RC_MONTHNR_CHAR:
        -: 1021:				  /*
        -: 1022:				     %month_number special text.
        -: 1023:				   */
    #####: 1024:				  (void) use_format (&s2, 0, "", mm, TRUE,
call    0 never executed
        -: 1025:						     is_cformat, is_lformat,
        -: 1026:						     is_sign, is_lzero,
        -: 1027:						     is_suffix, is_fformat,
        -: 1028:						     fstyle, fwidth, 0);
    #####: 1029:				  break;
    #####: 1030:				case RC_WEEKNR_CHAR:
        -: 1031:				  /*
        -: 1032:				     %week_number special text.
        -: 1033:				   */
    #####: 1034:				  i =
call    0 never executed
    #####: 1035:				    week_number (dd, mm, yy, iso_week_number,
        -: 1036:						 start_day);
        -: 1037:				  /*
        -: 1038:				     We convert the computed week number to a week number text
        -: 1039:				     (this looks nicer in output).
        -: 1040:				   */
    #####: 1041:				  if (i < 0)
branch  0 never executed
branch  1 never executed
        -: 1042:				    /*
        -: 1043:				       Week starts in previous year and the first days
        -: 1044:				       of the actual year are not in its first week.
        -: 1045:				     */
    #####: 1046:				    sprintf (s2, "%02d/0", -i);
    #####: 1047:				  else if (!i)
branch  0 never executed
branch  1 never executed
        -: 1048:				    /*
        -: 1049:				       Week starts in previous year and the first days
        -: 1050:				       of the actual year are in its first week.
        -: 1051:				     */
    #####: 1052:				    sprintf (s2, "%s", "53/1");
        -: 1053:				  else
        -: 1054:				    /*
        -: 1055:				       Week starts in actual year.
        -: 1056:				     */
    #####: 1057:				    sprintf (s2, "%02d", i);
    #####: 1058:				  break;
    #####: 1059:				case RC_YEAR_DIFF_CHAR:
        -: 1060:				  /*
        -: 1061:				     %year_difference special text.
        -: 1062:				   */
    #####: 1063:				  yy = yy - true_year;
    #####: 1064:				  if (m < mm || ((m == mm) && (d < dd)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1065:				    {
    #####: 1066:				      if (yy < 1)
branch  0 never executed
branch  1 never executed
    #####: 1067:					yy++;
    #####: 1068:				      else if (yy > 1)
branch  0 never executed
branch  1 never executed
    #####: 1069:					yy--;
        -: 1070:				    }
    #####: 1071:				  (void) use_format (&s2, 0, "", yy, TRUE,
call    0 never executed
        -: 1072:						     is_cformat, is_lformat,
        -: 1073:						     is_sign, is_lzero,
        -: 1074:						     is_suffix, is_fformat,
        -: 1075:						     fstyle, fwidth, 0);
    #####: 1076:				  break;
    #####: 1077:				case RC_YEARNR_CHAR:
        -: 1078:				  /*
        -: 1079:				     %year_number special text.
        -: 1080:				   */
    #####: 1081:				  if (transform_year)
branch  0 never executed
branch  1 never executed
        -: 1082:				    {
    #####: 1083:				      yy = yy - transform_year;
    #####: 1084:				      if ((yy >= 0) && (transform_year > 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1085:					yy++;
        -: 1086:				    }
    #####: 1087:				  (void) use_format (&s2, 0, "", yy, TRUE,
call    0 never executed
        -: 1088:						     is_cformat, is_lformat,
        -: 1089:						     is_sign, is_lzero,
        -: 1090:						     is_suffix, is_fformat,
        -: 1091:						     fstyle, fwidth, 0);
    #####: 1092:				  break;
    #####: 1093:				case RC_BYEAR_CHAR:
        -: 1094:				  /*
        -: 1095:				     %birth_age_number special text.
        -: 1096:				   */
    #####: 1097:				  yy = true_year - yy;
    #####: 1098:				  if (m < mm || ((m == mm) && (d < dd)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1099:				    yy--;
    #####: 1100:				  if (yy >= 1)
branch  0 never executed
branch  1 never executed
    #####: 1101:				    (void) use_format (&s2, 0, "", yy, TRUE,
call    0 never executed
        -: 1102:						       is_cformat, is_lformat,
        -: 1103:						       is_sign, is_lzero,
        -: 1104:						       is_suffix, is_fformat,
        -: 1105:						       fstyle, fwidth, 0);
        -: 1106:				  else
    #####: 1107:				    *s2 = '\0';
    #####: 1108:				  break;
    #####: 1109:				case RC_MOON_CHAR:
        -: 1110:				  /*
        -: 1111:				     Calculate the Moon phase.
        -: 1112:				   */
    #####: 1113:				  i = moondisk (&moon_min_max, dd, mm, yy,
call    0 never executed
        -: 1114:						time_hour_offset,
        -: 1115:						time_min_offset);
    #####: 1116:				  (void) use_format (&s2, 0, "", abs (i),
call    0 never executed
        -: 1117:						     TRUE, is_cformat,
        -: 1118:						     is_lformat, is_sign,
        -: 1119:						     is_lzero, is_suffix,
        -: 1120:						     is_fformat, fstyle,
        -: 1121:						     fwidth, 0);
    #####: 1122:				  strcat (s2, "%");
    #####: 1123:				  if (moon_min_max)
branch  0 never executed
branch  1 never executed
        -: 1124:				    {
    #####: 1125:				      if (abs (i) < 50)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1126:					strcat (s2, MOON_MIN);
        -: 1127:				      else
    #####: 1128:					strcat (s2, MOON_MAX);
        -: 1129:				    }
    #####: 1130:				  else if (i < 0)
branch  0 never executed
branch  1 never executed
    #####: 1131:				    strcat (s2, MOON_WANES);
        -: 1132:				  else
    #####: 1133:				    strcat (s2, MOON_WAXES);
    #####: 1134:				  break;
    #####: 1135:				case RC_MOON_IMAGE_CHAR:
        -: 1136:				  /*
        -: 1137:				     %moon_phase_text_graphics_image special text.
        -: 1138:				     Calculate the Moon phase.
        -: 1139:				   */
    #####: 1140:				  draw_moon (moondisk
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -: 1141:					     (&moon_min_max, dd, mm, yy,
        -: 1142:					      time_hour_offset,
        -: 1143:					      time_min_offset),
    #####: 1144:					     ((fwidth >= MOONIMAGE_MIN)
    #####: 1145:					      && (fwidth <=
branch  0 never executed
branch  1 never executed
        -: 1146:						  MOONIMAGE_MAX)) ? fwidth :
        -: 1147:					     rc_moonimage_lines, &s2);
        -: 1148:				  /*
        -: 1149:				     Exchange all RC_NL_CHAR=='~' by RC_NL2_CHAR=='^'
        -: 1150:				     in `s2' in case the Moon text graphics special
        -: 1151:				     text is lead by a RC_NL2_CHAR.
        -: 1152:				   */
    #####: 1153:				  if (k)
branch  0 never executed
branch  1 never executed
    #####: 1154:				    if (s1[k - 1] == RC_NL2_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1155:				      for (i = 0; s2[i]; i++)
branch  0 never executed
branch  1 never executed
    #####: 1156:					if (s2[i] == RC_NL_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1157:					  s2[i] = RC_NL2_CHAR;
    #####: 1158:				  break;
    #####: 1159:				case RC_BIO_CHAR:
        -: 1160:				  /*
        -: 1161:				     %biorhythm special text.
        -: 1162:				   */
    #####: 1163:				  if (!y)
branch  0 never executed
branch  1 never executed
    #####: 1164:				    y = year + incr_year - decr_year;
    #####: 1165:				  (void) biorhythm (FALSE, rc_bio_axis_len,
call    0 never executed
        -: 1166:						    s2, d, m, y, dd, mm, yy,
        -: 1167:						    rc_bio_emo_lit,
        -: 1168:						    &bio_emo_phase,
        -: 1169:						    &bio_emo_waxes,
        -: 1170:						    rc_bio_int_lit,
        -: 1171:						    &bio_int_phase,
        -: 1172:						    &bio_int_waxes,
        -: 1173:						    rc_bio_phy_lit,
        -: 1174:						    &bio_phy_phase,
        -: 1175:						    &bio_phy_waxes,
        -: 1176:						    &bio_critical_day,
        -: 1177:						    &bio_positive_day,
        -: 1178:						    &bio_negative_day);
        -: 1179:				  /*
        -: 1180:				     Convert the "emotional" phase value to a string of template `+NNN%+',
        -: 1181:				     where `+' indicates a sign and `N' indicates a digit (use '0' if none).
        -: 1182:				   */
    #####: 1183:				  sprintf (bio_emo_ptext, "%4d%%%c",
branch  0 never executed
branch  1 never executed
        -: 1184:					   abs (bio_emo_phase),
    #####: 1185:					   (abs (bio_emo_phase) ==
    #####: 1186:					    100) ? *BIO_STABLE
    #####: 1187:					   : ((bio_emo_waxes) ? *BIO_WAXES :
branch  0 never executed
branch  1 never executed
    #####: 1188:					      *BIO_WANES));
    #####: 1189:				  ptr_char = bio_emo_ptext + 1;
    #####: 1190:				  while (isspace (*ptr_char))
branch  0 never executed
branch  1 never executed
    #####: 1191:				    *ptr_char++ = '0';
    #####: 1192:				  if (bio_emo_phase < 0)
branch  0 never executed
branch  1 never executed
    #####: 1193:				    *bio_emo_ptext = *BIO_WANES;
        -: 1194:				  else
    #####: 1195:				    *bio_emo_ptext = *BIO_WAXES;
        -: 1196:				  /*
        -: 1197:				     Convert the "intellectual" phase value to a string of template `+NNN%+',
        -: 1198:				     where `+' indicates a sign and `N' indicates a digit (use '0' if none).
        -: 1199:				   */
    #####: 1200:				  sprintf (bio_int_ptext, "%4d%%%c",
branch  0 never executed
branch  1 never executed
        -: 1201:					   abs (bio_int_phase),
    #####: 1202:					   (abs (bio_int_phase) ==
    #####: 1203:					    100) ? *BIO_STABLE
    #####: 1204:					   : ((bio_int_waxes) ? *BIO_WAXES :
branch  0 never executed
branch  1 never executed
    #####: 1205:					      *BIO_WANES));
    #####: 1206:				  ptr_char = bio_int_ptext + 1;
    #####: 1207:				  while (isspace (*ptr_char))
branch  0 never executed
branch  1 never executed
    #####: 1208:				    *ptr_char++ = '0';
    #####: 1209:				  if (bio_int_phase < 0)
branch  0 never executed
branch  1 never executed
    #####: 1210:				    *bio_int_ptext = *BIO_WANES;
        -: 1211:				  else
    #####: 1212:				    *bio_int_ptext = *BIO_WAXES;
        -: 1213:				  /*
        -: 1214:				     Convert the "physical" phase value to a string of template `+NNN%+',
        -: 1215:				     where `+' indicates a sign and `N' indicates a digit (use '0' if none).
        -: 1216:				   */
    #####: 1217:				  sprintf (bio_phy_ptext, "%4d%%%c",
branch  0 never executed
branch  1 never executed
        -: 1218:					   abs (bio_phy_phase),
    #####: 1219:					   (abs (bio_phy_phase) ==
    #####: 1220:					    100) ? *BIO_STABLE
    #####: 1221:					   : ((bio_phy_waxes) ? *BIO_WAXES :
branch  0 never executed
branch  1 never executed
    #####: 1222:					      *BIO_WANES));
    #####: 1223:				  ptr_char = bio_phy_ptext + 1;
    #####: 1224:				  while (isspace (*ptr_char))
branch  0 never executed
branch  1 never executed
    #####: 1225:				    *ptr_char++ = '0';
    #####: 1226:				  if (bio_phy_phase < 0)
branch  0 never executed
branch  1 never executed
    #####: 1227:				    *bio_phy_ptext = *BIO_WANES;
        -: 1228:				  else
    #####: 1229:				    *bio_phy_ptext = *BIO_WAXES;
        -: 1230:				  /*
        -: 1231:				     Create the resulting biorhythm values line.
        -: 1232:				   */
    #####: 1233:				  sprintf (s2,
        -: 1234:					   "%d%c %d%c %d%c , %s=%s %s=%s %s=%s",
    #####: 1235:					   bio_critical_day, *BIO_CRITICAL,
    #####: 1236:					   bio_positive_day, *BIO_WAXES,
    #####: 1237:					   bio_negative_day, *BIO_WANES,
        -: 1238:					   rc_bio_emo_lit, bio_emo_ptext,
        -: 1239:					   rc_bio_int_lit, bio_int_ptext,
        -: 1240:					   rc_bio_phy_lit, bio_phy_ptext);
    #####: 1241:				  break;
    #####: 1242:				case RC_BIO_BAR_CHAR:
        -: 1243:				  /*
        -: 1244:				     %biorhythm_text_graphics_bar special text.
        -: 1245:				   */
    #####: 1246:				  if (fwidth >= BIO_AXIS_MIN
branch  0 never executed
branch  1 never executed
    #####: 1247:				      || fwidth <= BIO_AXIS_MAX)
branch  0 never executed
branch  1 never executed
        -: 1248:				    /*
        -: 1249:				       Decrease `fwidth' by 1 until it
        -: 1250:				       divides BIO_AXIS_MAX without a remainder.
        -: 1251:				     */
    #####: 1252:				    while (BIO_AXIS_MAX % fwidth)
branch  0 never executed
branch  1 never executed
    #####: 1253:				      fwidth--;
    #####: 1254:				  if (!y)
branch  0 never executed
branch  1 never executed
    #####: 1255:				    y = year + incr_year - decr_year;
    #####: 1256:				  s2 =
    #####: 1257:				    biorhythm (TRUE,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1258:					       (fwidth !=
        -: 1259:						SPECIAL_VALUE) ? fwidth :
        -: 1260:					       rc_bio_axis_len, s2, d, m, y,
        -: 1261:					       dd, mm, yy, rc_bio_emo_lit,
        -: 1262:					       &bio_emo_phase, &bio_emo_waxes,
        -: 1263:					       rc_bio_int_lit, &bio_int_phase,
        -: 1264:					       &bio_int_waxes, rc_bio_phy_lit,
        -: 1265:					       &bio_phy_phase, &bio_phy_waxes,
        -: 1266:					       &bio_critical_day,
        -: 1267:					       &bio_positive_day,
        -: 1268:					       &bio_negative_day);
    #####: 1269:				  break;
    #####: 1270:				default:
        -: 1271:				  /*
        -: 1272:				     This case MUST be an internal error!
        -: 1273:				   */
    #####: 1274:				  abort ();
call    0 never executed
        -: 1275:				}
        -: 1276:			      /*
        -: 1277:			         And copy the expanded special text into the target string.
        -: 1278:			       */
    #####: 1279:			      i = 0;
        -: 1280:			      /*
        -: 1281:			         A Moon text graphics special text leads the text part of
        -: 1282:			         a resource file line so it is good now to remove its
        -: 1283:			         leading newline character, which is represented by
        -: 1284:			         a RC_NL_CHAR=='~' in `s2[0]', to avoid a redundant
        -: 1285:			         line break-up, but only in this definite case and in
        -: 1286:			         the case, all RC_NL_CHAR's of the Moon text graphics
        -: 1287:			         string are already exchanged by RC_NL2_CHAR's=='^'!
        -: 1288:			       */
    #####: 1289:			      if ((!k
branch  0 never executed
branch  1 never executed
    #####: 1290:				   && (*s2 == RC_NL_CHAR))
branch  0 never executed
branch  1 never executed
    #####: 1291:				  || (*s2 == RC_NL2_CHAR))
branch  0 never executed
branch  1 never executed
    #####: 1292:				i++;
    #####: 1293:			      while (s2[i])
branch  0 never executed
branch  1 never executed
        -: 1294:				{
    #####: 1295:				  if ((Uint) k >= maxlen_max - (Uint) len_fn)
branch  0 never executed
branch  1 never executed
    #####: 1296:				    resize_all_strings (maxlen_max << 1,
call    0 never executed
        -: 1297:							FALSE, __FILE__,
        -: 1298:							(long) __LINE__);
    #####: 1299:				  s1[k++] = s6[kk++] = s2[i++];
        -: 1300:				}
        -: 1301:			    }
    #####: 1302:			  if (!*(the_text + j))
branch  0 never executed
branch  1 never executed
    #####: 1303:			    ok = TRUE;
        -: 1304:			}
    #####: 1305:		      is_obsolete_whitespace = TRUE;
        -: 1306:		    }
        -: 1307:		}
        -: 1308:	      else
        -: 1309:		{
    #####: 1310:		  if (special_text_char == RC_TIME_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1311:		      || special_text_char == RC_TIME_TMI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1312:		      || special_text_char == RC_TIME_HR_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1313:		      || special_text_char == RC_TIME_MI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1314:		      || special_text_char == RC_TIME_AMPM_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1315:		      || special_text_char == RC_GMTIME_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1316:		      || special_text_char == RC_GMTIME_TMI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1317:		      || special_text_char == RC_GMTIME_HR_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1318:		      || special_text_char == RC_GMTIME_MI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1319:		      || special_text_char == RC_GMTIME_AMPM_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1320:		      || special_text_char == RC_LT_ZONE_OFFS_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1321:		      || special_text_char == RC_UT_ZONE_OFFS_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1322:		      || special_text_char == RC_DISTANCE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1323:		      || special_text_char == RC_SUN_RISE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1324:		      || special_text_char == RC_SUN_SET_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1325:		      || special_text_char == RC_SUN_DAY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1326:		      || special_text_char == RC_SUN_NIGHT_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1327:		      || special_text_char == RC_MOON_RISE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1328:		      || special_text_char == RC_MOON_SET_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1329:		      || special_text_char == RC_MOON_DAY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1330:		      || special_text_char == RC_MOON_NIGHT_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1331:		      || special_text_char == RC_ENV_VAR_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1332:		      || special_text_char == RC_JDAYS_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1333:		      || special_text_char == RC_DAY_DIFF_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1334:		      || special_text_char == RC_WEEK_DIFF_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1335:		      || special_text_char == RC_MONTH_DIFF_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1336:		      || special_text_char == RC_YEAR_DIFF_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1337:		      || special_text_char == RC_HLS1S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1338:		      || special_text_char == RC_HLS1E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1339:		      || special_text_char == RC_HLS2S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1340:		      || special_text_char == RC_HLS2E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1341:		      || special_text_char == RC_HLS3S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1342:		      || special_text_char == RC_HLS3E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1343:		      || special_text_char == RC_HLS4S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1344:		      || special_text_char == RC_HLS4E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1345:		      || special_text_char == RC_HLS5S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1346:		      || special_text_char == RC_HLS5E_CHAR)
branch  0 never executed
branch  1 never executed
        -: 1347:		    {
    #####: 1348:		      if (special_text_char == RC_TIME_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1349:			  || special_text_char == RC_TIME_TMI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1350:			  || special_text_char == RC_TIME_HR_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1351:			  || special_text_char == RC_TIME_MI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1352:			  || special_text_char == RC_TIME_AMPM_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1353:			  || special_text_char == RC_GMTIME_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1354:			  || special_text_char == RC_GMTIME_TMI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1355:			  || special_text_char == RC_GMTIME_HR_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1356:			  || special_text_char == RC_GMTIME_MI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1357:			  || special_text_char == RC_GMTIME_AMPM_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1358:			  || special_text_char == RC_LT_ZONE_OFFS_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1359:			  || special_text_char == RC_UT_ZONE_OFFS_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1360:			{
    #####: 1361:			  register int sign = 0;
    #####: 1362:			  register int state = 1;
    #####: 1363:			  register int digits = 0;
    #####: 1364:			  auto Bool skip = FALSE;
    #####: 1365:			  auto Bool is_last = FALSE;
    #####: 1366:			  auto Bool is_error = FALSE;
    #####: 1367:			  auto Bool is_2error = FALSE;
    #####: 1368:			  auto Bool time_sep_found = FALSE;
    #####: 1369:			  auto Bool is_leading_zero = TRUE;
    #####: 1370:			  auto Bool is_format_modifier_given = FALSE;
    #####: 1371:			  auto Bool is_tzo =
    #####: 1372:			    (Bool) (special_text_char == RC_LT_ZONE_OFFS_CHAR
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1373:				    || special_text_char ==
        -: 1374:				    RC_UT_ZONE_OFFS_CHAR);
    #####: 1375:			  auto Bool is_gmt =
    #####: 1376:			    (Bool) (special_text_char == RC_GMTIME_CHAR
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1377:				    || special_text_char == RC_GMTIME_HR_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1378:				    || special_text_char == RC_GMTIME_MI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1379:				    || special_text_char == RC_GMTIME_TMI_CHAR
branch  0 never executed
branch  1 never executed
        -: 1380:				    || special_text_char ==
        -: 1381:				    RC_GMTIME_AMPM_CHAR);
        -: 1382:
        -: 1383:
        -: 1384:			  /*
        -: 1385:			     If %time[*][[+|-]MMMM|HH:[MM]] special text is found:
        -: 1386:			     replace it by the current system time HH:MM, if
        -: 1387:			     `*' is specified, replace it by the current system
        -: 1388:			     time hour converted to the am|pm notation and provide
        -: 1389:			     it by a trailing am|pm suffix.
        -: 1390:			     If %time_total_minutes[[+|-]MMMM|HH:[MM]] special text is found:
        -: 1391:			     replace it by the total system time minutes MMMM.
        -: 1392:			     If %time_hour[*][[+|-]MMMM|HH:[MM]] special text is found:
        -: 1393:			     replace it by the current system time hour HH, if
        -: 1394:			     `*' is specified, replace it by the current system
        -: 1395:			     time hour converted to the am|pm notation.
        -: 1396:			     If %time_minute[[+|-]MMMM|HH:[MM]] special text is found:
        -: 1397:			     replace it by the current system time minute MM.
        -: 1398:			     If %time_am_pm_suffix special text is found:
        -: 1399:			     replace it by the current system time `am|pm' suffix.
        -: 1400:			     If %gmtime[*][[+|-]MMMM|HH:[MM]] special text is found:
        -: 1401:			     replace it by the current Greenwich Mean Time and date
        -: 1402:			     HH:MM/TEXTUAL_DATE, if `*' is specified, replace it by
        -: 1403:			     the current GMT hour converted to the am|pm notation
        -: 1404:			     and provide it by a trailing am|pm suffix.
        -: 1405:			     If %gmtime_total_minutes[[+|-]MMMM|HH:[MM]] special text is found:
        -: 1406:			     replace it by the total Greenwich Mean Time minutes
        -: 1407:			     and date MMMM/TEXTUAL_DATE.
        -: 1408:			     If %gmtime_hour[*][[+|-]MMMM|HH:[MM]] special text is found:
        -: 1409:			     replace it by the current Greenwich Mean Time hour HH,
        -: 1410:			     if `*' is specified, replace it by the current GMT
        -: 1411:			     hour converted to the am|pm notation.
        -: 1412:			     If %gmtime_minute[[+|-]MMMM|HH:[MM]] special text is found:
        -: 1413:			     replace it by the current GMT minute MM.
        -: 1414:			     If %gmtime_am_pm_suffix special text is found:
        -: 1415:			     replace it by the current Greenwich Mean Time `am|pm'
        -: 1416:			     suffix.
        -: 1417:			     If %timezone_offset[[+|-]MMMM|HH:[MM]] special text is found:
        -: 1418:			     replace it by the timezone offset +|-HHMM.
        -: 1419:			     All above mentioned special texts respect a possibly
        -: 1420:			     given displacement value [[+|-]MMMM|HH:[MM]].
        -: 1421:			     If [+|-]MMMM is given, skip all possibly leading
        -: 1422:			     zeroes of MMMM.  The HH:[MM] time separating character
        -: 1423:			     ':' is choosen by the used locale at runtime.  If no
        -: 1424:			     am|pm notation is allowed but a `*' character is
        -: 1425:			     leading an above mentioned displacement value,
        -: 1426:			     ignore that statement so it has no further effect.
        -: 1427:			   */
    #####: 1428:			  i = 0;
    #####: 1429:			  j++;
    #####: 1430:			  if (*(the_text + j) == RC_12_HOURS_FORMAT_CHAR)
branch  0 never executed
branch  1 never executed
        -: 1431:			    {
    #####: 1432:			      j++;
    #####: 1433:			      switch (special_text_char)
branch  0 never executed
branch  1 never executed
        -: 1434:				{
    #####: 1435:				case RC_TIME_CHAR:
        -: 1436:				case RC_GMTIME_CHAR:
        -: 1437:				case RC_TIME_HR_CHAR:
        -: 1438:				case RC_GMTIME_HR_CHAR:
    #####: 1439:				  is_format_modifier_given = TRUE;
    #####: 1440:				  break;
    #####: 1441:				default:
        -: 1442:				  ;	/* Void, nothing to do! */
        -: 1443:				}
        -: 1444:			    }
    #####: 1445:			  while (*(the_text + j)
branch  0 never executed
branch  1 never executed
    #####: 1446:				 && !isspace (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 1447:			    {
    #####: 1448:			      skip = FALSE;
        -: 1449:			      /*
        -: 1450:			         Scan the remaining argument of the %[gm]time* special text.
        -: 1451:			       */
    #####: 1452:			      switch (state)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 1453:				{
    #####: 1454:				case 1:
    #####: 1455:				  if (!isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 1456:				    {
    #####: 1457:				      if (*(the_text + j) == *ASC_LIT
branch  0 never executed
branch  1 never executed
    #####: 1458:					  || *(the_text + j) == *DES_LIT)
branch  0 never executed
branch  1 never executed
        -: 1459:					{
    #####: 1460:					  if (sign || time_sep_found)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1461:					    state = 0;
        -: 1462:					  else
    #####: 1463:					    sign++;
    #####: 1464:					  break;
        -: 1465:					}
        -: 1466:				      else
    #####: 1467:					state++;
        -: 1468:				    }
        -: 1469:				  else
        -: 1470:				    {
    #####: 1471:				      if (*(the_text + j) == '0')
branch  0 never executed
branch  1 never executed
        -: 1472:					{
    #####: 1473:					  if (is_leading_zero)
branch  0 never executed
branch  1 never executed
        -: 1474:					    {
    #####: 1475:					      skip = TRUE;
    #####: 1476:					      break;
        -: 1477:					    }
    #####: 1478:					  digits++;
        -: 1479:					}
        -: 1480:				      else
    #####: 1481:					digits++;
    #####: 1482:				      is_leading_zero = FALSE;
    #####: 1483:				      break;
        -: 1484:				    }
        -: 1485:				  /* Fallthrough. */
        -: 1486:				case 2:
    #####: 1487:				  if (!digits && !is_leading_zero)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1488:				    state = 0;
    #####: 1489:				  else if (!time_sep_found)
branch  0 never executed
branch  1 never executed
        -: 1490:				    {
    #####: 1491:				      if (*(the_text + j) == *time_sep
branch  0 never executed
branch  1 never executed
    #####: 1492:					  || *(the_text + j) ==
branch  0 never executed
branch  1 never executed
    #####: 1493:					  *DEFAULT_TIME_SEP)
        -: 1494:					{
    #####: 1495:					  if (digits > 2)
branch  0 never executed
branch  1 never executed
    #####: 1496:					    state = 0;
        -: 1497:					  else
        -: 1498:					    {
    #####: 1499:					      time_sep_found = TRUE;
    #####: 1500:					      digits = 0;
    #####: 1501:					      state--;
        -: 1502:					    }
        -: 1503:					}
        -: 1504:				      else
    #####: 1505:					state = 0;
        -: 1506:				    }
        -: 1507:				  else
        -: 1508:				    {
    #####: 1509:				      if (digits > 4)
branch  0 never executed
branch  1 never executed
    #####: 1510:					state = 0;
        -: 1511:				      else
    #####: 1512:					is_last = TRUE;
        -: 1513:				    }
    #####: 1514:				  break;
    #####: 1515:				default:
    #####: 1516:				  state = 0;
        -: 1517:				}
    #####: 1518:			      if (state && !skip)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1519:				s2[i++] = *(the_text + j);
    #####: 1520:			      j++;
        -: 1521:			    }
    #####: 1522:			  if (!state
branch  0 never executed
branch  1 never executed
    #####: 1523:			      || is_last
branch  0 never executed
branch  1 never executed
    #####: 1524:			      || (i
branch  0 never executed
branch  1 never executed
    #####: 1525:				  && !time_sep_found
branch  0 never executed
branch  1 never executed
    #####: 1526:				  && !is_leading_zero
branch  0 never executed
branch  1 never executed
    #####: 1527:				  && !digits)
branch  0 never executed
branch  1 never executed
    #####: 1528:			      || (time_sep_found
branch  0 never executed
branch  1 never executed
    #####: 1529:				  && (digits > 2))
branch  0 never executed
branch  1 never executed
    #####: 1530:			      || ((state == 1) && (digits > 4)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1531:			    /*
        -: 1532:			       Error, invalid condition occurred.
        -: 1533:			     */
    #####: 1534:			    is_error = TRUE;
    #####: 1535:			  j--;
    #####: 1536:			  if (i && !is_error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1537:			    {
    #####: 1538:			      s2[i] = '\0';
        -: 1539:			      /*
        -: 1540:			         Process the time displacement value.
        -: 1541:			       */
    #####: 1542:			      i = atoi (s2);
    #####: 1543:			      if (time_sep_found)
branch  0 never executed
branch  1 never executed
        -: 1544:				{
    #####: 1545:				  i *= MINS_PER_HOUR;
    #####: 1546:				  ptr_char = strchr (s2, *time_sep);
    #####: 1547:				  if (ptr_char == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 1548:				    ptr_char = strchr (s2, *DEFAULT_TIME_SEP);
    #####: 1549:				  if (*++ptr_char)
branch  0 never executed
branch  1 never executed
        -: 1550:				    {
    #####: 1551:				      state = atoi (ptr_char);
    #####: 1552:				      if (abs (state) >= MINS_PER_HOUR)
branch  0 never executed
branch  1 never executed
    #####: 1553:					is_error = TRUE;
    #####: 1554:				      else if (!i)
branch  0 never executed
branch  1 never executed
        -: 1555:					{
    #####: 1556:					  if (*s2 == *DES_LIT)
branch  0 never executed
branch  1 never executed
    #####: 1557:					    i = -state;
        -: 1558:					  else
    #####: 1559:					    i = state;
        -: 1560:					}
    #####: 1561:				      else if (SGN (i) < 0)
branch  0 never executed
branch  1 never executed
    #####: 1562:					i -= state;
        -: 1563:				      else
    #####: 1564:					i += state;
        -: 1565:				    }
        -: 1566:				}
        -: 1567:			    }
    #####: 1568:			  if (!is_error)
branch  0 never executed
branch  1 never executed
        -: 1569:			    {
    #####: 1570:			      register int the_time = 0;
        -: 1571:			      auto int gmt_day;
        -: 1572:			      auto int gmt_month;
        -: 1573:			      auto int gmt_year;
    #####: 1574:			      auto char *time_suffix = "";
    #####: 1575:			      auto Bool is_am_pm =
    #####: 1576:				(Bool) (special_text_char == RC_TIME_AMPM_CHAR
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1577:					|| special_text_char ==
        -: 1578:					RC_GMTIME_AMPM_CHAR);
        -: 1579:
        -: 1580:
    #####: 1581:			      if (is_tzo)
branch  0 never executed
branch  1 never executed
        -: 1582:				{
    #####: 1583:				  if (special_text_char ==
branch  0 never executed
branch  1 never executed
        -: 1584:				      RC_LT_ZONE_OFFS_CHAR)
        -: 1585:				    {
    #####: 1586:				      if (gmt_loc_diff > 0)
branch  0 never executed
branch  1 never executed
    #####: 1587:					the_time =
    #####: 1588:					  (MINS_PER_DAY -
    #####: 1589:					   HHMM2MM (act_hour,
        -: 1590:						    act_min)) +
    #####: 1591:					  HHMM2MM (gmt_hour, gmt_min);
    #####: 1592:				      else if (gmt_loc_diff < 0)
branch  0 never executed
branch  1 never executed
    #####: 1593:					the_time =
    #####: 1594:					  (MINS_PER_DAY -
    #####: 1595:					   HHMM2MM (gmt_hour,
        -: 1596:						    gmt_min)) +
    #####: 1597:					  HHMM2MM (act_hour, act_min);
        -: 1598:				      else
    #####: 1599:					the_time =
    #####: 1600:					  HHMM2MM (act_hour,
        -: 1601:						   act_min) -
    #####: 1602:					  HHMM2MM (gmt_hour, gmt_min);
        -: 1603:				    }
    #####: 1604:				  sign = 1;
    #####: 1605:				  the_time += i;
    #####: 1606:				  if (the_time < 0)
branch  0 never executed
branch  1 never executed
        -: 1607:				    {
    #####: 1608:				      sign = -sign;
    #####: 1609:				      the_time = -the_time;
        -: 1610:				    }
    #####: 1611:				  i = the_time % MINS_PER_HOUR;
    #####: 1612:				  the_time /= MINS_PER_HOUR;
        -: 1613:				}
    #####: 1614:			      else if (!is_gmt)
branch  0 never executed
branch  1 never executed
    #####: 1615:				the_time = HHMM2MM (act_hour, act_min) + i;
        -: 1616:			      else
        -: 1617:				{
    #####: 1618:				  the_time = HHMM2MM (gmt_hour, gmt_min) + i;
        -: 1619:				  /*
        -: 1620:				     Adjust the GMT date in case it is not
        -: 1621:				     the today's local date.
        -: 1622:				   */
    #####: 1623:				  if (d_between
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1624:				      (d, m, year + incr_year - decr_year,
        -: 1625:				       buf_gd, buf_gm, buf_gy))
        -: 1626:				    {
    #####: 1627:				      gmt_day = d;
    #####: 1628:				      gmt_month = m;
    #####: 1629:				      gmt_year = year + incr_year - decr_year;
    #####: 1630:				      if (gmt_loc_diff > 0)
branch  0 never executed
branch  1 never executed
        -: 1631:					{
    #####: 1632:					  (void) next_date (&gmt_day,
call    0 never executed
        -: 1633:							    &gmt_month,
        -: 1634:							    &gmt_year);
    #####: 1635:					  if (gmt_year > YEAR_MAX)
branch  0 never executed
branch  1 never executed
    #####: 1636:					    is_2error = TRUE;
        -: 1637:					}
    #####: 1638:				      else if (gmt_loc_diff < 0)
branch  0 never executed
branch  1 never executed
        -: 1639:					{
    #####: 1640:					  (void) prev_date (&gmt_day,
call    0 never executed
        -: 1641:							    &gmt_month,
        -: 1642:							    &gmt_year);
    #####: 1643:					  if (gmt_year < YEAR_MIN)
branch  0 never executed
branch  1 never executed
    #####: 1644:					    is_2error = TRUE;
        -: 1645:					}
        -: 1646:				    }
        -: 1647:				  else
        -: 1648:				    {
    #####: 1649:				      gmt_day = buf_gd;
    #####: 1650:				      gmt_month = buf_gm;
    #####: 1651:				      gmt_year = buf_gy;
        -: 1652:				    }
        -: 1653:				}
    #####: 1654:			      if (!is_error && !is_2error && !is_tzo)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1655:				{
    #####: 1656:				  i = the_time % MINS_PER_HOUR;
    #####: 1657:				  the_time /= MINS_PER_HOUR;
    #####: 1658:				  if (the_time >= HOURS_PER_DAY)
branch  0 never executed
branch  1 never executed
    #####: 1659:				    while (the_time >= HOURS_PER_DAY)
branch  0 never executed
branch  1 never executed
        -: 1660:				      {
    #####: 1661:					the_time -= HOURS_PER_DAY;
    #####: 1662:					if (is_gmt)
branch  0 never executed
branch  1 never executed
        -: 1663:					  {
    #####: 1664:					    (void) next_date (&gmt_day,
call    0 never executed
        -: 1665:							      &gmt_month,
        -: 1666:							      &gmt_year);
    #####: 1667:					    if (gmt_year > YEAR_MAX)
branch  0 never executed
branch  1 never executed
    #####: 1668:					      is_2error = TRUE;
        -: 1669:					  }
        -: 1670:				      }
    #####: 1671:				  else if (i < 0 || the_time < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1672:				    {
    #####: 1673:				      if (the_time <= 0)
branch  0 never executed
branch  1 never executed
    #####: 1674:					the_time--;
    #####: 1675:				      while (the_time < 0)
branch  0 never executed
branch  1 never executed
        -: 1676:					{
    #####: 1677:					  the_time += HOURS_PER_DAY;
    #####: 1678:					  if (is_gmt)
branch  0 never executed
branch  1 never executed
        -: 1679:					    {
    #####: 1680:					      (void) prev_date (&gmt_day,
call    0 never executed
        -: 1681:								&gmt_month,
        -: 1682:								&gmt_year);
    #####: 1683:					      if (gmt_year < YEAR_MIN)
branch  0 never executed
branch  1 never executed
    #####: 1684:						is_2error = TRUE;
        -: 1685:					    }
        -: 1686:					}
    #####: 1687:				      if (i)
branch  0 never executed
branch  1 never executed
    #####: 1688:					i = MINS_PER_HOUR + i;
        -: 1689:				      else
    #####: 1690:					the_time++;
        -: 1691:				    }
        -: 1692:				}
    #####: 1693:			      if (!is_error && !is_2error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1694:				{
    #####: 1695:				  if (is_am_pm || is_format_modifier_given)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1696:				    {
        -: 1697:				      /*
        -: 1698:				         Copy a trailing "am" resp., "pm" suffix
        -: 1699:				         to the text.
        -: 1700:				       */
    #####: 1701:				      if (the_time >= HOURS_PER_HALF_DAY)
branch  0 never executed
branch  1 never executed
        -: 1702:					{
        -: 1703:					  /*
        -: 1704:					   *** Translators, please translate this as a fixed 2-character text.
        -: 1705:					   *** This text should be a proper abbreviation of "post meridiem".
        -: 1706:					   */
    #####: 1707:					  time_suffix = _("pm");
    #####: 1708:					  if (!is_am_pm)
branch  0 never executed
branch  1 never executed
    #####: 1709:					    the_time -= HOURS_PER_HALF_DAY;
        -: 1710:					}
        -: 1711:				      else
        -: 1712:					/*
        -: 1713:					 *** Translators, please translate this as a fixed 2-character text.
        -: 1714:					 *** This text should be a proper abbreviation of "ante meridiem".
        -: 1715:					 */
    #####: 1716:					time_suffix = _("am");
        -: 1717:				    }
    #####: 1718:				  if (transform_year)
branch  0 never executed
branch  1 never executed
        -: 1719:				    {
    #####: 1720:				      gmt_year = gmt_year - transform_year;
    #####: 1721:				      if ((gmt_year >= 0)
branch  0 never executed
branch  1 never executed
    #####: 1722:					  && (transform_year > 0))
branch  0 never executed
branch  1 never executed
    #####: 1723:					gmt_year++;
        -: 1724:				    }
    #####: 1725:				  *s2 = '\0';
    #####: 1726:				  switch (special_text_char)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
        -: 1727:				    {
    #####: 1728:				    case RC_TIME_CHAR:
        -: 1729:				      /*
        -: 1730:				         %time special text.
        -: 1731:				       */
    #####: 1732:				      sprintf (buffer, "%02d%s%02d%s",
        -: 1733:					       the_time, time_sep, i,
        -: 1734:					       time_suffix);
    #####: 1735:				      break;
    #####: 1736:				    case RC_GMTIME_CHAR:
        -: 1737:				      /*
        -: 1738:				         %gmtime special text.
        -: 1739:				       */
    #####: 1740:				      sprintf (buffer,
call    0 never executed
        -: 1741:					       "%02d%s%02d%s/%02d-%s-%0*d",
        -: 1742:					       the_time, time_sep, i,
        -: 1743:					       time_suffix, gmt_day,
        -: 1744:					       short_month_name (gmt_month),
        -: 1745:					       len_year_max, gmt_year);
    #####: 1746:				      break;
    #####: 1747:				    case RC_TIME_TMI_CHAR:
        -: 1748:				      /*
        -: 1749:				         %time_total_minutes special text.
        -: 1750:				       */
    #####: 1751:				      (void) use_format (&s2, 0, "",
call    0 never executed
    #####: 1752:							 the_time *
    #####: 1753:							 MINS_PER_HOUR + i,
        -: 1754:							 TRUE, is_cformat,
        -: 1755:							 is_lformat, is_sign,
        -: 1756:							 is_lzero, is_suffix,
        -: 1757:							 is_fformat, fstyle,
        -: 1758:							 fwidth, 0);
    #####: 1759:				      break;
    #####: 1760:				    case RC_GMTIME_TMI_CHAR:
        -: 1761:				      /*
        -: 1762:				         %gmtime_total_minutes special text.
        -: 1763:				       */
        -: 1764:				      {
    #####: 1765:					sprintf (buffer, "/%02d-%s-%0*d",
call    0 never executed
        -: 1766:						 gmt_day,
        -: 1767:						 short_month_name (gmt_month),
        -: 1768:						 len_year_max, gmt_year);
    #####: 1769:					(void) use_format (&s2, 0, "",
call    0 never executed
    #####: 1770:							   the_time *
    #####: 1771:							   MINS_PER_HOUR + i,
        -: 1772:							   TRUE, is_cformat,
        -: 1773:							   is_lformat,
        -: 1774:							   is_sign, is_lzero,
        -: 1775:							   is_suffix,
        -: 1776:							   is_fformat, fstyle,
        -: 1777:							   fwidth, 0);
    #####: 1778:					strcat (s2, buffer);
        -: 1779:				      }
    #####: 1780:				      break;
    #####: 1781:				    case RC_TIME_HR_CHAR:
        -: 1782:				    case RC_GMTIME_HR_CHAR:
        -: 1783:				      /*
        -: 1784:				         %[gm]time_hour special text.
        -: 1785:				       */
    #####: 1786:				      (void) use_format (&s2, 0, "", the_time,
call    0 never executed
        -: 1787:							 TRUE, is_cformat,
        -: 1788:							 is_lformat, is_sign,
        -: 1789:							 is_lzero, is_suffix,
        -: 1790:							 is_fformat, fstyle,
        -: 1791:							 fwidth, 0);
    #####: 1792:				      break;
    #####: 1793:				    case RC_TIME_MI_CHAR:
        -: 1794:				    case RC_GMTIME_MI_CHAR:
        -: 1795:				      /*
        -: 1796:				         %[gm]time_minute special text.
        -: 1797:				       */
    #####: 1798:				      (void) use_format (&s2, 0, "", i, TRUE,
call    0 never executed
        -: 1799:							 is_cformat,
        -: 1800:							 is_lformat, is_sign,
        -: 1801:							 is_lzero, is_suffix,
        -: 1802:							 is_fformat, fstyle,
        -: 1803:							 fwidth, 0);
    #####: 1804:				      break;
    #####: 1805:				    case RC_TIME_AMPM_CHAR:
        -: 1806:				    case RC_GMTIME_AMPM_CHAR:
        -: 1807:				      /*
        -: 1808:				         %[gm]time_am_pm_suffix special text.
        -: 1809:				       */
    #####: 1810:				      (void) use_format (&s2, 0, time_suffix,
call    0 never executed
        -: 1811:							 0, FALSE, is_cformat,
        -: 1812:							 is_lformat, is_sign,
        -: 1813:							 is_lzero, is_suffix,
        -: 1814:							 is_fformat, fstyle,
        -: 1815:							 fwidth, 0);
    #####: 1816:				      break;
    #####: 1817:				    case RC_LT_ZONE_OFFS_CHAR:
        -: 1818:				    case RC_UT_ZONE_OFFS_CHAR:
        -: 1819:				      /*
        -: 1820:				         %timezone_offset either based on local time
        -: 1821:				         zone or UTC/GMT zone special text.
        -: 1822:				       */
    #####: 1823:				      sprintf (buffer, "%s%02d%02d",
branch  0 never executed
branch  1 never executed
        -: 1824:					       (sign > 0) ? ASC_LIT : DES_LIT,
        -: 1825:					       the_time, i);
    #####: 1826:				      break;
    #####: 1827:				    default:
        -: 1828:				      /*
        -: 1829:				         This case MUST be an internal error!
        -: 1830:				       */
    #####: 1831:				      abort ();
call    0 never executed
        -: 1832:				    }
    #####: 1833:				}
        -: 1834:			    }
    #####: 1835:			  if (!is_error && !is_2error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1836:			    {
    #####: 1837:			      if (!*s2)
branch  0 never executed
branch  1 never executed
    #####: 1838:				(void) use_format (&s2, 0, buffer, 0, FALSE,
call    0 never executed
        -: 1839:						   is_cformat, is_lformat,
        -: 1840:						   is_sign, is_lzero,
        -: 1841:						   is_suffix, is_fformat,
        -: 1842:						   fstyle, fwidth, 0);
        -: 1843:			    }
        -: 1844:			  else
        -: 1845:			    {
    #####: 1846:			      for (i = 0; i < len_year_max; i++)
branch  0 never executed
branch  1 never executed
    #####: 1847:				buffer[i] = *RC_INVALID_PARAM_TEXT;
    #####: 1848:			      buffer[i] = '\0';
    #####: 1849:			      switch (special_text_char)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
        -: 1850:				{
    #####: 1851:				case RC_TIME_CHAR:
    #####: 1852:				  sprintf (s2, "%s%s%s",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1853:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1854:					   : RC_INVALID_VALUE_TEXT, time_sep,
        -: 1855:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1856:					   : RC_INVALID_VALUE_TEXT);
    #####: 1857:				  break;
    #####: 1858:				case RC_GMTIME_CHAR:
    #####: 1859:				  sprintf (s2, "%s%s%s/%s-%s%c-%s",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1860:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1861:					   : RC_INVALID_VALUE_TEXT, time_sep,
        -: 1862:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1863:					   : RC_INVALID_VALUE_TEXT,
        -: 1864:					   RC_INVALID_PARAM_TEXT,
        -: 1865:					   RC_INVALID_PARAM_TEXT,
    #####: 1866:					   *RC_INVALID_PARAM_TEXT, buffer);
    #####: 1867:				  break;
    #####: 1868:				case RC_TIME_TMI_CHAR:
    #####: 1869:				  sprintf (s2, "%s",
branch  0 never executed
branch  1 never executed
        -: 1870:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1871:					   : RC_INVALID_VALUE_TEXT);
    #####: 1872:				  break;
    #####: 1873:				case RC_GMTIME_TMI_CHAR:
    #####: 1874:				  sprintf (s2, "%s/%s-%s%c-%s",
branch  0 never executed
branch  1 never executed
        -: 1875:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1876:					   : RC_INVALID_VALUE_TEXT,
        -: 1877:					   RC_INVALID_PARAM_TEXT,
        -: 1878:					   RC_INVALID_PARAM_TEXT,
    #####: 1879:					   *RC_INVALID_PARAM_TEXT, buffer);
    #####: 1880:				  break;
    #####: 1881:				case RC_TIME_HR_CHAR:
        -: 1882:				case RC_GMTIME_HR_CHAR:
        -: 1883:				case RC_TIME_MI_CHAR:
        -: 1884:				case RC_GMTIME_MI_CHAR:
        -: 1885:				case RC_TIME_AMPM_CHAR:
        -: 1886:				case RC_GMTIME_AMPM_CHAR:
    #####: 1887:				  sprintf (s2, "%s",
branch  0 never executed
branch  1 never executed
        -: 1888:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1889:					   : RC_INVALID_VALUE_TEXT);
    #####: 1890:				  break;
    #####: 1891:				case RC_LT_ZONE_OFFS_CHAR:
        -: 1892:				case RC_UT_ZONE_OFFS_CHAR:
    #####: 1893:				  sprintf (s2, "+%s%s",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1894:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1895:					   : RC_INVALID_VALUE_TEXT,
        -: 1896:					   (is_error) ? RC_INVALID_PARAM_TEXT
        -: 1897:					   : RC_INVALID_VALUE_TEXT);
    #####: 1898:				  break;
    #####: 1899:				default:
        -: 1900:				  /*
        -: 1901:				     This case MUST be an internal error!
        -: 1902:				   */
    #####: 1903:				  abort ();
call    0 never executed
        -: 1904:				}
    #####: 1905:			      strcpy (buffer, s2);
    #####: 1906:			      *s2 = '\0';
    #####: 1907:			      (void) use_format (&s2, 0, buffer, 0, FALSE,
call    0 never executed
        -: 1908:						 is_cformat, is_lformat,
        -: 1909:						 is_sign, is_lzero, is_suffix,
        -: 1910:						 is_fformat, fstyle, fwidth,
        -: 1911:						 0);
        -: 1912:			    }
    #####: 1913:			  is_obsolete_whitespace = TRUE;
        -: 1914:			}
        -: 1915:		      else
    #####: 1916:			if (special_text_char == RC_DISTANCE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1917:			    || special_text_char == RC_SUN_RISE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1918:			    || special_text_char == RC_SUN_SET_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1919:			    || special_text_char == RC_SUN_DAY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1920:			    || special_text_char == RC_SUN_NIGHT_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1921:			    || special_text_char == RC_MOON_RISE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1922:			    || special_text_char == RC_MOON_SET_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1923:			    || special_text_char == RC_MOON_DAY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1924:			    || special_text_char == RC_MOON_NIGHT_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1925:			{
    #####: 1926:			  auto double the_time = 0.0;
        -: 1927:			  auto double the_error;
        -: 1928:			  auto int dots;
        -: 1929:			  auto int sign;
        -: 1930:			  register int split;
        -: 1931:			  register int state;
        -: 1932:			  register int digits;
        -: 1933:			  register int decimals;
        -: 1934:			  register int num_coord;
    #####: 1935:			  register int parsed_coordinates =
    #####: 1936:			    (special_text_char == RC_DISTANCE_CHAR) ? 2 : 1;
branch  0 never executed
branch  1 never executed
    #####: 1937:			  register int dist_mode = 0;
    #####: 1938:			  register int aobj_mode = 5;
    #####: 1939:			  register int astronomical_object = AOBJ_NONE;
        -: 1940:			  auto char *sep;
    #####: 1941:			  auto char *time_suffix = "";
        -: 1942:			  auto Bool skip;
        -: 1943:			  auto Bool is_last;
        -: 1944:			  auto Bool is_error;
        -: 1945:			  auto Bool is_decimal;
        -: 1946:			  auto Bool got_lat_min;
        -: 1947:			  auto Bool got_lon_min;
        -: 1948:			  auto Bool time_sep_found;
        -: 1949:			  auto Bool is_leading_zero;
    #####: 1950:			  auto Bool is_format_modifier_given = FALSE;
    #####: 1951:			  auto Bool is_rise_set =
    #####: 1952:			    (Bool) (special_text_char == RC_SUN_RISE_CHAR
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1953:				    || special_text_char == RC_SUN_SET_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1954:				    || special_text_char == RC_MOON_RISE_CHAR
branch  0 never executed
branch  1 never executed
        -: 1955:				    || special_text_char == RC_MOON_SET_CHAR);
        -: 1956:
        -: 1957:
        -: 1958:			  /*
        -: 1959:			     Decode and evaluate co-ordinate-based special texts.
        -: 1960:			   */
    #####: 1961:			  j++;
    #####: 1962:			  if (special_text_char == RC_DISTANCE_CHAR)
branch  0 never executed
branch  1 never executed
        -: 1963:			    {
    #####: 1964:			      if (*(the_text + j) == RC_SMILES_FORMAT_CHAR)
branch  0 never executed
branch  1 never executed
        -: 1965:				{
    #####: 1966:				  j++;
    #####: 1967:				  is_format_modifier_given = TRUE;
        -: 1968:				}
    #####: 1969:			      if (isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 1970:				{
    #####: 1971:				  dist_mode = CHR2DIG (*(the_text + j));
    #####: 1972:				  if (dist_mode <= 2)
branch  0 never executed
branch  1 never executed
    #####: 1973:				    j++;
        -: 1974:				  else
    #####: 1975:				    dist_mode = 0;
        -: 1976:				}
        -: 1977:			    }
        -: 1978:			  else
        -: 1979:			    {
    #####: 1980:			      if (special_text_char == RC_SUN_RISE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1981:				  || special_text_char == RC_SUN_SET_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1982:				  || special_text_char == RC_SUN_DAY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 1983:				  || special_text_char == RC_SUN_NIGHT_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 1984:				astronomical_object = AOBJ_SUN;
        -: 1985:			      else
    #####: 1986:				astronomical_object = AOBJ_MOON;
    #####: 1987:			      if (*(the_text + j) == RC_12_HOURS_FORMAT_CHAR)
branch  0 never executed
branch  1 never executed
        -: 1988:				{
    #####: 1989:				  j++;
    #####: 1990:				  is_format_modifier_given = TRUE;
        -: 1991:				}
    #####: 1992:			      if (isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 1993:				{
    #####: 1994:				  aobj_mode = CHR2DIG (*(the_text + j));
    #####: 1995:				  j++;
        -: 1996:				}
    #####: 1997:			      else if (islower (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 1998:				{
    #####: 1999:				  aobj_mode = IDX (*(the_text + j)) + 10;
    #####: 2000:				  j++;
        -: 2001:				}
    #####: 2002:			      else if (isupper (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 2003:				{
    #####: 2004:				  aobj_mode = IDX (*(the_text + j)) + 36;
    #####: 2005:				  if (((astronomical_object == AOBJ_SUN)
branch  0 never executed
branch  1 never executed
    #####: 2006:				       && (aobj_mode <= 53))
branch  0 never executed
branch  1 never executed
    #####: 2007:				      || ((astronomical_object == AOBJ_MOON)
branch  0 never executed
branch  1 never executed
    #####: 2008:					  && (aobj_mode <= 60)))
branch  0 never executed
branch  1 never executed
    #####: 2009:				    j++;
        -: 2010:				  else
    #####: 2011:				    aobj_mode = 61;
        -: 2012:				}
        -: 2013:			    }
    #####: 2014:			  if (astronomical_object == AOBJ_NONE)
branch  0 never executed
branch  1 never executed
        -: 2015:			    /*
        -: 2016:			     *** Translators, please translate this as a fixed 2-character text.
        -: 2017:			     *** This text should contain the proper abbreviations for "degrees" and "minutes".
        -: 2018:			     */
    #####: 2019:			    sep = _("d'\"");
        -: 2020:			  else
    #####: 2021:			    if (is_rise_set
branch  0 never executed
branch  1 never executed
    #####: 2022:				&&
branch  0 never executed
branch  1 never executed
    #####: 2023:				(aobj_oformat[aobj_mode][astronomical_object].
        -: 2024:				 error_format == ERR_DDD))
        -: 2025:			    /*
        -: 2026:			     *** Translators, please translate this as a fixed 3-character text.
        -: 2027:			     *** This text should contain the proper abbreviations for "degrees", "minutes" and "seconds".
        -: 2028:			     */
    #####: 2029:			    sep = _("d'\"");
        -: 2030:			  else
    #####: 2031:			    if (!is_rise_set
branch  0 never executed
branch  1 never executed
    #####: 2032:				||
branch  0 never executed
branch  1 never executed
    #####: 2033:				aobj_oformat[aobj_mode][astronomical_object].
        -: 2034:				error_format == ERR_TTT)
        -: 2035:			    /*
        -: 2036:			     *** Translators, please translate this as a fixed 3-character text.
        -: 2037:			     *** This text should contain the proper abbreviations for "hours", "minutes" and "seconds".
        -: 2038:			     */
    #####: 2039:			    sep = _("h'\"");
        -: 2040:			  else
    #####: 2041:			    sep = time_sep;
    #####: 2042:			LABEL_get_second_coordinate:
    #####: 2043:			  the_error = 0.0;
    #####: 2044:			  num_coord = state = 1;
    #####: 2045:			  i = dots = sign = split = digits = decimals = 0;
    #####: 2046:			  is_leading_zero = TRUE;
    #####: 2047:			  is_last = got_lat_min = got_lon_min = FALSE;
    #####: 2048:			  is_error = is_decimal = time_sep_found = FALSE;
    #####: 2049:			  coor1->lon_deg = coor1->lon_min = coor1->lon_sec =
        -: 2050:			    0;
    #####: 2051:			  coor1->lat_deg = coor1->lat_min = coor1->lat_sec =
        -: 2052:			    0;
    #####: 2053:			  if (special_text_char == RC_DISTANCE_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 2054:			    coor1->the_mode = dist_mode;
        -: 2055:			  else
    #####: 2056:			    coor1->the_mode = aobj_mode;
    #####: 2057:			  coor1->meters_above_sea_level =
    #####: 2058:			    coor1->time_zone_in_mins = 0;
    #####: 2059:			  while (((special_text_char != RC_DISTANCE_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 2060:				  && *(the_text + j)
branch  0 never executed
branch  1 never executed
    #####: 2061:				  && !isspace (*(the_text + j)))
branch  0 never executed
branch  1 never executed
    #####: 2062:				 || ((special_text_char == RC_DISTANCE_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 2063:				     && *(the_text + j)
branch  0 never executed
branch  1 never executed
    #####: 2064:				     && !isspace (*(the_text + j))
branch  0 never executed
branch  1 never executed
    #####: 2065:				     && (*(the_text + j) !=
branch  0 never executed
branch  1 never executed
    #####: 2066:					 *RC_COORDINATE_SEP)))
        -: 2067:			    {
    #####: 2068:			      skip = FALSE;
        -: 2069:			      /*
        -: 2070:			         Scan the remaining argument of the %distance*,
        -: 2071:			         %sun* or %moon* special text and arrange its
        -: 2072:			         elements properly separated by SPLIT_SEPs.
        -: 2073:			       */
    #####: 2074:			      switch (state)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2075:				{
    #####: 2076:				case 1:
    #####: 2077:				  if (*(the_text + j) == *ASC_LIT
branch  0 never executed
branch  1 never executed
    #####: 2078:				      || *(the_text + j) == *DES_LIT)
branch  0 never executed
branch  1 never executed
    #####: 2079:				    state++;
        -: 2080:				  else
    #####: 2081:				    state = 0;
    #####: 2082:				  break;
    #####: 2083:				case 2:
    #####: 2084:				  if (!isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
    #####: 2085:				    state++;
        -: 2086:				  else
        -: 2087:				    {
    #####: 2088:				      digits++;
    #####: 2089:				      break;
        -: 2090:				    }
        -: 2091:				  /* Fallthrough. */
        -: 2092:				case 3:
    #####: 2093:				  if (!decimals
branch  0 never executed
branch  1 never executed
    #####: 2094:				      && (((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2095:					   && (digits != 2)
branch  0 never executed
branch  1 never executed
    #####: 2096:					   && (digits != 4)
branch  0 never executed
branch  1 never executed
    #####: 2097:					   && (digits != 6))
branch  0 never executed
branch  1 never executed
    #####: 2098:					  || ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2099:					      && (digits != 3)
branch  0 never executed
branch  1 never executed
    #####: 2100:					      && (digits != 5)
branch  0 never executed
branch  1 never executed
    #####: 2101:					      && (digits != 7))
branch  0 never executed
branch  1 never executed
    #####: 2102:					  || ((num_coord == 3)
branch  0 never executed
branch  1 never executed
    #####: 2103:					      && (digits > 4))))
branch  0 never executed
branch  1 never executed
    #####: 2104:				    state = 0;
    #####: 2105:				  else if (*(the_text + j) == '.')
branch  0 never executed
branch  1 never executed
        -: 2106:				    {
    #####: 2107:				      if (dots)
branch  0 never executed
branch  1 never executed
    #####: 2108:					state = 0;
        -: 2109:				      else
        -: 2110:					{
    #####: 2111:					  if (((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2112:					       && (split <= 2))
branch  0 never executed
branch  1 never executed
    #####: 2113:					      || ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2114:						  && (split - is_decimal <=
branch  0 never executed
branch  1 never executed
        -: 2115:						      5)))
        -: 2116:					    {
    #####: 2117:					      s2[i++] = '0';
    #####: 2118:					      s2[i++] = *SPLIT_SEP;
    #####: 2119:					      if (((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2120:						   && (split == 1))
branch  0 never executed
branch  1 never executed
    #####: 2121:						  || ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2122:						      && (split -
branch  0 never executed
branch  1 never executed
        -: 2123:							  is_decimal == 4)))
        -: 2124:						{
    #####: 2125:						  s2[i++] = '0';
    #####: 2126:						  s2[i++] = *SPLIT_SEP;
    #####: 2127:						  split++;
        -: 2128:						}
    #####: 2129:					      split++;
        -: 2130:					    }
    #####: 2131:					  dots++;
    #####: 2132:					  is_decimal = TRUE;
    #####: 2133:					  decimals = !(digits = 0);
    #####: 2134:					  state--;
        -: 2135:					}
        -: 2136:				    }
        -: 2137:				  else
    #####: 2138:				    if (*(the_text + j) == *ASC_LIT
branch  0 never executed
branch  1 never executed
    #####: 2139:					|| *(the_text + j) == *DES_LIT)
branch  0 never executed
branch  1 never executed
        -: 2140:				    {
    #####: 2141:				      if (decimals && !digits)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2142:					state = 0;
        -: 2143:				      else
        -: 2144:					{
    #####: 2145:					  if (s2[i - 1] != *SPLIT_SEP)
branch  0 never executed
branch  1 never executed
        -: 2146:					    {
    #####: 2147:					      split++;
    #####: 2148:					      s2[i++] = *SPLIT_SEP;
        -: 2149:					    }
    #####: 2150:					  if (((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2151:					       && (split <= 2))
branch  0 never executed
branch  1 never executed
    #####: 2152:					      || ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2153:						  && (split - is_decimal <=
branch  0 never executed
branch  1 never executed
        -: 2154:						      5)))
        -: 2155:					    {
    #####: 2156:					      s2[i++] = '0';
    #####: 2157:					      s2[i++] = *SPLIT_SEP;
    #####: 2158:					      if (((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2159:						   && (split == 1))
branch  0 never executed
branch  1 never executed
    #####: 2160:						  || ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2161:						      && (split -
branch  0 never executed
branch  1 never executed
        -: 2162:							  is_decimal == 4)))
        -: 2163:						{
    #####: 2164:						  s2[i++] = '0';
    #####: 2165:						  s2[i++] = *SPLIT_SEP;
    #####: 2166:						  split++;
        -: 2167:						}
    #####: 2168:					      split++;
        -: 2169:					    }
    #####: 2170:					  decimals = dots = digits = 0;
    #####: 2171:					  num_coord++;
    #####: 2172:					  state--;
        -: 2173:					}
        -: 2174:				    }
        -: 2175:				  else
    #####: 2176:				    if ((num_coord > 1)
branch  0 never executed
branch  1 never executed
    #####: 2177:					&& (*(the_text + j) == *SPLIT_SEP))
branch  0 never executed
branch  1 never executed
        -: 2178:				    {
    #####: 2179:				      if (decimals && !digits)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2180:					state = 0;
        -: 2181:				      else
        -: 2182:					{
    #####: 2183:					  if (split - is_decimal <= 5)
branch  0 never executed
branch  1 never executed
        -: 2184:					    {
    #####: 2185:					      s2[i++] = '0';
    #####: 2186:					      s2[i++] = *SPLIT_SEP;
    #####: 2187:					      if (split - is_decimal == 4)
branch  0 never executed
branch  1 never executed
        -: 2188:						{
    #####: 2189:						  s2[i++] = '0';
    #####: 2190:						  s2[i++] = *SPLIT_SEP;
    #####: 2191:						  split++;
        -: 2192:						}
    #####: 2193:					      split++;
        -: 2194:					    }
    #####: 2195:					  digits = 0;
    #####: 2196:					  state++;
        -: 2197:					}
        -: 2198:				    }
        -: 2199:				  else
    #####: 2200:				    state = 0;
    #####: 2201:				  break;
    #####: 2202:				case 4:
    #####: 2203:				  if (!isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 2204:				    {
    #####: 2205:				      if (*(the_text + j) == *ASC_LIT
branch  0 never executed
branch  1 never executed
    #####: 2206:					  || *(the_text + j) == *DES_LIT)
branch  0 never executed
branch  1 never executed
        -: 2207:					{
    #####: 2208:					  if (sign || time_sep_found)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2209:					    state = 0;
        -: 2210:					  else
    #####: 2211:					    sign++;
    #####: 2212:					  break;
        -: 2213:					}
        -: 2214:				      else
    #####: 2215:					state++;
        -: 2216:				    }
        -: 2217:				  else
        -: 2218:				    {
    #####: 2219:				      if (*(the_text + j) == '0')
branch  0 never executed
branch  1 never executed
        -: 2220:					{
    #####: 2221:					  if (is_leading_zero)
branch  0 never executed
branch  1 never executed
        -: 2222:					    {
    #####: 2223:					      skip = TRUE;
    #####: 2224:					      break;
        -: 2225:					    }
    #####: 2226:					  digits++;
        -: 2227:					}
        -: 2228:				      else
    #####: 2229:					digits++;
    #####: 2230:				      is_leading_zero = FALSE;
    #####: 2231:				      break;
        -: 2232:				    }
        -: 2233:				  /* Fallthrough. */
        -: 2234:				case 5:
    #####: 2235:				  if (!digits && !is_leading_zero)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2236:				    state = 0;
    #####: 2237:				  else if (!time_sep_found)
branch  0 never executed
branch  1 never executed
        -: 2238:				    {
    #####: 2239:				      if (*(the_text + j) == *time_sep
branch  0 never executed
branch  1 never executed
    #####: 2240:					  || *(the_text + j) ==
branch  0 never executed
branch  1 never executed
    #####: 2241:					  *DEFAULT_TIME_SEP)
        -: 2242:					{
    #####: 2243:					  if (digits > 2)
branch  0 never executed
branch  1 never executed
    #####: 2244:					    state = 0;
        -: 2245:					  else
        -: 2246:					    {
    #####: 2247:					      time_sep_found = TRUE;
    #####: 2248:					      digits = 0;
    #####: 2249:					      state--;
        -: 2250:					    }
        -: 2251:					}
        -: 2252:				      else
    #####: 2253:					state = 0;
        -: 2254:				    }
        -: 2255:				  else
        -: 2256:				    {
    #####: 2257:				      if (digits > 4)
branch  0 never executed
branch  1 never executed
    #####: 2258:					state = 0;
        -: 2259:				      else
    #####: 2260:					is_last = TRUE;
        -: 2261:				    }
    #####: 2262:				  if (!state
branch  0 never executed
branch  1 never executed
    #####: 2263:				      && (*(the_text + j) == *SPLIT_SEP))
branch  0 never executed
branch  1 never executed
        -: 2264:				    {
    #####: 2265:				      s2[i++] = *(the_text + j);
    #####: 2266:				      split++;
    #####: 2267:				      sign = FALSE;
    #####: 2268:				      digits = 0;
    #####: 2269:				      state = 4;
        -: 2270:				    }
    #####: 2271:				  break;
    #####: 2272:				default:
    #####: 2273:				  state = 0;
        -: 2274:				}
    #####: 2275:			      if (state && !skip)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2276:				{
    #####: 2277:				  if (digits <= 7)
branch  0 never executed
branch  1 never executed
        -: 2278:				    {
    #####: 2279:				      if (i)
branch  0 never executed
branch  1 never executed
        -: 2280:					{
    #####: 2281:					  if (s2[i - 1] != *SPLIT_SEP
branch  0 never executed
branch  1 never executed
    #####: 2282:					      || *(the_text + j) !=
branch  0 never executed
branch  1 never executed
    #####: 2283:					      *SPLIT_SEP)
    #####: 2284:					    s2[i++] = *(the_text + j);
        -: 2285:					}
        -: 2286:				      else
        -: 2287:					{
    #####: 2288:					  if (*(the_text + j) == *SPLIT_SEP)
branch  0 never executed
branch  1 never executed
    #####: 2289:					    split++;
    #####: 2290:					  s2[i++] = *(the_text + j);
        -: 2291:					}
    #####: 2292:				      if (!decimals)
branch  0 never executed
branch  1 never executed
        -: 2293:					{
    #####: 2294:					  if ((state == 2)
branch  0 never executed
branch  1 never executed
    #####: 2295:					      && (((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2296:						   && (digits == 2
branch  0 never executed
branch  1 never executed
    #####: 2297:						       || digits == 4
branch  0 never executed
branch  1 never executed
    #####: 2298:						       || digits == 6))
branch  0 never executed
branch  1 never executed
    #####: 2299:						  || ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2300:						      && (digits == 3
branch  0 never executed
branch  1 never executed
    #####: 2301:							  || digits == 5
branch  0 never executed
branch  1 never executed
    #####: 2302:							  || digits == 7))))
branch  0 never executed
branch  1 never executed
    #####: 2303:					    if (s2[i - 1] != *SPLIT_SEP)
branch  0 never executed
branch  1 never executed
        -: 2304:					      {
    #####: 2305:						split++;
    #####: 2306:						s2[i++] = *SPLIT_SEP;
        -: 2307:					      }
    #####: 2308:					  if (state == 2)
branch  0 never executed
branch  1 never executed
        -: 2309:					    {
    #####: 2310:					      if ((num_coord == 1)
branch  0 never executed
branch  1 never executed
    #####: 2311:						  && (digits > 2))
branch  0 never executed
branch  1 never executed
    #####: 2312:						got_lat_min = TRUE;
        -: 2313:					      else
    #####: 2314:						if ((num_coord == 2)
branch  0 never executed
branch  1 never executed
    #####: 2315:						    && (digits > 3))
branch  0 never executed
branch  1 never executed
    #####: 2316:						got_lon_min = TRUE;
        -: 2317:					    }
        -: 2318:					}
        -: 2319:				    }
    #####: 2320:				  else if (s2[i - 1] != *SPLIT_SEP)
branch  0 never executed
branch  1 never executed
        -: 2321:				    {
    #####: 2322:				      split++;
    #####: 2323:				      s2[i++] = *SPLIT_SEP;
        -: 2324:				    }
        -: 2325:				}
    #####: 2326:			      j++;
        -: 2327:			    }
    #####: 2328:			  if (i && (split - is_decimal <= 5))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2329:			    {
    #####: 2330:			      s2[i++] = '0';
    #####: 2331:			      if (split - is_decimal == 4)
branch  0 never executed
branch  1 never executed
        -: 2332:				{
    #####: 2333:				  s2[i++] = *SPLIT_SEP;
    #####: 2334:				  s2[i++] = '0';
        -: 2335:				}
        -: 2336:			    }
    #####: 2337:			  if (!state
branch  0 never executed
branch  1 never executed
    #####: 2338:			      || is_last
branch  0 never executed
branch  1 never executed
    #####: 2339:			      || num_coord > 3
branch  0 never executed
branch  1 never executed
    #####: 2340:			      || (i
branch  0 never executed
branch  1 never executed
    #####: 2341:				  && !time_sep_found
branch  0 never executed
branch  1 never executed
    #####: 2342:				  && !is_leading_zero
branch  0 never executed
branch  1 never executed
    #####: 2343:				  && !digits)
branch  0 never executed
branch  1 never executed
    #####: 2344:			      || (time_sep_found
branch  0 never executed
branch  1 never executed
    #####: 2345:				  && (digits > 2))
branch  0 never executed
branch  1 never executed
    #####: 2346:			      || (!is_decimal
branch  0 never executed
branch  1 never executed
    #####: 2347:				  && (num_coord == state)
branch  0 never executed
branch  1 never executed
    #####: 2348:				  && (digits != 3)
branch  0 never executed
branch  1 never executed
    #####: 2349:				  && (digits != 5)
branch  0 never executed
branch  1 never executed
    #####: 2350:				  && (digits != 7))
branch  0 never executed
branch  1 never executed
    #####: 2351:			      || ((num_coord == 3
branch  0 never executed
branch  1 never executed
    #####: 2352:				   || state == 4) && (digits > 4)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2353:			    /*
        -: 2354:			       Error, invalid condition occurred.
        -: 2355:			     */
    #####: 2356:			    is_error = TRUE;
    #####: 2357:			  if (j)
branch  0 never executed
branch  1 never executed
    #####: 2358:			    j--;
    #####: 2359:			  if (i && !is_error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2360:			    {
    #####: 2361:			      auto double val = 0.0;
    #####: 2362:			      auto Bool ok2 = FALSE;
        -: 2363:
        -: 2364:
        -: 2365:			      /*
        -: 2366:			         Store the split argument of the %sun* or %moon*
        -: 2367:			         special text in the Coor_struct variable
        -: 2368:			         `coordinate' properly.
        -: 2369:			       */
    #####: 2370:			      coor1->lon_deg = coor1->lon_min =
    #####: 2371:				coor1->lon_sec = SECS_PER_HOUR;
    #####: 2372:			      coor1->lat_deg = coor1->lat_min =
    #####: 2373:				coor1->lat_sec = SECS_PER_HOUR;
    #####: 2374:			      coor1->meters_above_sea_level =
    #####: 2375:				coor1->time_zone_in_mins = SECS_PER_HOUR * 5;
    #####: 2376:			      s2[i] = '\0';
    #####: 2377:			      ptr_char = s2;
        -: 2378:			      do
        -: 2379:				{
    #####: 2380:				  i = 0;
    #####: 2381:				  is_decimal = FALSE;
        -: 2382:				  /*
        -: 2383:				     Get an element.
        -: 2384:				   */
    #####: 2385:				  while (!ok2)
branch  0 never executed
branch  1 never executed
        -: 2386:				    {
    #####: 2387:				      if (*ptr_char)
branch  0 never executed
branch  1 never executed
        -: 2388:					{
    #####: 2389:					  if (*ptr_char != *SPLIT_SEP)
branch  0 never executed
branch  1 never executed
        -: 2390:					    {
    #####: 2391:					      if (!i && (*ptr_char == '.'))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2392:						is_decimal = TRUE;
    #####: 2393:					      s2[i++] = *ptr_char++;
        -: 2394:					    }
        -: 2395:					  else
        -: 2396:					    {
    #####: 2397:					      ptr_char++;
    #####: 2398:					      break;
        -: 2399:					    }
        -: 2400:					}
        -: 2401:				      else
    #####: 2402:					ok2 = TRUE;
        -: 2403:				    }
    #####: 2404:				  s2[i] = '\0';
        -: 2405:				  /*
        -: 2406:				     Process the element.
        -: 2407:				   */
    #####: 2408:				  if (i)
branch  0 never executed
branch  1 never executed
        -: 2409:				    {
    #####: 2410:				      i = SPECIAL_VALUE;
    #####: 2411:				      if (is_decimal)
branch  0 never executed
branch  1 never executed
    #####: 2412:					(void) sscanf (s2, "%lf", &val);
        -: 2413:				      else
    #####: 2414:					i = atoi (s2);
    #####: 2415:				      if (coor1->lat_deg == SECS_PER_HOUR)
branch  0 never executed
branch  1 never executed
    #####: 2416:					coor1->lat_deg = i;
        -: 2417:				      else
    #####: 2418:					if (coor1->lat_min == SECS_PER_HOUR)
branch  0 never executed
branch  1 never executed
    #####: 2419:					coor1->lat_min =
    #####: 2420:					  i *
    #####: 2421:					  ((SGN (coor1->lat_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2422:					   SGN (coor1->lat_deg) : 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2423:				      else if (coor1->lat_sec ==
branch  0 never executed
branch  1 never executed
        -: 2424:					       SECS_PER_HOUR)
    #####: 2425:					coor1->lat_sec =
    #####: 2426:					  i *
    #####: 2427:					  ((SGN (coor1->lat_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2428:					   SGN (coor1->lat_deg) : 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2429:				      else if (coor1->lon_deg ==
branch  0 never executed
branch  1 never executed
        -: 2430:					       SECS_PER_HOUR)
        -: 2431:					{
    #####: 2432:					  if (is_decimal)
branch  0 never executed
branch  1 never executed
        -: 2433:					    {
    #####: 2434:					      if (!got_lat_min
branch  0 never executed
branch  1 never executed
    #####: 2435:						  && !coor1->lat_min)
branch  0 never executed
branch  1 never executed
        -: 2436:						{
    #####: 2437:						  val *=
        -: 2438:						    (double) MINS_PER_HOUR;
    #####: 2439:						  sprintf (buffer, "%.6f",
        -: 2440:							   val);
    #####: 2441:						  i = atoi (buffer);
    #####: 2442:						  coor1->lat_min =
    #####: 2443:						    i *
    #####: 2444:						    ((SGN (coor1->lat_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2445:						     SGN (coor1->
branch  0 never executed
branch  1 never executed
    #####: 2446:							  lat_deg) : 1);
branch  0 never executed
branch  1 never executed
    #####: 2447:						  val -= (double) i;
        -: 2448:						}
    #####: 2449:					      if (!coor1->lat_sec)
branch  0 never executed
branch  1 never executed
        -: 2450:						{
    #####: 2451:						  val *=
        -: 2452:						    (double) SECS_PER_MIN;
    #####: 2453:						  sprintf (buffer, "%.6f",
        -: 2454:							   val);
    #####: 2455:						  i = atoi (buffer);
    #####: 2456:						  coor1->lat_sec =
    #####: 2457:						    i *
    #####: 2458:						    ((SGN (coor1->lat_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2459:						     SGN (coor1->
branch  0 never executed
branch  1 never executed
    #####: 2460:							  lat_deg) : 1);
branch  0 never executed
branch  1 never executed
        -: 2461:						}
        -: 2462:					    }
        -: 2463:					  else
    #####: 2464:					    coor1->lon_deg = i;
        -: 2465:					}
        -: 2466:				      else
    #####: 2467:					if (coor1->lon_min == SECS_PER_HOUR)
branch  0 never executed
branch  1 never executed
    #####: 2468:					coor1->lon_min =
    #####: 2469:					  i *
    #####: 2470:					  ((SGN (coor1->lon_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2471:					   SGN (coor1->lon_deg) : 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2472:				      else if (coor1->lon_sec ==
branch  0 never executed
branch  1 never executed
        -: 2473:					       SECS_PER_HOUR)
    #####: 2474:					coor1->lon_sec =
    #####: 2475:					  i *
    #####: 2476:					  ((SGN (coor1->lon_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2477:					   SGN (coor1->lon_deg) : 1);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2478:				      else if (num_coord == 3
branch  0 never executed
branch  1 never executed
    #####: 2479:					       && (coor1->
branch  0 never executed
branch  1 never executed
        -: 2480:						   meters_above_sea_level ==
        -: 2481:						   SECS_PER_HOUR * 5))
    #####: 2482:					coor1->meters_above_sea_level = i;
        -: 2483:				      else
    #####: 2484:					if (coor1->time_zone_in_mins ==
branch  0 never executed
branch  1 never executed
        -: 2485:					    SECS_PER_HOUR * 5)
        -: 2486:					{
    #####: 2487:					  if (is_decimal)
branch  0 never executed
branch  1 never executed
        -: 2488:					    {
    #####: 2489:					      if (!got_lon_min
branch  0 never executed
branch  1 never executed
    #####: 2490:						  && !coor1->lon_min)
branch  0 never executed
branch  1 never executed
        -: 2491:						{
    #####: 2492:						  val *=
        -: 2493:						    (double) MINS_PER_HOUR;
    #####: 2494:						  sprintf (buffer, "%.6f",
        -: 2495:							   val);
    #####: 2496:						  i = atoi (buffer);
    #####: 2497:						  coor1->lon_min =
    #####: 2498:						    i *
    #####: 2499:						    ((SGN (coor1->lon_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2500:						     SGN (coor1->
branch  0 never executed
branch  1 never executed
    #####: 2501:							  lon_deg) : 1);
branch  0 never executed
branch  1 never executed
    #####: 2502:						  val -= (double) i;
        -: 2503:						}
    #####: 2504:					      if (!coor1->lon_sec)
branch  0 never executed
branch  1 never executed
        -: 2505:						{
    #####: 2506:						  val *=
        -: 2507:						    (double) SECS_PER_MIN;
    #####: 2508:						  sprintf (buffer, "%.6f",
        -: 2509:							   val);
    #####: 2510:						  i = atoi (buffer);
    #####: 2511:						  coor1->lon_sec =
    #####: 2512:						    i *
    #####: 2513:						    ((SGN (coor1->lon_deg)) ?
branch  0 never executed
branch  1 never executed
    #####: 2514:						     SGN (coor1->
branch  0 never executed
branch  1 never executed
    #####: 2515:							  lon_deg) : 1);
branch  0 never executed
branch  1 never executed
        -: 2516:						}
        -: 2517:					    }
        -: 2518:					  else
        -: 2519:					    {
        -: 2520:					      /*
        -: 2521:					         Ensure that we always get the right timezone value
        -: 2522:					         if the locale-specific time separator character
        -: 2523:					         is also defined as the decimal point character DOT,
        -: 2524:					         but we generally don't use a locale-specific decimal
        -: 2525:					         point character like COMMA or such, so the DOT
        -: 2526:					         indicated the use of a floating point value which
        -: 2527:					         we now have to respect!
        -: 2528:					       */
    #####: 2529:					      if (i == SPECIAL_VALUE && is_decimal)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2530:						i = (int) val;
    #####: 2531:					      coor1->time_zone_in_mins = i;
    #####: 2532:					      if (time_sep_found)
branch  0 never executed
branch  1 never executed
        -: 2533:						{
    #####: 2534:						  coor1->time_zone_in_mins *=
        -: 2535:						    MINS_PER_HOUR;
    #####: 2536:						  ptr_char =
    #####: 2537:						    strchr (s2, *time_sep);
    #####: 2538:						  if (ptr_char ==
branch  0 never executed
branch  1 never executed
        -: 2539:						      (char *) NULL)
    #####: 2540:						    ptr_char =
    #####: 2541:						      strchr (s2,
    #####: 2542:							      *DEFAULT_TIME_SEP);
    #####: 2543:						  if (ptr_char !=
branch  0 never executed
branch  1 never executed
        -: 2544:						      (char *) NULL)
        -: 2545:						    {
    #####: 2546:						      if (*++ptr_char)
branch  0 never executed
branch  1 never executed
        -: 2547:							{
    #####: 2548:							  i = atoi (ptr_char);
    #####: 2549:							  if (abs (i) >=
branch  0 never executed
branch  1 never executed
        -: 2550:							      MINS_PER_HOUR)
    #####: 2551:							    is_error = TRUE;
        -: 2552:							  else
    #####: 2553:							    if (!coor1->
branch  0 never executed
branch  1 never executed
        -: 2554:								time_zone_in_mins)
        -: 2555:							    {
    #####: 2556:							      if (*s2 ==
branch  0 never executed
branch  1 never executed
    #####: 2557:								  *DES_LIT)
    #####: 2558:								coor1->
        -: 2559:								  time_zone_in_mins
    #####: 2560:								  = -i;
        -: 2561:							      else
    #####: 2562:								coor1->
        -: 2563:								  time_zone_in_mins
    #####: 2564:								  = i;
        -: 2565:							    }
        -: 2566:							  else
    #####: 2567:							    if (SGN
branch  0 never executed
branch  1 never executed
        -: 2568:								(coor1->
        -: 2569:								 time_zone_in_mins)
        -: 2570:								< 0)
        -: 2571:							    coor1->
        -: 2572:							      time_zone_in_mins
    #####: 2573:							      -= i;
        -: 2574:							  else
        -: 2575:							    coor1->
        -: 2576:							      time_zone_in_mins
    #####: 2577:							      += i;
        -: 2578:							}
        -: 2579:						    }
        -: 2580:						  else
    #####: 2581:						    is_error = TRUE;
        -: 2582:						}
        -: 2583:					    }
        -: 2584:					}
        -: 2585:				      else
        -: 2586:					/*
        -: 2587:					   Error, argument contains too many elements.
        -: 2588:					 */
    #####: 2589:					is_error = TRUE;
        -: 2590:				    }
        -: 2591:				}
    #####: 2592:			      while (!ok2 && !is_error);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2593:			      if (!is_error)
branch  0 never executed
branch  1 never executed
        -: 2594:				{
        -: 2595:				  /*
        -: 2596:				     Check whether an invalid co-ordinate element is given.
        -: 2597:				   */
    #####: 2598:				  if (abs (coor1->lon_deg) > COOR_LON_DEG_MAX
branch  0 never executed
branch  1 never executed
    #####: 2599:				      || abs (coor1->lon_min) >=
branch  0 never executed
branch  1 never executed
        -: 2600:				      COOR_LON_MIN_MAX
    #####: 2601:				      || abs (coor1->lon_sec) >=
branch  0 never executed
branch  1 never executed
        -: 2602:				      COOR_LON_SEC_MAX
    #####: 2603:				      ||
branch  0 never executed
branch  1 never executed
    #####: 2604:				      ((abs (coor1->lon_deg) ==
        -: 2605:					COOR_LON_DEG_MAX)
    #####: 2606:				       && (coor1->lon_min != 0
branch  0 never executed
branch  1 never executed
    #####: 2607:					   || coor1->lon_sec != 0))
branch  0 never executed
branch  1 never executed
    #####: 2608:				      || abs (coor1->lat_deg) >
branch  0 never executed
branch  1 never executed
        -: 2609:				      COOR_LAT_DEG_MAX
    #####: 2610:				      || abs (coor1->lat_min) >=
branch  0 never executed
branch  1 never executed
        -: 2611:				      COOR_LAT_MIN_MAX
    #####: 2612:				      || abs (coor1->lat_sec) >=
branch  0 never executed
branch  1 never executed
        -: 2613:				      COOR_LAT_SEC_MAX
    #####: 2614:				      ||
branch  0 never executed
branch  1 never executed
    #####: 2615:				      ((abs (coor1->lat_deg) ==
        -: 2616:					COOR_LAT_DEG_MAX)
    #####: 2617:				       && (coor1->lat_min != 0
branch  0 never executed
branch  1 never executed
    #####: 2618:					   || coor1->lat_sec != 0)))
branch  0 never executed
branch  1 never executed
        -: 2619:				    /*
        -: 2620:				       Error, invalid co-ordinate element found.
        -: 2621:				     */
    #####: 2622:				    is_error = TRUE;
        -: 2623:				  else
        -: 2624:				    {
        -: 2625:				      /*
        -: 2626:				         Let's check if we have to use the default
        -: 2627:				         meters_above_sea_level value.
        -: 2628:				       */
    #####: 2629:				      if (coor1->meters_above_sea_level ==
branch  0 never executed
branch  1 never executed
        -: 2630:					  SECS_PER_HOUR * 5)
    #####: 2631:					coor1->meters_above_sea_level = 0;
        -: 2632:				      /*
        -: 2633:				         Let's check if we have to use the default
        -: 2634:				         time value.
        -: 2635:				       */
    #####: 2636:				      if (coor1->time_zone_in_mins ==
branch  0 never executed
branch  1 never executed
        -: 2637:					  SECS_PER_HOUR * 5)
    #####: 2638:					coor1->time_zone_in_mins = 0;
        -: 2639:				      else
    #####: 2640:					coor1->time_zone_in_mins =
    #####: 2641:					  (int) (SGN
branch  0 never executed
branch  1 never executed
        -: 2642:						 (coor1->time_zone_in_mins) *
    #####: 2643:						 (abs
    #####: 2644:						  (coor1->time_zone_in_mins) %
        -: 2645:						  MINS_PER_DAY));
        -: 2646:				    }
        -: 2647:				}
        -: 2648:			    }
    #####: 2649:			  if (!is_error && --parsed_coordinates)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2650:			    {
    #####: 2651:			      if (*(the_text + j + 1) == *RC_COORDINATE_SEP)
branch  0 never executed
branch  1 never executed
        -: 2652:				{
    #####: 2653:				  j += 2;
    #####: 2654:				  coor2->lon_deg = coor1->lon_deg;
    #####: 2655:				  coor2->lon_min = coor1->lon_min;
    #####: 2656:				  coor2->lon_sec = coor1->lon_sec;
    #####: 2657:				  coor2->lat_deg = coor1->lat_deg;
    #####: 2658:				  coor2->lat_min = coor1->lat_min;
    #####: 2659:				  coor2->lat_sec = coor1->lat_sec;
    #####: 2660:				  coor2->meters_above_sea_level =
    #####: 2661:				    coor1->meters_above_sea_level;
    #####: 2662:				  coor2->the_mode = coor1->the_mode;
    #####: 2663:				  goto LABEL_get_second_coordinate;
        -: 2664:				}
    #####: 2665:			      if (digits)
branch  0 never executed
branch  1 never executed
    #####: 2666:				is_error = TRUE;
        -: 2667:			    }
        -: 2668:			  /*
        -: 2669:			     Avoid a nonsense computation of day and night length if
        -: 2670:			     the selection made for the astronomical object's data
        -: 2671:			     is the calculation of a non-rise/set time-based mode.
        -: 2672:			   */
    #####: 2673:			  if (!is_rise_set
branch  0 never executed
branch  1 never executed
    #####: 2674:			      && (astronomical_object != AOBJ_NONE)
branch  0 never executed
branch  1 never executed
    #####: 2675:			      && (is_error
branch  0 never executed
branch  1 never executed
    #####: 2676:				  || (aobj_mode <= 1
branch  0 never executed
branch  1 never executed
    #####: 2677:				      || ((aobj_mode > 9)
branch  0 never executed
branch  1 never executed
    #####: 2678:					  && (aobj_mode < 52)
branch  0 never executed
branch  1 never executed
    #####: 2679:					  && (astronomical_object ==
branch  0 never executed
branch  1 never executed
    #####: 2680:					      AOBJ_SUN)) || ((aobj_mode > 5)
branch  0 never executed
branch  1 never executed
    #####: 2681:							     &&
branch  0 never executed
branch  1 never executed
        -: 2682:							     (astronomical_object
        -: 2683:							      ==
        -: 2684:							      AOBJ_MOON)))))
        -: 2685:			    {
    #####: 2686:			      aobj_mode = 65;
    #####: 2687:			      is_error = TRUE;
        -: 2688:			    }
    #####: 2689:			  if (!is_error)
branch  0 never executed
branch  1 never executed
        -: 2690:			    {
    #####: 2691:			      auto double rise = SECS_PER_HOUR;
    #####: 2692:			      auto double set = SECS_PER_HOUR;
        -: 2693:
        -: 2694:
    #####: 2695:			      if (!y)
branch  0 never executed
branch  1 never executed
    #####: 2696:				y = year + incr_year - decr_year;
        -: 2697:			      /*
        -: 2698:			         Get the data.
        -: 2699:			       */
    #####: 2700:			      switch (special_text_char)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2701:				{
    #####: 2702:				case RC_DISTANCE_CHAR:
    #####: 2703:				  the_time = compute_distance (coor2, coor1);
call    0 never executed
    #####: 2704:				  if (the_time == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 2705:				    /*
        -: 2706:				       Internal error condition occurred
        -: 2707:				       within the `compute_distance()' function.
        -: 2708:				     */
    #####: 2709:				    the_error = the_time;
        -: 2710:				  else
    #####: 2711:				    if (!dist_mode
branch  0 never executed
branch  1 never executed
    #####: 2712:					&& is_format_modifier_given)
branch  0 never executed
branch  1 never executed
        -: 2713:				    /*
        -: 2714:				       Convert the distance value into statute miles.
        -: 2715:				     */
    #####: 2716:				    the_time = KM2SM (the_time);
    #####: 2717:				  break;
    #####: 2718:				case RC_SUN_DAY_CHAR:
        -: 2719:				case RC_SUN_NIGHT_CHAR:
        -: 2720:				case RC_SUN_RISE_CHAR:
    #####: 2721:				  rise =
call    0 never executed
    #####: 2722:				    sun_rise_set (RIse, rc_limit, d, m, y,
        -: 2723:						  coor1);
    #####: 2724:				  if (is_rise_set)
branch  0 never executed
branch  1 never executed
        -: 2725:				    {
    #####: 2726:				      if (((aobj_mode <= 9
branch  0 never executed
branch  1 never executed
    #####: 2727:					    || aobj_mode >= 52)
branch  0 never executed
branch  1 never executed
    #####: 2728:					   && (rise <= SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####: 2729:					  || ((aobj_mode >= 37)
branch  0 never executed
branch  1 never executed
    #####: 2730:					      && (aobj_mode < 52)
branch  0 never executed
branch  1 never executed
    #####: 2731:					      && (rise <=
branch  0 never executed
branch  1 never executed
        -: 2732:						  HH2SS (SPECIAL_VALUE))))
        -: 2733:					/*
        -: 2734:					   Internal error condition occurred
        -: 2735:					   within the `sun_rise_set()' function.
        -: 2736:					 */
    #####: 2737:					the_error = rise;
    #####: 2738:				      break;
        -: 2739:				    }
        -: 2740:				  /* Fallthrough. */
        -: 2741:				case RC_SUN_SET_CHAR:
    #####: 2742:				  set =
call    0 never executed
    #####: 2743:				    sun_rise_set (SEt, rc_limit, d, m, y,
        -: 2744:						  coor1);
    #####: 2745:				  if (is_rise_set
branch  0 never executed
branch  1 never executed
    #####: 2746:				      &&
branch  0 never executed
branch  1 never executed
    #####: 2747:				      (((aobj_mode <= 9 || aobj_mode >= 52)
branch  0 never executed
branch  1 never executed
    #####: 2748:					&& (set <= SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####: 2749:				       || ((aobj_mode >= 37)
branch  0 never executed
branch  1 never executed
    #####: 2750:					   && (aobj_mode < 52)
branch  0 never executed
branch  1 never executed
    #####: 2751:					   && (set <=
branch  0 never executed
branch  1 never executed
        -: 2752:					       HH2SS (SPECIAL_VALUE)))))
        -: 2753:				    /*
        -: 2754:				       Internal error condition occurred
        -: 2755:				       within the `sun_rise_set()' function.
        -: 2756:				     */
    #####: 2757:				    the_error = set;
    #####: 2758:				  break;
    #####: 2759:				case RC_MOON_DAY_CHAR:
        -: 2760:				case RC_MOON_NIGHT_CHAR:
        -: 2761:				case RC_MOON_RISE_CHAR:
    #####: 2762:				  rise = moon_rise_set (RIse, d, m, y, coor1);
call    0 never executed
    #####: 2763:				  if (is_rise_set)
branch  0 never executed
branch  1 never executed
        -: 2764:				    {
    #####: 2765:				      if (((aobj_mode <= 5)
branch  0 never executed
branch  1 never executed
    #####: 2766:					   && (rise <= SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####: 2767:					  || ((aobj_mode >= 40)
branch  0 never executed
branch  1 never executed
    #####: 2768:					      && (rise <=
branch  0 never executed
branch  1 never executed
        -: 2769:						  HH2SS (SPECIAL_VALUE))))
        -: 2770:					/*
        -: 2771:					   Internal error condition occurred
        -: 2772:					   within the `moon_rise_set()' function.
        -: 2773:					 */
    #####: 2774:					the_error = rise;
    #####: 2775:				      break;
        -: 2776:				    }
        -: 2777:				  /* Fallthrough. */
        -: 2778:				case RC_MOON_SET_CHAR:
    #####: 2779:				  set = moon_rise_set (SEt, d, m, y, coor1);
call    0 never executed
    #####: 2780:				  if (is_rise_set
branch  0 never executed
branch  1 never executed
    #####: 2781:				      && (((aobj_mode <= 5)
branch  0 never executed
branch  1 never executed
    #####: 2782:					   && (set <= SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####: 2783:					  || ((aobj_mode >= 40)
branch  0 never executed
branch  1 never executed
    #####: 2784:					      && (set <=
branch  0 never executed
branch  1 never executed
        -: 2785:						  HH2SS (SPECIAL_VALUE)))))
        -: 2786:				    /*
        -: 2787:				       Internal error condition occurred
        -: 2788:				       within the `moon_rise_set()' function.
        -: 2789:				     */
    #####: 2790:				    the_error = set;
    #####: 2791:				  break;
    #####: 2792:				default:
        -: 2793:				  /*
        -: 2794:				     This case MUST be an internal error!
        -: 2795:				   */
    #####: 2796:				  abort ();
call    0 never executed
        -: 2797:				}
    #####: 2798:			      if (!is_error
branch  0 never executed
branch  1 never executed
    #####: 2799:				  && (astronomical_object != AOBJ_NONE))
branch  0 never executed
branch  1 never executed
        -: 2800:				{
    #####: 2801:				  if (is_rise_set)
branch  0 never executed
branch  1 never executed
        -: 2802:				    {
    #####: 2803:				      if (!(int) ROUND (the_error))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 2804:					{
    #####: 2805:					  if (set == SECS_PER_HOUR)
branch  0 never executed
branch  1 never executed
    #####: 2806:					    the_time = rise;
        -: 2807:					  else
    #####: 2808:					    the_time = set;
    #####: 2809:					  if (is_format_modifier_given)
branch  0 never executed
branch  1 never executed
        -: 2810:					    {
    #####: 2811:					      if (aobj_oformat[aobj_mode]
branch  0 never executed
branch  1 never executed
    #####: 2812:						  [astronomical_object].
        -: 2813:						  error_format == ERR_HHH)
        -: 2814:						{
        -: 2815:						  /*
        -: 2816:						     Copy a trailing "am" resp., "pm" suffix to the text.
        -: 2817:						   */
    #####: 2818:						  if (the_time >=
branch  0 never executed
branch  1 never executed
        -: 2819:						      HOURS_PER_HALF_DAY)
        -: 2820:						    {
        -: 2821:						      /*
        -: 2822:						       *** Translators, please translate this as a fixed 2-character text.
        -: 2823:						       *** This text should be a proper abbreviation of "post meridiem".
        -: 2824:						       */
    #####: 2825:						      time_suffix = _("pm");
    #####: 2826:						      the_time -=
        -: 2827:							HOURS_PER_HALF_DAY;
        -: 2828:						    }
        -: 2829:						  else
        -: 2830:						    /*
        -: 2831:						     *** Translators, please translate this as a fixed 2-character text.
        -: 2832:						     *** This text should be a proper abbreviation of "ante meridiem".
        -: 2833:						     */
    #####: 2834:						    time_suffix = _("am");
    #####: 2835:						  state =
    #####: 2836:						    strlen (time_suffix);
        -: 2837:						}
        -: 2838:					      else
        -: 2839:						/*
        -: 2840:						   Manage the Sun|Moon/Earth distance and the Moon phase angle modes.
        -: 2841:						 */
    #####: 2842:						switch (astronomical_object)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 2843:						  {
    #####: 2844:						  case AOBJ_SUN:
    #####: 2845:						    if (aobj_mode == 15
branch  0 never executed
branch  1 never executed
    #####: 2846:							|| aobj_mode == 24)
branch  0 never executed
branch  1 never executed
        -: 2847:						      {
        -: 2848:							/*
        -: 2849:							   Convert the distance value into kilometers.
        -: 2850:							 */
    #####: 2851:							the_time =
        -: 2852:							  AU2KM (the_time);
    #####: 2853:							aobj_mode = 61;
        -: 2854:						      }
    #####: 2855:						    break;
    #####: 2856:						  case AOBJ_MOON:
    #####: 2857:						    if (aobj_mode == 16
branch  0 never executed
branch  1 never executed
    #####: 2858:							|| aobj_mode == 29)
branch  0 never executed
branch  1 never executed
        -: 2859:						      {
        -: 2860:							/*
        -: 2861:							   Convert the distance value into kilometers.
        -: 2862:							 */
    #####: 2863:							the_time =
    #####: 2864:							  ER2KM (the_time);
    #####: 2865:							aobj_mode = 61;
        -: 2866:						      }
        -: 2867:						    else
    #####: 2868:						      if (aobj_mode == 9
branch  0 never executed
branch  1 never executed
    #####: 2869:							  || aobj_mode == 22
branch  0 never executed
branch  1 never executed
    #####: 2870:							  || aobj_mode == 48
branch  0 never executed
branch  1 never executed
    #####: 2871:							  || aobj_mode == 50
branch  0 never executed
branch  1 never executed
    #####: 2872:							  || aobj_mode == 53
branch  0 never executed
branch  1 never executed
    #####: 2873:							  || aobj_mode == 55
branch  0 never executed
branch  1 never executed
    #####: 2874:							  || aobj_mode == 57
branch  0 never executed
branch  1 never executed
    #####: 2875:							  || aobj_mode == 60)
branch  0 never executed
branch  1 never executed
        -: 2876:						      /*
        -: 2877:						         Convert the phase angle value into percents.
        -: 2878:						       */
    #####: 2879:						      the_time *= 100.0;
    #####: 2880:						    break;
    #####: 2881:						  default:
        -: 2882:						    ;	/* Void, nothing to do! */
        -: 2883:						  }
        -: 2884:					    }
        -: 2885:					}
        -: 2886:				    }
        -: 2887:				  else
        -: 2888:				    {
    #####: 2889:				      aobj_mode = 65;
    #####: 2890:				      if (rise <= SPECIAL_VALUE
branch  0 never executed
branch  1 never executed
    #####: 2891:					  || set <= SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 2892:					{
    #####: 2893:					  if (rise == SPECIAL_VALUE
branch  0 never executed
branch  1 never executed
    #####: 2894:					      || rise == SPECIAL_VALUE * 2)
branch  0 never executed
branch  1 never executed
    #####: 2895:					    rise = 0.0;
    #####: 2896:					  else if (rise == SPECIAL_VALUE * 3)
branch  0 never executed
branch  1 never executed
    #####: 2897:					    rise = HOURS_PER_DAY;
    #####: 2898:					  if (set == SPECIAL_VALUE
branch  0 never executed
branch  1 never executed
    #####: 2899:					      || set == SPECIAL_VALUE * 2)
branch  0 never executed
branch  1 never executed
    #####: 2900:					    set = 0.0;
    #####: 2901:					  else if (set == SPECIAL_VALUE * 3)
branch  0 never executed
branch  1 never executed
    #####: 2902:					    set = HOURS_PER_DAY;
        -: 2903:					}
    #####: 2904:				      if (rise == set)
branch  0 never executed
branch  1 never executed
    #####: 2905:					the_time = rise;
    #####: 2906:				      else if (rise > set)
branch  0 never executed
branch  1 never executed
    #####: 2907:					the_time =
    #####: 2908:					  (HOURS_PER_DAY - rise) + set;
        -: 2909:				      else
    #####: 2910:					the_time = set - rise;
    #####: 2911:				      if (special_text_char ==
branch  0 never executed
branch  1 never executed
        -: 2912:					  RC_SUN_NIGHT_CHAR
    #####: 2913:					  || special_text_char ==
branch  0 never executed
branch  1 never executed
        -: 2914:					  RC_MOON_NIGHT_CHAR)
    #####: 2915:					the_time = HOURS_PER_DAY - the_time;
        -: 2916:				    }
        -: 2917:				}
        -: 2918:			    }
        -: 2919:			  /*
        -: 2920:			     Format the data properly.
        -: 2921:			   */
    #####: 2922:			  if (!is_error && !(int) ROUND (the_error))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 2923:			    {
    #####: 2924:			      if (astronomical_object == AOBJ_NONE)
branch  0 never executed
branch  1 never executed
        -: 2925:				{
    #####: 2926:				  if (!dist_mode)
branch  0 never executed
branch  1 never executed
    #####: 2927:				    i = FMT_NNN;
        -: 2928:				  else
    #####: 2929:				    i = FMT_DDD;
        -: 2930:				}
        -: 2931:			      else
    #####: 2932:				i =
        -: 2933:				  aobj_oformat[aobj_mode]
    #####: 2934:				  [astronomical_object].data_format;
        -: 2935:			      /*
        -: 2936:			         Force representation of [signed] number with fraction.
        -: 2937:			       */
    #####: 2938:			      if (is_format_modifier_given)
branch  0 never executed
branch  1 never executed
    #####: 2939:				switch (i)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 2940:				  {
    #####: 2941:				  case FMT_TTT:
        -: 2942:				  case FMT_DDD:
    #####: 2943:				    i = FMT_NND;
    #####: 2944:				    break;
    #####: 2945:				  case FMT_TTS:
        -: 2946:				  case FMT_TXS:
        -: 2947:				  case FMT_DDS:
    #####: 2948:				    i = FMT_NSD;
    #####: 2949:				    break;
    #####: 2950:				  default:
        -: 2951:				    ;	/* Void, nothing to do! */
        -: 2952:				  }
    #####: 2953:			      if (rc_precise)
branch  0 never executed
branch  1 never executed
    #####: 2954:				digits = 6;
        -: 2955:			      else
    #####: 2956:				digits = 3;
    #####: 2957:			      switch (i)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 2958:				{
    #####: 2959:				case FMT_NNN:
    #####: 2960:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
    #####: 2961:				    digits = 3;
        -: 2962:				  else
    #####: 2963:				    digits = 0;
        -: 2964:				  /* Number with[out] fraction. */
    #####: 2965:				  sprintf (buffer, "%.*f", digits,
branch  0 never executed
branch  1 never executed
        -: 2966:					   abs (the_time));
    #####: 2967:				  break;
    #####: 2968:				case FMT_NND:
        -: 2969:				  /* Number with fraction. */
    #####: 2970:				  sprintf (buffer, "%.*f", digits,
branch  0 never executed
branch  1 never executed
        -: 2971:					   abs (the_time));
    #####: 2972:				  break;
    #####: 2973:				case FMT_NSD:
        -: 2974:				  /* Number with sign and fraction. */
    #####: 2975:				  sprintf (buffer, "%c%.*f",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2976:					   (the_time <
    #####: 2977:					    0.0) ? *DES_LIT : *ASC_LIT,
        -: 2978:					   digits, abs (the_time));
    #####: 2979:				  break;
    #####: 2980:				case FMT_HHH:
    #####: 2981:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
        -: 2982:				    {
        -: 2983:				      /* Hour, minute and second+fraction. */
    #####: 2984:				      val2hours (HH2DAY (abs (the_time)),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2985:						 &dots, &sign, &the_error);
    #####: 2986:				      digits =
        -: 2987:					(int)
    #####: 2988:					ROUND ((the_error -
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2989:						(int) the_error) * 1000.0);
    #####: 2990:				      if (digits == 1000)
branch  0 never executed
branch  1 never executed
    #####: 2991:					digits--;
    #####: 2992:				      sprintf (buffer,
        -: 2993:					       "%02d%c%02d%c%02d.%03d%s",
    #####: 2994:					       dots, *sep, sign, *sep,
        -: 2995:					       (int) the_error, digits,
        -: 2996:					       time_suffix);
        -: 2997:				    }
        -: 2998:				  else
        -: 2999:				    {
        -: 3000:				      /* Hour and minute. */
    #####: 3001:				      val2hours (HH2DAY (abs (the_time)),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3002:						 &dots, &sign, NULL);
    #####: 3003:				      sprintf (buffer, "%02d%c%02d%s", dots,
    #####: 3004:					       *sep, sign, time_suffix);
        -: 3005:				    }
    #####: 3006:				  break;
    #####: 3007:				case FMT_TTT:
    #####: 3008:				  the_time = abs (the_time);
branch  0 never executed
branch  1 never executed
    #####: 3009:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
        -: 3010:				    {
        -: 3011:				      /* Value in hours, minutes and seconds+fraction. */
    #####: 3012:				      val2hours (HH2DAY (the_time), &dots,
call    0 never executed
        -: 3013:						 &sign, &the_error);
    #####: 3014:				      digits =
        -: 3015:					(int)
    #####: 3016:					ROUND ((the_error -
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3017:						(int) the_error) * 1000.0);
    #####: 3018:				      if (digits == 1000)
branch  0 never executed
branch  1 never executed
    #####: 3019:					digits--;
        -: 3020:				    }
        -: 3021:				  else
        -: 3022:				    /* Value in hours and minutes. */
    #####: 3023:				    val2hours (HH2DAY (the_time), &dots,
call    0 never executed
        -: 3024:					       &sign, NULL);
    #####: 3025:				  if ((aobj_mode == 65) && !dots
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3026:				      && (the_time >= HOURS_PER_HALF_DAY))
branch  0 never executed
branch  1 never executed
        -: 3027:				    {
    #####: 3028:				      dots = HOURS_PER_DAY;
    #####: 3029:				      digits = sign = 0;
    #####: 3030:				      the_error = 0.0;
        -: 3031:				    }
    #####: 3032:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
    #####: 3033:				    sprintf (buffer,
        -: 3034:					     "%02d%c%02d%c%02d.%03d%c", dots,
    #####: 3035:					     *sep, sign, *(sep + 1),
        -: 3036:					     (int) the_error, digits,
    #####: 3037:					     *(sep + 2));
        -: 3038:				  else
    #####: 3039:				    sprintf (buffer, "%02d%c%02d%c",
    #####: 3040:					     dots, *sep, sign, *(sep + 1));
    #####: 3041:				  break;
    #####: 3042:				case FMT_TTS:
    #####: 3043:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
        -: 3044:				    {
        -: 3045:				      /* Value in hours, minutes and seconds+fraction with sign. */
    #####: 3046:				      val2hours (HH2DAY (the_time), &dots,
call    0 never executed
        -: 3047:						 &sign, &the_error);
    #####: 3048:				      the_error = abs (the_error);
branch  0 never executed
branch  1 never executed
    #####: 3049:				      digits =
        -: 3050:					(int)
    #####: 3051:					ROUND ((the_error -
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3052:						(int) the_error) * 1000.0);
    #####: 3053:				      if (digits == 1000)
branch  0 never executed
branch  1 never executed
    #####: 3054:					digits--;
    #####: 3055:				      sprintf (buffer,
branch  0 never executed
branch  1 never executed
        -: 3056:					       "%c%02d%c%02d%c%02d.%03d%c",
        -: 3057:					       (the_time <
    #####: 3058:						0.0) ? *DES_LIT : *ASC_LIT,
    #####: 3059:					       abs (dots), *sep, abs (sign),
    #####: 3060:					       *(sep + 1), (int) the_error,
    #####: 3061:					       digits, *(sep + 2));
        -: 3062:				    }
        -: 3063:				  else
        -: 3064:				case FMT_TXS:
        -: 3065:				    {
        -: 3066:				      /* Value in hours and minutes with sign. */
    #####: 3067:				      val2hours (HH2DAY (the_time), &dots,
call    0 never executed
        -: 3068:						 &sign, NULL);
    #####: 3069:				      sprintf (buffer, "%c%02d%c%02d%c",
branch  0 never executed
branch  1 never executed
        -: 3070:					       (the_time <
    #####: 3071:						0.0) ? *DES_LIT : *ASC_LIT,
    #####: 3072:					       abs (dots), *sep, abs (sign),
    #####: 3073:					       *(sep + 1));
        -: 3074:				    }
    #####: 3075:				  break;
    #####: 3076:				case FMT_DDD:
    #####: 3077:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
        -: 3078:				    {
        -: 3079:				      /* Degree, minute and second+fraction. */
    #####: 3080:				      val2degrees (abs (the_time), &dots,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3081:						   &sign, &the_error);
    #####: 3082:				      digits =
        -: 3083:					(int)
    #####: 3084:					ROUND ((the_error -
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3085:						(int) the_error) * 1000.0);
    #####: 3086:				      if (digits == 1000)
branch  0 never executed
branch  1 never executed
    #####: 3087:					digits--;
    #####: 3088:				      sprintf (buffer,
        -: 3089:					       "%03d%c%02d%c%02d.%03d%c",
    #####: 3090:					       dots, *sep, sign, *(sep + 1),
        -: 3091:					       (int) the_error, digits,
    #####: 3092:					       *(sep + 2));
        -: 3093:				    }
        -: 3094:				  else
        -: 3095:				    {
        -: 3096:				      /* Degree and minute. */
    #####: 3097:				      val2degrees (abs (the_time), &dots,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3098:						   &sign, NULL);
    #####: 3099:				      sprintf (buffer, "%03d%c%02d%c", dots,
    #####: 3100:					       *sep, sign, *(sep + 1));
        -: 3101:				    }
    #####: 3102:				  break;
    #####: 3103:				case FMT_DDS:
    #####: 3104:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
        -: 3105:				    {
        -: 3106:				      /* Degree, minute and second+fraction with sign. */
    #####: 3107:				      val2degrees (the_time, &dots, &sign,
call    0 never executed
        -: 3108:						   &the_error);
    #####: 3109:				      the_error = abs (the_error);
branch  0 never executed
branch  1 never executed
    #####: 3110:				      digits =
        -: 3111:					(int)
    #####: 3112:					ROUND ((the_error -
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3113:						(int) the_error) * 1000.0);
    #####: 3114:				      if (digits == 1000)
branch  0 never executed
branch  1 never executed
    #####: 3115:					digits--;
    #####: 3116:				      sprintf (buffer,
branch  0 never executed
branch  1 never executed
        -: 3117:					       "%c%03d%c%02d%c%02d.%03d%c",
        -: 3118:					       (the_time <
    #####: 3119:						0.0) ? *DES_LIT : *ASC_LIT,
    #####: 3120:					       abs (dots), *sep, abs (sign),
    #####: 3121:					       *(sep + 1), (int) the_error,
    #####: 3122:					       digits, *(sep + 2));
        -: 3123:				    }
        -: 3124:				  else
        -: 3125:				    {
        -: 3126:				      /* Degree and minute with sign. */
    #####: 3127:				      val2degrees (the_time, &dots, &sign,
call    0 never executed
        -: 3128:						   NULL);
    #####: 3129:				      sprintf (buffer, "%c%03d%c%02d%c",
branch  0 never executed
branch  1 never executed
        -: 3130:					       (the_time <
    #####: 3131:						0.0) ? *DES_LIT : *ASC_LIT,
    #####: 3132:					       abs (dots), *sep, abs (sign),
    #####: 3133:					       *(sep + 1));
        -: 3134:				    }
    #####: 3135:				  break;
    #####: 3136:				default:
        -: 3137:				  /*
        -: 3138:				     This case MUST be an internal error!
        -: 3139:				   */
    #####: 3140:				  abort ();
call    0 never executed
        -: 3141:				}
    #####: 3142:			    }
        -: 3143:			  else
        -: 3144:			    {
    #####: 3145:			      sign = 0;
    #####: 3146:			      if (astronomical_object == AOBJ_NONE)
branch  0 never executed
branch  1 never executed
        -: 3147:				{
    #####: 3148:				  if (is_error)
branch  0 never executed
branch  1 never executed
        -: 3149:				    {
        -: 3150:				      /*
        -: 3151:				         Skip the misspelled argument.
        -: 3152:				       */
    #####: 3153:				      if (*(the_text + j)
branch  0 never executed
branch  1 never executed
    #####: 3154:					  && !isspace (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 3155:					{
    #####: 3156:					  while (*(the_text + j)
branch  0 never executed
branch  1 never executed
    #####: 3157:						 &&
branch  0 never executed
branch  1 never executed
    #####: 3158:						 !isspace (*(the_text + j)))
    #####: 3159:					    j++;
    #####: 3160:					  j--;
        -: 3161:					}
        -: 3162:				    }
    #####: 3163:				  if (!dist_mode)
branch  0 never executed
branch  1 never executed
    #####: 3164:				    i = ERR_NNN;
        -: 3165:				  else
    #####: 3166:				    i = ERR_DDD;
        -: 3167:				}
        -: 3168:			      else
        -: 3169:				{
    #####: 3170:				  i =
        -: 3171:				    aobj_oformat[aobj_mode]
    #####: 3172:				    [astronomical_object].error_format;
    #####: 3173:				  if (aobj_oformat[aobj_mode]
branch  0 never executed
branch  1 never executed
    #####: 3174:				      [astronomical_object].data_format ==
        -: 3175:				      FMT_TTS
    #####: 3176:				      ||
branch  0 never executed
branch  1 never executed
        -: 3177:				      aobj_oformat[aobj_mode]
    #####: 3178:				      [astronomical_object].data_format ==
        -: 3179:				      FMT_DDS)
    #####: 3180:				    sign = 1;
        -: 3181:				}
        -: 3182:			      /*
        -: 3183:			         Force representation of numerical error text.
        -: 3184:			       */
    #####: 3185:			      if (is_format_modifier_given)
branch  0 never executed
branch  1 never executed
    #####: 3186:				switch (i)
branch  0 never executed
branch  1 never executed
        -: 3187:				  {
    #####: 3188:				  case ERR_TTT:
        -: 3189:				  case ERR_DDD:
    #####: 3190:				    i = ERR_NNN;
    #####: 3191:				    sign = 0;
    #####: 3192:				    break;
    #####: 3193:				  default:
        -: 3194:				    ;	/* Void, nothing to do! */
        -: 3195:				  }
    #####: 3196:			      if (the_error <= HH2SS (SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
    #####: 3197:				the_error = SS2HH (the_error);
    #####: 3198:			      if (is_error)
branch  0 never executed
branch  1 never executed
    #####: 3199:				time_suffix = RC_INVALID_PARAM_TEXT;
        -: 3200:			      else
    #####: 3201:				switch ((int) the_error)
branch  0 never executed
branch  1 never executed
branch  2 never executed
        -: 3202:				  {
    #####: 3203:				  case SPECIAL_VALUE * 3:
    #####: 3204:				    time_suffix = RC_A_ABOVE_VALUE_TEXT;
    #####: 3205:				    break;
    #####: 3206:				  case SPECIAL_VALUE * 2:
    #####: 3207:				    time_suffix = RC_A_BELOW_VALUE_TEXT;
    #####: 3208:				    break;
    #####: 3209:				  default:
    #####: 3210:				    time_suffix = RC_INVALID_VALUE_TEXT;
        -: 3211:				  }
    #####: 3212:			      switch (i)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 3213:				{
    #####: 3214:				case ERR_NNN:
    #####: 3215:				  strcpy (buffer, time_suffix);
    #####: 3216:				  break;
    #####: 3217:				case ERR_HHH:
    #####: 3218:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
    #####: 3219:				    sprintf (buffer, "%s%c%s%c%s.%s%c",
    #####: 3220:					     time_suffix, *sep, time_suffix,
    #####: 3221:					     *sep, time_suffix, time_suffix,
    #####: 3222:					     *time_suffix);
        -: 3223:				  else
    #####: 3224:				    sprintf (buffer, "%s%c%s",
    #####: 3225:					     time_suffix, *sep, time_suffix);
    #####: 3226:				  if (is_format_modifier_given)
branch  0 never executed
branch  1 never executed
    #####: 3227:				    for (i = 0; i < state; i++)
branch  0 never executed
branch  1 never executed
    #####: 3228:				      strcat (buffer, time_suffix + 1);
    #####: 3229:				  break;
    #####: 3230:				case ERR_TTT:
    #####: 3231:				  if (sign)
branch  0 never executed
branch  1 never executed
    #####: 3232:				    *buffer = *time_suffix;
    #####: 3233:				  if (rc_precise
branch  0 never executed
branch  1 never executed
    #####: 3234:				      &&
branch  0 never executed
branch  1 never executed
        -: 3235:				      (aobj_oformat[aobj_mode]
    #####: 3236:				       [astronomical_object].data_format !=
        -: 3237:				       FMT_TXS))
    #####: 3238:				    sprintf (buffer + sign,
        -: 3239:					     "%s%c%s%c%s.%s%c%c", time_suffix,
    #####: 3240:					     *sep, time_suffix, *(sep + 1),
        -: 3241:					     time_suffix, time_suffix,
    #####: 3242:					     *time_suffix, *(sep + 2));
        -: 3243:				  else
    #####: 3244:				    sprintf (buffer + sign, "%s%c%s%c",
    #####: 3245:					     time_suffix, *sep, time_suffix,
    #####: 3246:					     *(sep + 1));
    #####: 3247:				  break;
    #####: 3248:				case ERR_DDD:
    #####: 3249:				  if (sign)
branch  0 never executed
branch  1 never executed
    #####: 3250:				    *buffer = *time_suffix;
    #####: 3251:				  if (rc_precise)
branch  0 never executed
branch  1 never executed
    #####: 3252:				    sprintf (buffer + sign,
        -: 3253:					     "%s%c%c%s%c%s.%s%c%c",
    #####: 3254:					     time_suffix, *time_suffix, *sep,
    #####: 3255:					     time_suffix, *(sep + 1),
        -: 3256:					     time_suffix, time_suffix,
    #####: 3257:					     *time_suffix, *(sep + 2));
        -: 3258:				  else
    #####: 3259:				    sprintf (buffer + sign, "%s%c%c%s%c",
    #####: 3260:					     time_suffix, *time_suffix, *sep,
    #####: 3261:					     time_suffix, *(sep + 1));
    #####: 3262:				  break;
    #####: 3263:				default:
        -: 3264:				  /*
        -: 3265:				     This case MUST be an internal error!
        -: 3266:				   */
    #####: 3267:				  abort ();
call    0 never executed
        -: 3268:				}
        -: 3269:			    }
    #####: 3270:			  *s2 = '\0';
    #####: 3271:			  (void) use_format (&s2, 0, buffer, 0, FALSE,
call    0 never executed
        -: 3272:					     is_cformat, is_lformat, is_sign,
        -: 3273:					     is_lzero, is_suffix, is_fformat,
        -: 3274:					     fstyle, fwidth, 0);
    #####: 3275:			  is_obsolete_whitespace = TRUE;
        -: 3276:			}
    #####: 3277:		      else if (special_text_char == RC_ENV_VAR_CHAR)
branch  0 never executed
branch  1 never executed
        -: 3278:			{
    #####: 3279:			  auto char *ptr_env = (char *) NULL;
        -: 3280:
        -: 3281:
        -: 3282:			  /*
        -: 3283:			     %shell_environment_variable special text found:
        -: 3284:			     Replace it by the contents of the environment variable.
        -: 3285:			   */
    #####: 3286:			  i = 0;
    #####: 3287:			  j++;
    #####: 3288:			  while (*(the_text + j)
branch  0 never executed
branch  1 never executed
    #####: 3289:				 && !isspace (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 3290:			    {
    #####: 3291:			      if ((Uint) i >= maxlen_max)
branch  0 never executed
branch  1 never executed
    #####: 3292:				resize_all_strings (maxlen_max << 1, FALSE,
call    0 never executed
        -: 3293:						    __FILE__,
        -: 3294:						    (long) __LINE__);
    #####: 3295:			      s2[i++] = *(the_text + j++);
        -: 3296:			    }
    #####: 3297:			  s2[i] = '\0';
    #####: 3298:			  j--;
        -: 3299:# if !defined(AMIGA) || defined(__GNUC__)
    #####: 3300:			  ptr_env = getenv (s2);
call    0 never executed
        -: 3301:# endif	/* !AMIGA || __GNUC__ */
        -: 3302:			  /*
        -: 3303:			     Insert the contents of environment variable into text.
        -: 3304:			   */
    #####: 3305:			  *s2 = '\0';
    #####: 3306:			  if (ptr_env != (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 3307:			    (void) use_format (&s2, 0, ptr_env, 0, FALSE,
call    0 never executed
        -: 3308:					       is_cformat, is_lformat,
        -: 3309:					       is_sign, is_lzero, is_suffix,
        -: 3310:					       is_fformat, fstyle, fwidth, 0);
    #####: 3311:			  is_obsolete_whitespace = TRUE;
        -: 3312:			}
        -: 3313:		      else
    #####: 3314:			if (special_text_char == RC_HLS1S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3315:			    || special_text_char == RC_HLS1E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3316:			    || special_text_char == RC_HLS2S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3317:			    || special_text_char == RC_HLS2E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3318:			    || special_text_char == RC_HLS3S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3319:			    || special_text_char == RC_HLS3E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3320:			    || special_text_char == RC_HLS4S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3321:			    || special_text_char == RC_HLS4E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3322:			    || special_text_char == RC_HLS5S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3323:			    || special_text_char == RC_HLS5E_CHAR)
branch  0 never executed
branch  1 never executed
        -: 3324:			{
        -: 3325:			  /*
        -: 3326:			     One of the %highlighting special texts found:
        -: 3327:			     Replace it by the real hightlighting sequence.
        -: 3328:			   */
    #####: 3329:			  *s2 = '\0';
    #####: 3330:			  if (highlight_flag)
branch  0 never executed
branch  1 never executed
        -: 3331:			    {
    #####: 3332:			      hls_set = FALSE;
    #####: 3333:			      if ((special_text_char == RC_HLS1S_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3334:				  && !hls1_set)
branch  0 never executed
branch  1 never executed
        -: 3335:				{
    #####: 3336:				  sprintf (s2, "%s", ehls1s.seq);
    #####: 3337:				  hls_set = TRUE;
    #####: 3338:				  hls1_set = TRUE;
    #####: 3339:				  hls2_set = FALSE;
        -: 3340:				}
        -: 3341:			      else
    #####: 3342:				if ((special_text_char == RC_HLS1E_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3343:				    && hls1_set)
branch  0 never executed
branch  1 never executed
        -: 3344:				{
    #####: 3345:				  sprintf (s2, "%s", ehls1e.seq);
    #####: 3346:				  hls_set = TRUE;
    #####: 3347:				  hls1_set = FALSE;
        -: 3348:				}
        -: 3349:			      else
    #####: 3350:				if ((special_text_char == RC_HLS2S_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3351:				    && !hls2_set)
branch  0 never executed
branch  1 never executed
        -: 3352:				{
    #####: 3353:				  sprintf (s2, "%s", ehls2s.seq);
    #####: 3354:				  hls_set = TRUE;
    #####: 3355:				  hls2_set = TRUE;
    #####: 3356:				  hls1_set = FALSE;
        -: 3357:				}
        -: 3358:			      else
    #####: 3359:				if ((special_text_char == RC_HLS2E_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3360:				    && hls2_set)
branch  0 never executed
branch  1 never executed
        -: 3361:				{
    #####: 3362:				  sprintf (s2, "%s", ehls2e.seq);
    #####: 3363:				  hls_set = TRUE;
    #####: 3364:				  hls2_set = FALSE;
        -: 3365:				}
        -: 3366:			      else
        -: 3367:				/*
        -: 3368:				   Set highlighting sequence 1 only if the
        -: 3369:				   fixed date is on today's date!
        -: 3370:				 */
    #####: 3371:			      if ((special_text_char == RC_HLS3S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3372:				     || special_text_char == RC_HLS5S_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3373:				    && (year + incr_year - decr_year ==
branch  0 never executed
branch  1 never executed
    #####: 3374:					  act_year) && (m == act_month)
branch  0 never executed
branch  1 never executed
    #####: 3375:				    && (d == act_day) && !hls1_set)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3376:				{
    #####: 3377:				  sprintf (s2, "%s", ehls1s.seq);
    #####: 3378:				  hls_set = TRUE;
    #####: 3379:				  hls1_set = TRUE;
    #####: 3380:				  hls2_set = FALSE;
        -: 3381:				}
        -: 3382:			      else
    #####: 3383:				if ((special_text_char == RC_HLS3E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3384:				     || special_text_char == RC_HLS5E_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3385:				    && hls1_set)
branch  0 never executed
branch  1 never executed
        -: 3386:				{
    #####: 3387:				  sprintf (s2, "%s", ehls1e.seq);
    #####: 3388:				  hls_set = TRUE;
    #####: 3389:				  hls1_set = FALSE;
        -: 3390:				}
        -: 3391:			      else
        -: 3392:				/*
        -: 3393:				   Set highlighting sequence 2 only if the
        -: 3394:				   fixed date is on a legal holiday date!
        -: 3395:				 */
    #####: 3396:			      if ((special_text_char == RC_HLS4S_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3397:				     || special_text_char == RC_HLS5S_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3398:				    && hd_ldays[((m - 1) * MONTH_LAST) +
branch  0 never executed
branch  1 never executed
    #####: 3399:						  (d - 1)] && !hls2_set)
branch  0 never executed
branch  1 never executed
        -: 3400:				{
    #####: 3401:				  sprintf (s2, "%s", ehls2s.seq);
    #####: 3402:				  hls_set = TRUE;
    #####: 3403:				  hls2_set = TRUE;
    #####: 3404:				  hls1_set = FALSE;
        -: 3405:				}
        -: 3406:			      else
    #####: 3407:				if ((special_text_char == RC_HLS4E_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3408:				     || special_text_char == RC_HLS5E_CHAR)
branch  0 never executed
branch  1 never executed
    #####: 3409:				    && hls2_set)
branch  0 never executed
branch  1 never executed
        -: 3410:				{
    #####: 3411:				  sprintf (s2, "%s", ehls2e.seq);
    #####: 3412:				  hls_set = TRUE;
    #####: 3413:				  hls2_set = FALSE;
        -: 3414:				}
        -: 3415:			    }
        -: 3416:			}
        -: 3417:		      else
        -: 3418:			{
        -: 3419:			  auto Slint diff;
        -: 3420:
        -: 3421:
    #####: 3422:			  dd = act_day;
    #####: 3423:			  mm = act_month;
    #####: 3424:			  yy = act_year;
    #####: 3425:			  (void) get_actual_date ();
call    0 never executed
    #####: 3426:			  y = year + incr_year - decr_year;
        -: 3427:			  /*
        -: 3428:			     Now compute the differences:
        -: 3429:			     date1 == actual (base)date (act_day, act_month, act_year)
        -: 3430:			     date2 == reported date (d, m, y)
        -: 3431:			   */
    #####: 3432:			  if (special_text_char == RC_JDAYS_CHAR)
branch  0 never executed
branch  1 never executed
        -: 3433:			    {
    #####: 3434:			      auto char op = '\0';
        -: 3435:
        -: 3436:
        -: 3437:			      /*
        -: 3438:			         A %julian_day[[+|-]N] special text found
        -: 3439:			         (we always suppress the day fraction part of 0.5).
        -: 3440:			       */
    #####: 3441:			      diff = d_between (1, 1, 1, d, m, y);
call    0 never executed
    #####: 3442:			      j++;
    #####: 3443:			      if (*(the_text + j) == *ASC_LIT
branch  0 never executed
branch  1 never executed
    #####: 3444:				  || *(the_text + j) == *DES_LIT)
branch  0 never executed
branch  1 never executed
    #####: 3445:				op = *(the_text + j++);
    #####: 3446:			      i = 0;
    #####: 3447:			      while (isdigit (*(the_text + j)))
branch  0 never executed
branch  1 never executed
        -: 3448:				{
    #####: 3449:				  if ((Uint) i >= maxlen_max)
branch  0 never executed
branch  1 never executed
    #####: 3450:				    resize_all_strings (maxlen_max << 1,
call    0 never executed
        -: 3451:							FALSE, __FILE__,
        -: 3452:							(long) __LINE__);
    #####: 3453:				  s2[i++] = *(the_text + j++);
        -: 3454:				}
    #####: 3455:			      s2[i] = '\0';
    #####: 3456:			      j--;
    #####: 3457:			      num = atol (s2);
    #####: 3458:			      *s2 = '\0';
    #####: 3459:			      diff += MIN_BCE_TO_1_CE;
    #####: 3460:			      if (op == *ASC_LIT)
branch  0 never executed
branch  1 never executed
    #####: 3461:				diff += num;
        -: 3462:			      else
    #####: 3463:				diff -= num;
        -: 3464:			    }
        -: 3465:			  else
        -: 3466:			    {
    #####: 3467:			      if (special_text_char == RC_DAY_DIFF_CHAR)
branch  0 never executed
branch  1 never executed
        -: 3468:				/*
        -: 3469:				   %day_difference special text found.
        -: 3470:				 */
    #####: 3471:				diff =
call    0 never executed
    #####: 3472:				  d_between (act_day, act_month, act_year, d,
        -: 3473:					     m, y);
    #####: 3474:			      else if (special_text_char == RC_WEEK_DIFF_CHAR)
branch  0 never executed
branch  1 never executed
        -: 3475:				/*
        -: 3476:				   %week_difference special text found.
        -: 3477:				 */
    #####: 3478:				diff =
call    0 never executed
    #####: 3479:				  w_between (act_day, act_month, act_year, d,
        -: 3480:					     m, y);
    #####: 3481:			      else if (special_text_char ==
branch  0 never executed
branch  1 never executed
        -: 3482:				       RC_MONTH_DIFF_CHAR)
        -: 3483:				/*
        -: 3484:				   %month_difference special text found.
        -: 3485:				 */
    #####: 3486:				diff = m_between (act_month, act_year, m, y);
call    0 never executed
        -: 3487:			      else
        -: 3488:				/*
        -: 3489:				   A simple %year_difference special text found.
        -: 3490:				 */
    #####: 3491:				diff = (Slint) y - act_year;
    #####: 3492:			      if (j_buf)
branch  0 never executed
branch  1 never executed
        -: 3493:				/*
        -: 3494:				   Check whether a '-' character is put before
        -: 3495:				   the `%?' special text, e.g. `x -%d x'.  If
        -: 3496:				   so, switch the sign of the computed value.
        -: 3497:				   In case the '-' character preceding the
        -: 3498:				   special is quoted, like "\-", remove the
        -: 3499:				   quote character '-' and do not switch the
        -: 3500:				   sign of the computed value.
        -: 3501:				 */
    #####: 3502:				if (*(the_text + j_buf - 1) == *DES_LIT)
branch  0 never executed
branch  1 never executed
        -: 3503:				  {
    #####: 3504:				    if ((j_buf > 1)
branch  0 never executed
branch  1 never executed
    #####: 3505:					&& (*(the_text + j_buf - 2) ==
branch  0 never executed
branch  1 never executed
        -: 3506:					    QUOTE_CHAR))
        -: 3507:				      {
    #####: 3508:					s1[k - 2] = s1[k - 1];
    #####: 3509:					k--;
    #####: 3510:					s6[kk - 2] = s6[kk - 1];
    #####: 3511:					kk--;
        -: 3512:				      }
        -: 3513:				    else
        -: 3514:				      {
    #####: 3515:					k--;
    #####: 3516:					kk--;
    #####: 3517:					diff = -diff;
        -: 3518:				      }
        -: 3519:				  }
        -: 3520:			    }
    #####: 3521:			  (void) use_format (&s2, 0, "", diff, TRUE,
call    0 never executed
        -: 3522:					     is_cformat, is_lformat, is_sign,
        -: 3523:					     is_lzero, is_suffix, is_fformat,
        -: 3524:					     fstyle, fwidth, 0);
    #####: 3525:			  act_day = dd;
    #####: 3526:			  act_month = mm;
    #####: 3527:			  act_year = yy;
        -: 3528:			}
        -: 3529:		      /*
        -: 3530:		         And copy the expanded special text into the target string.
        -: 3531:		       */
    #####: 3532:		      i = 0;
    #####: 3533:		      while (s2[i])
branch  0 never executed
branch  1 never executed
        -: 3534:			{
    #####: 3535:			  if ((Uint) k >= maxlen_max - (Uint) len_fn)
branch  0 never executed
branch  1 never executed
    #####: 3536:			    resize_all_strings (maxlen_max << 1, FALSE,
call    0 never executed
        -: 3537:						__FILE__, (long) __LINE__);
    #####: 3538:			  s1[k++] = s2[i];
        -: 3539:			  /*
        -: 3540:			     Don't add highlighting sequences in that text, in which we search for PATTERN!
        -: 3541:			   */
    #####: 3542:			  if (!remove_hls_in_regex || !hls_set)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3543:			    s6[kk++] = s2[i];
    #####: 3544:			  i++;
        -: 3545:			}
    #####: 3546:		      j++;
        -: 3547:		    }
        -: 3548:		  else
        -: 3549:		    /*
        -: 3550:		       Check for %? special_texts which disable a fixed date.
        -: 3551:		     */
    #####: 3552:		  if (!got_command
branch  0 never executed
branch  1 never executed
    #####: 3553:			&& (special_text_char == RC_EX_LHDY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3554:			      || special_text_char == RC_EX_NLHDY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3555:			      || special_text_char == RC_EX_AHDY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3556:			      || special_text_char == RC_EX_NAHDY_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3557:			      || special_text_char == RC_EX_MON_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3558:			      || special_text_char == RC_EX_NMON_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3559:			      || special_text_char == RC_EX_TUE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3560:			      || special_text_char == RC_EX_NTUE_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3561:			      || special_text_char == RC_EX_WED_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3562:			      || special_text_char == RC_EX_NWED_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3563:			      || special_text_char == RC_EX_THU_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3564:			      || special_text_char == RC_EX_NTHU_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3565:			      || special_text_char == RC_EX_FRI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3566:			      || special_text_char == RC_EX_NFRI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3567:			      || special_text_char == RC_EX_SAT_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3568:			      || special_text_char == RC_EX_NSAT_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3569:			      || special_text_char == RC_EX_SUN_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3570:			      || special_text_char == RC_EX_NSUN_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3571:			      || special_text_char == RC_EX_MON_2_THU_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3572:			      || special_text_char == RC_EX_NMON_2_THU_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3573:			      || special_text_char == RC_EX_MON_2_FRI_CHAR
branch  0 never executed
branch  1 never executed
    #####: 3574:			      || special_text_char == RC_EX_NMON_2_FRI_CHAR))
branch  0 never executed
branch  1 never executed
        -: 3575:		    {
    #####: 3576:		      if (strchr (date_text, special_text_char) ==
branch  0 never executed
branch  1 never executed
        -: 3577:			  (char *) NULL)
        -: 3578:			{
        -: 3579:			  /*
        -: 3580:			     Insert the `special_text_char' into `date_text'
        -: 3581:			     only in cases it is not already stored in there!
        -: 3582:			   */
    #####: 3583:			  *ptr_date_text++ = special_text_char;
    #####: 3584:			  *ptr_date_text = '\0';
        -: 3585:			}
    #####: 3586:		      j++;
        -: 3587:		    }
        -: 3588:		  else
        -: 3589:		    {
        -: 3590:		      /*
        -: 3591:		         Check for %shell_escape[TEXT-TILL-EOL] special text.
        -: 3592:		       */
    #####: 3593:		      if (rc_execute_command
branch  0 never executed
branch  1 never executed
    #####: 3594:			  && !got_command
branch  0 never executed
branch  1 never executed
    #####: 3595:			  && (special_text_char == RC_SHELL_ESC_CHAR))
branch  0 never executed
branch  1 never executed
        -: 3596:			{
        -: 3597:			  /*
        -: 3598:			     Buffer the starting position of the %shell_escape[TEXT-TILL-EOL]
        -: 3599:			     special text and process it as usual, so other special texts
        -: 3600:			     possibly contained are expanded!
        -: 3601:			   */
    #####: 3602:			  kpos = k;
    #####: 3603:			  kkpos = kk;
    #####: 3604:			  j_diff = j - j_buf - 1;
    #####: 3605:			  got_command = TRUE;
        -: 3606:			}
    #####: 3607:		      for (; j_buf < j; j_buf++, k++, kk++)
branch  0 never executed
branch  1 never executed
    #####: 3608:			s1[k] = s6[kk] = *(the_text + j_buf);
        -: 3609:		    }
        -: 3610:		}
        -: 3611:	    }
        -: 3612:	  else
    #####: 3613:	    ok = TRUE;
        -: 3614:	}
    #####: 3615:      if (line_number != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 3616:	{
        -: 3617:	  /*
        -: 3618:	     Check whether a period to exclude is marked in the maps and
        -: 3619:	     if so, avoid displaying the fixed date entry.
        -: 3620:	   */
    #####: 3621:	  if (ie_date_maps_set
branch  0 never executed
branch  1 never executed
    #####: 3622:	      && (*inclusive_date_map || *exclusive_date_map))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3623:	    {
    #####: 3624:	      i = day_of_year (d, m, year + incr_year - decr_year);
call    0 never executed
    #####: 3625:	      if (*inclusive_date_map && *exclusive_date_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3626:		{
    #####: 3627:		  if (!inclusive_date_map[i] || !exclusive_date_map[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3628:		    print_line = FALSE;
        -: 3629:		}
    #####: 3630:	      else if (*inclusive_date_map)
branch  0 never executed
branch  1 never executed
        -: 3631:		{
    #####: 3632:		  if (!inclusive_date_map[i])
branch  0 never executed
branch  1 never executed
    #####: 3633:		    print_line = FALSE;
        -: 3634:		}
    #####: 3635:	      else if (!exclusive_date_map[i])
branch  0 never executed
branch  1 never executed
    #####: 3636:		print_line = FALSE;
        -: 3637:	    }
        -: 3638:	  /*
        -: 3639:	     Check whether a weekday to exclude is marked in the maps and
        -: 3640:	     if so, avoid displaying the fixed date entry.
        -: 3641:	   */
    #####: 3642:	  if (print_line && *date_text)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3643:	    print_line =
call    0 never executed
    #####: 3644:	      rc_valid_day (date_text, d, m, year + incr_year - decr_year);
        -: 3645:	}
    #####: 3646:      if (print_line)
branch  0 never executed
branch  1 never executed
        -: 3647:	{
    #####: 3648:	  s1[k] = s6[kk] = '\0';
    #####: 3649:	  if (got_command)
branch  0 never executed
branch  1 never executed
        -: 3650:	    {
        -: 3651:	      /*
        -: 3652:	         Is it necessary to print any leading text before executing
        -: 3653:	         the %!shell_command[TEXT-TILL-EOL]?
        -: 3654:	       */
    #####: 3655:	      if (!kpos)
branch  0 never executed
branch  1 never executed
    #####: 3656:		print_line = FALSE;
        -: 3657:	      else
        -: 3658:		{
        -: 3659:		  /*
        -: 3660:		     Allow regular expression search only in the text which
        -: 3661:		     leads a later executed %!shell_command[TEXT-TILL-EOL].
        -: 3662:		   */
    #####: 3663:		  kk = kkpos;
    #####: 3664:		  s1[kpos] = s6[kk] = '\0';
        -: 3665:		}
        -: 3666:	    }
        -: 3667:	  /*
        -: 3668:	     If `--filter-text=PATTERN' is given and REGEX doesn't match
        -: 3669:	     the text of the fixed date, suppress this fixed date!
        -: 3670:	   */
    #####: 3671:	  if (print_line
branch  0 never executed
branch  1 never executed
    #####: 3672:	      && (rc_filter_text != (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 3673:	      && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
        -: 3674:	    {
        -: 3675:# if HAVE_GNU_RE_COMPILE_PATTERN
        -: 3676:	      print_line =
        -: 3677:		(Bool) (re_search
        -: 3678:			(&regpattern, s6, kk, 0, kk,
        -: 3679:			 (struct re_registers *) NULL) >= 0);
        -: 3680:# else /* !HAVE_GNU_RE_COMPILE_PATTERN */
        -: 3681:#  if HAVE_POSIX_REGCOMP
        -: 3682:	      static regmatch_t rm_dummy;
        -: 3683:#  endif
        -: 3684:
        -: 3685:
    #####: 3686:	      if (rc_ignore_case_flag)
branch  0 never executed
branch  1 never executed
        -: 3687:		{
        -: 3688:		  /*
        -: 3689:		     Set all letters of the fixed date text to lower-case.
        -: 3690:		   */
    #####: 3691:		  ptr_char = s6;
    #####: 3692:		  for (; *ptr_char; ptr_char++)
branch  0 never executed
branch  1 never executed
    #####: 3693:		    *ptr_char = (char) tolower (*ptr_char);
        -: 3694:		}
        -: 3695:#  if HAVE_POSIX_REGCOMP
        -: 3696:	      print_line =
        -: 3697:		(Bool) ! regexec (&regpattern, s6, 1, &rm_dummy, 0);
        -: 3698:#  endif
        -: 3699:#  if HAVE_RE_COMP
        -: 3700:	      print_line = (Bool) (re_exec (s6) == 1);
        -: 3701:#  endif
        -: 3702:# endif	/* !HAVE_GNU_RE_COMPILE_PATTERN */
    #####: 3703:	      if (rc_revert_match_flag)
branch  0 never executed
branch  1 never executed
    #####: 3704:		print_line = !print_line;
        -: 3705:	    }
        -: 3706:	  /*
        -: 3707:	     Is it necessary to execute the %!shell_command[TEXT-TILL-EOL] now?
        -: 3708:	   */
    #####: 3709:	  if (got_command
branch  0 never executed
branch  1 never executed
    #####: 3710:	      && ((print_line
branch  0 never executed
branch  1 never executed
    #####: 3711:		   && (kpos
branch  0 never executed
branch  1 never executed
    #####: 3712:		       || rc_filter_text != (char *) NULL))
branch  0 never executed
branch  1 never executed
    #####: 3713:		  || (!print_line
branch  0 never executed
branch  1 never executed
    #####: 3714:		      && (!kpos || rc_filter_text == (char *) NULL))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3715:	    {
        -: 3716:	      /*
        -: 3717:	         Execute the command.
        -: 3718:	       */
    #####: 3719:	      i = my_system (s1 + kpos + j_diff + 2);
call    0 never executed
    #####: 3720:	      if (warning_level >= 0)
branch  0 never executed
branch  1 never executed
        -: 3721:		{
    #####: 3722:		  if (i == -1)
branch  0 never executed
branch  1 never executed
        -: 3723:		    {
        -: 3724:		      /*
        -: 3725:		         Error, `system()' function failed.
        -: 3726:		       */
    #####: 3727:		      sprintf (s2,
        -: 3728:			       _
        -: 3729:			       ("Cannot execute command in file `%s'\nLine: %ld %s"),
        -: 3730:			       filename, line_number,
    #####: 3731:			       the_text + kpos + j_diff + 2);
    #####: 3732:		      print_text (stderr, s2);
call    0 never executed
    #####: 3733:		      if (warning_level >= WARN_LVL_MAX)
branch  0 never executed
branch  1 never executed
        -: 3734:			{
    #####: 3735:			  k = (int) strlen (s1 + kpos + j_diff + 2);
    #####: 3736:			  if ((Uint) k >= maxlen_max - 9)
branch  0 never executed
branch  1 never executed
    #####: 3737:			    resize_all_strings (k + 9, FALSE, __FILE__,
call    0 never executed
        -: 3738:						(long) __LINE__);
    #####: 3739:			  sprintf (s2, "system(%s)=", s1 + kpos + j_diff + 2);
    #####: 3740:			  my_error (ERR_INTERNAL_C_FUNC_FAILURE, __FILE__,
call    0 never executed
        -: 3741:				    ((long) __LINE__) - 22L, s2, i);
        -: 3742:			}
        -: 3743:		    }
        -: 3744:		  else
        -: 3745:		    {
        -: 3746:		      /*
        -: 3747:		         Report the exit code of command executed by the `system()' function.
        -: 3748:		       */
    #####: 3749:		      sprintf (s2,
        -: 3750:			       _
        -: 3751:			       ("Command executed (exit code=%d) in file `%s'\nLine %ld: %s"),
        -: 3752:			       i, filename, line_number,
    #####: 3753:			       s1 + kpos + j_diff + 2);
    #####: 3754:		      print_text (stderr, s2);
call    0 never executed
        -: 3755:		      /*
        -: 3756:		         The command executed by the `system()' function returned
        -: 3757:		         a value not equal zero so we terminate all further
        -: 3758:		         processing now with ERR_EXTERNAL_CMD_FAILURE exit status.
        -: 3759:		       */
    #####: 3760:		      if (i && (warning_level >= WARN_LVL_MAX))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3761:			my_exit (ERR_EXTERNAL_CMD_FAILURE);
call    0 never executed
        -: 3762:		    }
        -: 3763:		}
    #####: 3764:	      shell_escape_done = TRUE;
        -: 3765:	    }
    #####: 3766:	  if (print_line && highlight_flag && (hls1_set || hls2_set))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 3767:	    {
        -: 3768:	      /*
        -: 3769:	         Hmm, seems the user forgot to give the right %highlighting
        -: 3770:	         special text for disabling a highlighting sequence already
        -: 3771:	         enabled, let's do this for him/her/it/PER/or...  hehehe!
        -: 3772:	       */
    #####: 3773:	      if (hls1_set)
branch  0 never executed
branch  1 never executed
        -: 3774:		{
    #####: 3775:		  if (ehls1e.len == 1)
branch  0 never executed
branch  1 never executed
        -: 3776:		    {
    #####: 3777:		      if ((Uint) k >= maxlen_max - (Uint) len_fn - 1)
branch  0 never executed
branch  1 never executed
    #####: 3778:			resize_all_strings (maxlen_max << 1, FALSE, __FILE__,
call    0 never executed
        -: 3779:					    (long) __LINE__);
        -: 3780:		    }
        -: 3781:		  else
        -: 3782:		    {
    #####: 3783:		      while ((Uint) k >=
branch  0 never executed
branch  1 never executed
    #####: 3784:			     maxlen_max - (Uint) len_fn - (ehls1e.len + 1))
    #####: 3785:			resize_all_strings (maxlen_max << 1, FALSE, __FILE__,
call    0 never executed
        -: 3786:					    (long) __LINE__);
        -: 3787:		    }
    #####: 3788:		  strcat (s1, ehls1e.seq);
        -: 3789:		}
        -: 3790:	      else
        -: 3791:		{
    #####: 3792:		  if (ehls2e.len == 1)
branch  0 never executed
branch  1 never executed
        -: 3793:		    {
    #####: 3794:		      if ((Uint) k >= maxlen_max - (Uint) len_fn - 1)
branch  0 never executed
branch  1 never executed
    #####: 3795:			resize_all_strings (maxlen_max << 1, FALSE, __FILE__,
call    0 never executed
        -: 3796:					    (long) __LINE__);
        -: 3797:		    }
        -: 3798:		  else
        -: 3799:		    {
    #####: 3800:		      while ((Uint) k >=
branch  0 never executed
branch  1 never executed
    #####: 3801:			     maxlen_max - (Uint) len_fn - (ehls2e.len + 1))
    #####: 3802:			resize_all_strings (maxlen_max << 1, FALSE, __FILE__,
call    0 never executed
        -: 3803:					    (long) __LINE__);
        -: 3804:		    }
    #####: 3805:		  strcat (s1, ehls2e.seq);
        -: 3806:		}
        -: 3807:	    }
        -: 3808:	}
    #####: 3809:      if (print_line)
branch  0 never executed
branch  1 never executed
        -: 3810:	{
    #####: 3811:	  if (rc_enable_fn_flag && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3812:	    {
    #####: 3813:	      sprintf (s6, "%0*d%02d%02d %c%s#%05ld%c",
    #####: 3814:		       len_year_max, year + incr_year - decr_year, m, d,
        -: 3815:		       PSEUDO_QUOTE, filename, line_number, PSEUDO_QUOTE);
    #####: 3816:	      if (rc_suppr_text_part_flag)
branch  0 never executed
branch  1 never executed
    #####: 3817:		j = strlen (s6);
    #####: 3818:	      if (*s1)
branch  0 never executed
branch  1 never executed
        -: 3819:		{
    #####: 3820:		  strcat (s6, " ");
    #####: 3821:		  strcat (s6, s1);
        -: 3822:		}
        -: 3823:	    }
        -: 3824:	  else
        -: 3825:	    {
    #####: 3826:	      sprintf (s6, "%0*d%02d%02d %s",
    #####: 3827:		       len_year_max, year + incr_year - decr_year, m, d, s1);
    #####: 3828:	      if (rc_suppr_text_part_flag)
branch  0 never executed
branch  1 never executed
    #####: 3829:		j = len_year_max + 4;
        -: 3830:	    }
        -: 3831:	  /*
        -: 3832:	     Now compute whether a filler text for a week entry is needed:
        -: 3833:	     Week 51/0   == 7 chars text "|51/0| "  -> no filler text.
        -: 3834:	     Week 52/0   == 7 chars text "|52/1| "  -> no filler text.
        -: 3835:	     Week 53/0   == 7 chars text "|53/0| "  -> no filler text.
        -: 3836:	     Week 53/1   == 7 chars text "|53/1| "  -> no filler text.
        -: 3837:	     Week 1...52 == 5 chars text "|nn| "    -> 2 chars filler text.
        -: 3838:	   */
    #####: 3839:	  if (rc_week_number_flag && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3840:	    if (week_number
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3841:		(d, m, year + incr_year - decr_year, iso_week_number,
        -: 3842:		 start_day) <= 0)
    #####: 3843:	      len_fil_wt = 2;
        -: 3844:	  /*
        -: 3845:	     Now place the fixed date into the table:
        -: 3846:	     Only if the previous fixed date is equal the actual fixed date,
        -: 3847:	     avoid insertation of actual fixed date!
        -: 3848:	   */
    #####: 3849:	  i = 1;
    #####: 3850:	  if (*rc_elems && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3851:	    i = strcmp (s6, rc_elems_table[*rc_elems - 1]);
        -: 3852:	  /*
        -: 3853:	     Store the constructed "raw" line in `rc_elems_table[]'.
        -: 3854:	   */
    #####: 3855:	  if (i)
branch  0 never executed
branch  1 never executed
        -: 3856:	    {
    #####: 3857:	      if ((Uint) * rc_elems >= rc_elems_max)
branch  0 never executed
branch  1 never executed
        -: 3858:		{
        -: 3859:		  /*
        -: 3860:		     Resize the `rc_elems_table[]' table.
        -: 3861:		   */
    #####: 3862:		  rc_elems_max <<= 1;
    #####: 3863:		  if (rc_elems_max * sizeof (char *) > testval)
branch  0 never executed
branch  1 never executed
    #####: 3864:		    rc_elems_max--;
    #####: 3865:		  rc_elems_table =
    #####: 3866:		    (char **) my_realloc ((VOID_PTR) rc_elems_table,
call    0 never executed
    #####: 3867:					  rc_elems_max * sizeof (char *),
        -: 3868:					  ERR_NO_MEMORY_AVAILABLE, __FILE__,
        -: 3869:					  ((long) __LINE__) - 3L,
        -: 3870:					  "rc_elems_table[rc_elems_max]",
        -: 3871:					  rc_elems_max);
        -: 3872:		}
    #####: 3873:	      if (rc_suppr_text_part_flag && (line_number != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3874:		{
    #####: 3875:		  rc_elems_table[*rc_elems] = (char *) my_malloc (j + 1,
call    0 never executed
        -: 3876:								  ERR_NO_MEMORY_AVAILABLE,
        -: 3877:								  __FILE__,
        -: 3878:								  ((long)
        -: 3879:								   __LINE__) -
        -: 3880:								  2L,
        -: 3881:								  "rc_elems_table[rc_elems]",
        -: 3882:								  *rc_elems);
    #####: 3883:		  s6[j] = '\0';
        -: 3884:		}
        -: 3885:	      else
    #####: 3886:		rc_elems_table[*rc_elems] =
    #####: 3887:		  (char *) my_malloc (strlen (s6) + 1,
call    0 never executed
        -: 3888:				      ERR_NO_MEMORY_AVAILABLE, __FILE__,
        -: 3889:				      ((long) __LINE__) - 2L,
        -: 3890:				      "rc_elems_table[rc_elems]", *rc_elems);
    #####: 3891:	      strcpy (rc_elems_table[(*rc_elems)++], s6);
        -: 3892:	    }
        -: 3893:	}
        -: 3894:      /*
        -: 3895:         Do we have to construct a 1x2 production of the line?
        -: 3896:       */
    #####: 3897:      if (print_twice > 1)
branch  0 never executed
branch  1 never executed
        -: 3898:	{
    #####: 3899:	  if (is_2easter)
branch  0 never executed
branch  1 never executed
        -: 3900:	    {
        -: 3901:	      /*
        -: 3902:	         Precalculate the next date relative to Easter Sunday's date.
        -: 3903:	       */
    #####: 3904:	      incr_year = 1;
    #####: 3905:	      precomp_date (hn, hwd, &d, &m, year + incr_year, EAster);
call    0 never executed
        -: 3906:	    }
    #####: 3907:	  else if (is_2dvar)
branch  0 never executed
branch  1 never executed
        -: 3908:	    {
        -: 3909:	      /*
        -: 3910:	         Precalculate the next date relative to date variable's date and
        -: 3911:	         use original date of DVAR, i.e. use buffer of day and month.
        -: 3912:	       */
    #####: 3913:	      incr_year = 1;
    #####: 3914:	      if (islower (hc))
branch  0 never executed
branch  1 never executed
    #####: 3915:		(void) precomp_date (hn, hwd, &d_buf, &m_buf,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3916:				     year + incr_year,
    #####: 3917:				     (hc == RC_TODAY_CHAR) ? TOday : DVar);
        -: 3918:	      else
        -: 3919:		{
    #####: 3920:		  y = year + incr_year;
    #####: 3921:		  (void) precomp_nth_wd (hn, hwd, &hn, &d_buf, &m_buf, &y,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3922:					 (hc == 'D') ? DAy : WEek);
        -: 3923:		}
    #####: 3924:	      d = d_buf;
    #####: 3925:	      m = m_buf;
        -: 3926:	    }
        -: 3927:	  else
        -: 3928:	    /*
        -: 3929:	       Compute tomorrow's date.
        -: 3930:	     */
    #####: 3931:	    (void) next_date (&d, &m, &year);
call    0 never executed
        -: 3932:	  /*
        -: 3933:	     If the "new" precomputed date has left the year bounds,
        -: 3934:	     we have to exit the loop!
        -: 3935:	   */
    #####: 3936:	  if (year + incr_year > YEAR_MAX)
branch  0 never executed
branch  1 never executed
    #####: 3937:	    print_twice--;
        -: 3938:	  else
        -: 3939:	    /*
        -: 3940:	       Force the second processing of the line!
        -: 3941:	     */
    #####: 3942:	    print_line = TRUE;
        -: 3943:	}
        -: 3944:    }
    #####: 3945:  while (--print_twice);
branch  0 never executed
branch  1 never executed
    #####: 3946:  year = tmp_year;
    #####: 3947:}
        -: 3948:#endif /* USE_RC */
