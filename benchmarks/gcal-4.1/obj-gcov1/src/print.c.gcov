        -:    0:Source:../../src/print.c
        -:    0:Programs:20
        -:    1:/*!
        -:    2:*  \file print.c
        -:    3:*  \brief Create, construct and print the calendar sheet(s).
        -:    4:*/
        -:    5:/*
        -:    6:*  Copyright (c) 1994, 95, 96, 1997, 2000, 2011 Thomas Esken
        -:    7:*  Copyright (c) 2010, 2011, 2013 Free Software Foundation, Inc.
        -:    8:*
        -:    9:*  This software doesn't claim completeness, correctness or usability.
        -:   10:*  On principle I will not be liable for ANY damages or losses (implicit
        -:   11:*  or explicit), which result from using or handling my software.
        -:   12:*  If you use this software, you agree without any exception to this
        -:   13:*  agreement, which binds you LEGALLY !!
        -:   14:*
        -:   15:*  This program is free software; you can redistribute it and/or modify
        -:   16:*  it under the terms of the `GNU General Public License' as published by
        -:   17:*  the `Free Software Foundation'; either version 3, or (at your option)
        -:   18:*  any later version.
        -:   19:*
        -:   20:*  You should have received a copy of the `GNU General Public License'
        -:   21:*  along with this program; if not, write to the:
        -:   22:*
        -:   23:*/
        -:   24:
        -:   25:
        -:   26:/*
        -:   27:*  Include header files.
        -:   28:*/
        -:   29:#include "tailor.h"
        -:   30:#include "common.h"
        -:   31:#if USE_RC
        -:   32:# include "rc-defs.h"
        -:   33:#endif /* USE_RC */
        -:   34:#include "globals.h"
        -:   35:#include "hd-defs.h"
        -:   36:#include "hd-use.h"
        -:   37:#if USE_RC
        -:   38:# include "rc-use.h"
        -:   39:#endif /* USE_RC */
        -:   40:#include "tty.h"
        -:   41:#include "utils.h"
        -:   42:#include "print.h"
        -:   43:
        -:   44:
        -:   45:
        -:   46:/*
        -:   47:*  static functions prototypes.
        -:   48:*/
        -:   49:__BEGIN_DECLARATIONS
        -:   50:/*
        -:   51:************************************************** Defined in `print.c'.
        -:   52:*/
        -:   53:static void fill_year_vector __P_ ((int year));
        -:   54:static Bool print_unhighlighted_date __P_ ((Bool marker_flag));
        -:   55:static Bool
        -:   56:  print_highlighted_date __P_ ((const Bool last_item,
        -:   57:				const Bool marker_flag,
        -:   58:				const char *hls_start,
        -:   59:				const int hls_slen,
        -:   60:				const char *hls_end, const int hls_elen));
        -:   61:__END_DECLARATIONS
        -:   62:/*
        -:   63:*  static variables definitions.
        -:   64:*/
        -:   65:/*! Standard or special year dates. */
        -:   66:static int year_vector[VEC_ELEMS];
        -:   67:
        -:   68:/*! Special year dates only. */
        -:   69:static int special_vector[VEC_ELEMS];
        -:   70:
        -:   71:
        -:   72:
        -:   73:/*
        -:   74:*  Function implementations.
        -:   75:*/
        -:   76:void
function print_calendar called 1 returned 100% blocks executed 14%
        1:   77:print_calendar ()
        -:   78:/*!
        -:   79:   Prints one or more single month/year calendar(s).
        -:   80:*/
        -:   81:{
        1:   82:  auto Slint amount = 0L;
        -:   83:  auto Slint count;
        1:   84:  register int tmp_ad = act_day;
        -:   85:  register int i;
        -:   86:  register int j;
        -:   87:  register int n;
        -:   88:  register int lym;
        -:   89:  register int d;
        -:   90:  register int m;
        -:   91:  register int mm;
        -:   92:  register int yy;
        1:   93:  register int outer_end = (special_calsheet_flag) ? MONTH_COLS : DAY_MAX;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   94:  register int inner_end;
        1:   95:  register int blanks_between = (special_calsheet_flag) ? 5 : 2;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   96:  register int hday;
        -:   97:  auto int hmonth;
        -:   98:  auto int this_day;
        -:   99:  auto int this_month;
        1:  100:  auto Bool is_marked = FALSE;
        1:  101:  auto Bool marker_flag = FALSE;
        1:  102:  auto Bool y_backwards = FALSE;
        1:  103:  auto Bool m_backwards = FALSE;
        -:  104:
        -:  105:
        1:  106:  if (cal_special_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  107:    act_day = day_of_year (tmp_ad, act_month, act_year);
call    0 never executed
        -:  108:  /*
        -:  109:     Evaluate the entries of `month_list':
        -:  110:     Set the actual list/range/fiscal year mode and
        -:  111:     initialize the controlling variables of the main loop.
        -:  112:   */
        1:  113:  if (is_special_range || is_multi_range)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:    {
    #####:  115:      y_backwards = (Bool) ((*month_list).ml_year > month_list[1].ml_year);
    #####:  116:      if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  117:	amount = (*month_list).ml_year - month_list[1].ml_year + 1L;
        -:  118:      else
    #####:  119:	amount = month_list[1].ml_year - (*month_list).ml_year + 1L;
    #####:  120:      if (is_multi_range)
branch  0 never executed
branch  1 never executed
        -:  121:	{
    #####:  122:	  m_backwards =
    #####:  123:	    (Bool) ((*month_list).ml_month > month_list[1].ml_month);
    #####:  124:	  if (m_backwards)
branch  0 never executed
branch  1 never executed
    #####:  125:	    i = (*month_list).ml_month - month_list[1].ml_month + 1;
        -:  126:	  else
    #####:  127:	    i = month_list[1].ml_month - (*month_list).ml_month + 1;
    #####:  128:	  amount *= (Slint) i;
        -:  129:
        -:  130:	}
    #####:  131:      month = (*month_list).ml_month;
    #####:  132:      year = (*month_list).ml_year;
        -:  133:    }
        1:  134:  else if (!is_ext_range)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  135:    for (i = 0; month_list[i].ml_month; i++)
branch  0 taken 50%
branch  1 taken 50%
        -:  136:      {
        1:  137:	if (!month_list[i].ml_year)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  138:	  {
    #####:  139:	    if (year != act_year)
branch  0 never executed
branch  1 never executed
    #####:  140:	      month_list[i].ml_year = year;
        -:  141:	    else
    #####:  142:	      month_list[i].ml_year = act_year;
        -:  143:	  }
        1:  144:	amount++;
        -:  145:      }
        -:  146:  else
        -:  147:    {
    #####:  148:      if (!is_ext_year)
branch  0 never executed
branch  1 never executed
        -:  149:	{
    #####:  150:	  if (!(*month_list).ml_year)
branch  0 never executed
branch  1 never executed
    #####:  151:	    (*month_list).ml_year = act_year;
    #####:  152:	  if (!month_list[1].ml_year)
branch  0 never executed
branch  1 never executed
    #####:  153:	    month_list[1].ml_year = act_year;
    #####:  154:	  y_backwards = (Bool) ((*month_list).ml_year > month_list[1].ml_year
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  155:				||
    #####:  156:				(((*month_list).ml_year ==
    #####:  157:				  month_list[1].ml_year)
    #####:  158:				 && ((*month_list).ml_month >
branch  0 never executed
branch  1 never executed
    #####:  159:				     month_list[1].ml_month)));
    #####:  160:	  if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  161:	    amount =
    #####:  162:	      ((((*month_list).ml_year - 1L) -
    #####:  163:		month_list[1].ml_year) * MONTH_MAX) + (*month_list).ml_month +
    #####:  164:	      ((MONTH_MAX - month_list[1].ml_month) + 1L);
        -:  165:	  else
    #####:  166:	    amount =
    #####:  167:	      (((month_list[1].ml_year - 1L) -
    #####:  168:		(*month_list).ml_year) * MONTH_MAX) + month_list[1].ml_month +
    #####:  169:	      ((MONTH_MAX - (*month_list).ml_month) + 1L);
    #####:  170:	  month = (*month_list).ml_month;
    #####:  171:	  year = (*month_list).ml_year;
        -:  172:	}
        -:  173:      else
        -:  174:	{
    #####:  175:	  if (is_fiscal_year)
branch  0 never executed
branch  1 never executed
        -:  176:	    {
    #####:  177:	      y_backwards =
    #####:  178:		(Bool) ((*month_list).ml_year > month_list[1].ml_year);
    #####:  179:	      if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  180:		amount = ((*month_list).ml_year - month_list[1].ml_year) + 1L;
        -:  181:	      else
    #####:  182:		amount = (month_list[1].ml_year - (*month_list).ml_year) + 1L;
    #####:  183:	      year = (*month_list).ml_year;
        -:  184:	    }
        -:  185:	  else
        -:  186:	    {
    #####:  187:	      y_backwards =
    #####:  188:		(Bool) ((*month_list).ml_month > month_list[1].ml_month);
    #####:  189:	      if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  190:		amount =
    #####:  191:		  ((*month_list).ml_month - month_list[1].ml_month) + 1L;
        -:  192:	      else
    #####:  193:		amount =
    #####:  194:		  (month_list[1].ml_month - (*month_list).ml_month) + 1L;
    #####:  195:	      year = (*month_list).ml_month;
        -:  196:	    }
        -:  197:	}
        -:  198:    }
        1:  199:  if (is_fiscal_year)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  200:    fiscal_month = (*month_list).ml_month;
        1:  201:  if (!fiscal_month)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  202:    fiscal_month = act_month;
        1:  203:  if (!amount)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  204:    amount++;
        -:  205:#if USE_RC
        -:  206:  /*
        -:  207:     A `-cNw' option and no explicit date given:
        -:  208:     Set the correct month/year to display.
        -:  209:   */
        1:  210:  if (rc_week_year_flag && !rc_period_list && !is_date_given)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  211:    {
    #####:  212:      i = weekno2doy (rc_period, act_year, iso_week_number, start_day);
call    0 never executed
    #####:  213:      if (i != -WEEK_MAX)
branch  0 never executed
branch  1 never executed
        -:  214:	{
    #####:  215:	  if (i < DAY_MIN || i + DAY_MAX - 1 > DAY_LAST + is_leap_year)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  216:	    {
    #####:  217:	      is_2month_mode = is_fiscal_year = TRUE;
    #####:  218:	      (*month_list).ml_month = fiscal_month = MONTH_MAX;
    #####:  219:	      if (i < DAY_MIN)
branch  0 never executed
branch  1 never executed
    #####:  220:		(*month_list).ml_year = --year;
        -:  221:	    }
        -:  222:	  else
        -:  223:	    {
    #####:  224:	      (void) doy2date (i, is_leap_year, &day, &month);
call    0 never executed
    #####:  225:	      m = month;
    #####:  226:	      (void) doy2date (i + DAY_MAX - 1, is_leap_year, &day, &month);
call    0 never executed
    #####:  227:	      if (m != month)
branch  0 never executed
branch  1 never executed
        -:  228:		{
    #####:  229:		  is_2month_mode = is_fiscal_year = TRUE;
    #####:  230:		  month = fiscal_month = m;
        -:  231:		}
        -:  232:	      else
    #####:  233:		is_1month_mode = TRUE;
    #####:  234:	      (*month_list).ml_month = month;
        -:  235:	    }
    #####:  236:	  if (is_2month_mode)
branch  0 never executed
branch  1 never executed
        -:  237:	    {
    #####:  238:	      if (cal_both_dates_flag)
branch  0 never executed
branch  1 never executed
        -:  239:		{
    #####:  240:		  out_rows = B2_OUT_ROWS;
    #####:  241:		  out_cols = B2_OUT_COLS;
        -:  242:		}
        -:  243:	      else
        -:  244:		{
    #####:  245:		  out_rows = A2_OUT_ROWS;
    #####:  246:		  out_cols = A2_OUT_COLS;
        -:  247:		}
        -:  248:	    }
        -:  249:	}
        -:  250:    }
        -:  251:#endif
        -:  252:  /*
        -:  253:     All necessary global initializations done, so let's enter the loop.
        -:  254:   */
        2:  255:  for (count = 0L; count < amount; count++)
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:  256:    {
        -:  257:      /*
        -:  258:         If the loop must be processed multiple, we have to
        -:  259:         re-initialize the affected variables according to actual mode.
        -:  260:       */
        1:  261:      mm = yy = 0;
        1:  262:      if (!is_ext_list
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  263:	  && !is_ext_range && !is_special_range && !is_multi_range)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        -:  264:	{
        -:  265:	  /*
        -:  266:	     If a month calendar of only the current year is wanted
        -:  267:	     resp., a year calendar of only the current year is wanted:
        -:  268:	     Initialize the touched variables.
        -:  269:	   */
        1:  270:	  month = month_list[(int) count].ml_month;
        1:  271:	  if (month_list[(int) count].ml_year)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  272:	    year = month_list[(int) count].ml_year;
        1:  273:	  if (count)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  274:	    yy = year;
        -:  275:#if USE_RC
        -:  276:	  /*
        -:  277:	     Modify the actual date.
        -:  278:	   */
        2:  279:	  if (rc_period_flag
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  280:	      && (rc_forwards_flag
branch  0 never executed
branch  1 never executed
    #####:  281:		  || rc_backwards_flag) && !rc_period_list && !is_date_given)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  282:	    {
    #####:  283:	      if (cal_special_flag)
branch  0 never executed
branch  1 never executed
    #####:  284:		i = act_day;
        -:  285:	      else
    #####:  286:		i = day_of_year (tmp_ad, act_month, act_year);
call    0 never executed
    #####:  287:	      if (rc_forwards_flag)
branch  0 never executed
branch  1 never executed
        -:  288:		{
        -:  289:		  /*
        -:  290:		     Correction in case date occurs during Gregorian Reformation period.
        -:  291:		   */
    #####:  292:		  if ((act_year == greg->year)
branch  0 never executed
branch  1 never executed
    #####:  293:		      && (i <
branch  0 never executed
branch  1 never executed
    #####:  294:			  day_of_year (greg->first_day, greg->month,
call    0 never executed
    #####:  295:				       greg->year))
    #####:  296:		      && (i + rc_period >=
branch  0 never executed
branch  1 never executed
    #####:  297:			  day_of_year (greg->first_day, greg->month,
call    0 never executed
    #####:  298:				       greg->year)))
    #####:  299:		    i += (greg->last_day - greg->first_day + 1);
    #####:  300:		  i += rc_period;
        -:  301:		}
        -:  302:	      else
        -:  303:		{
        -:  304:		  /*
        -:  305:		     Correction in case date occurs during Gregorian Reformation period.
        -:  306:		   */
    #####:  307:		  if ((act_year == greg->year)
branch  0 never executed
branch  1 never executed
    #####:  308:		      && (i >
branch  0 never executed
branch  1 never executed
    #####:  309:			  day_of_year (greg->last_day, greg->month,
call    0 never executed
    #####:  310:				       greg->year))
    #####:  311:		      && (i - rc_period <=
branch  0 never executed
branch  1 never executed
    #####:  312:			  day_of_year (greg->last_day, greg->month,
call    0 never executed
    #####:  313:				       greg->year)))
    #####:  314:		    i -= (greg->last_day - greg->first_day + 1);
    #####:  315:		  i -= rc_period;
        -:  316:		}
    #####:  317:	      if ((i > 0) && (i < DAY_LAST + is_leap_year + 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  318:		{
    #####:  319:		  (void) doy2date (i, is_leap_year, &day, &month);
call    0 never executed
    #####:  320:		  act_month = month;
    #####:  321:		  if (cal_special_flag)
branch  0 never executed
branch  1 never executed
    #####:  322:		    act_day = day_of_year (day, month, act_year);
call    0 never executed
        -:  323:		  else
    #####:  324:		    act_day = day;
        -:  325:		}
        -:  326:	    }
        -:  327:#endif /* USE_RC */
        -:  328:	}
    #####:  329:      else if (is_ext_list)
branch  0 never executed
branch  1 never executed
        -:  330:	{
    #####:  331:	  if (!is_ext_year)
branch  0 never executed
branch  1 never executed
        -:  332:	    {
    #####:  333:	      month = month_list[(int) count].ml_month;
    #####:  334:	      if (count && (year == month_list[(int) count].ml_year))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  335:		yy = year;
        -:  336:	      else
    #####:  337:		year = month_list[(int) count].ml_year;
        -:  338:	    }
        -:  339:	  else
        -:  340:	    {
    #####:  341:	      month = 0;
    #####:  342:	      if (is_fiscal_year)
branch  0 never executed
branch  1 never executed
        -:  343:		{
    #####:  344:		  if (count
branch  0 never executed
branch  1 never executed
    #####:  345:		      && (fiscal_month == month_list[(int) count].ml_month)
branch  0 never executed
branch  1 never executed
    #####:  346:		      && (year == month_list[(int) count].ml_year))
branch  0 never executed
branch  1 never executed
        -:  347:		    {
    #####:  348:		      mm = fiscal_month;
    #####:  349:		      yy = year;
        -:  350:		    }
        -:  351:		  else
        -:  352:		    {
    #####:  353:		      fiscal_month = month_list[(int) count].ml_month;
    #####:  354:		      year = month_list[(int) count].ml_year;
        -:  355:		    }
        -:  356:		}
        -:  357:	      else
        -:  358:		{
    #####:  359:		  if (count && (year == month_list[(int) count].ml_month))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  360:		    yy = year;
        -:  361:		  else
    #####:  362:		    year = month_list[(int) count].ml_month;
        -:  363:		}
        -:  364:	    }
        -:  365:	}
    #####:  366:      else if ((is_ext_range || is_special_range || is_multi_range) && count)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -:  367:	{
    #####:  368:	  if (!is_special_range && !is_multi_range && !is_ext_year)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  369:	    {
    #####:  370:	      yy = year;
    #####:  371:	      if (y_backwards)
branch  0 never executed
branch  1 never executed
        -:  372:		{
    #####:  373:		  month--;
    #####:  374:		  if (month < MONTH_MIN)
branch  0 never executed
branch  1 never executed
    #####:  375:		    month = MONTH_MAX, year--;
        -:  376:		}
        -:  377:	      else
        -:  378:		{
    #####:  379:		  month++;
    #####:  380:		  if (month > MONTH_MAX)
branch  0 never executed
branch  1 never executed
    #####:  381:		    month = MONTH_MIN, year++;
        -:  382:		}
        -:  383:	    }
        -:  384:	  else
        -:  385:	    {
    #####:  386:	      if (!is_special_range && !is_multi_range)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  387:		month = 0;
    #####:  388:	      if (is_multi_range)
branch  0 never executed
branch  1 never executed
        -:  389:		{
    #####:  390:		  if (m_backwards)
branch  0 never executed
branch  1 never executed
        -:  391:		    {
    #####:  392:		      month--;
    #####:  393:		      if (month < month_list[1].ml_month)
branch  0 never executed
branch  1 never executed
        -:  394:			{
    #####:  395:			  month = (*month_list).ml_month;
    #####:  396:			  if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  397:			    year--;
        -:  398:			  else
    #####:  399:			    year++;
        -:  400:			}
        -:  401:		      else
    #####:  402:			yy = year;
        -:  403:		    }
        -:  404:		  else
        -:  405:		    {
    #####:  406:		      month++;
    #####:  407:		      if (month > month_list[1].ml_month)
branch  0 never executed
branch  1 never executed
        -:  408:			{
    #####:  409:			  month = (*month_list).ml_month;
    #####:  410:			  if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  411:			    year--;
        -:  412:			  else
    #####:  413:			    year++;
        -:  414:			}
        -:  415:		      else
    #####:  416:			yy = year;
        -:  417:		    }
        -:  418:		}
    #####:  419:	      else if (y_backwards)
branch  0 never executed
branch  1 never executed
    #####:  420:		year--;
        -:  421:	      else
    #####:  422:		year++;
        -:  423:	    }
        -:  424:	}
    #####:  425:      else if (!is_special_range && !is_multi_range && is_ext_year)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  426:	month = 0;
        1:  427:      if (yy != year || (is_fiscal_year && (mm != fiscal_month)))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  428:	{
        1:  429:	  is_leap_year = (days_of_february (year) == 29);
call    0 returned 100%
        1:  430:	  if (count)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  431:	    for (i = 0; i < VEC_ELEMS; i++)
branch  0 never executed
branch  1 never executed
    #####:  432:	      year_vector[i] = special_vector[i] = 0;
        -:  433:	  /*
        -:  434:	     Build the year calendar data structure.
        -:  435:	   */
        1:  436:	  fill_year_vector (year);
call    0 returned 100%
        -:  437:	  /*
        -:  438:	     Get the dates of the eternal holidays;
        -:  439:	     used for highlighting the calendar.
        -:  440:	   */
        2:  441:	  if (((year == EASTER_MIN - 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  442:	       && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
        1:  443:	      || ((year >= EASTER_MIN) && (year <= EASTER_MAX)))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  444:	    print_all_holidays (TRUE, TRUE);
call    0 returned 100%
    #####:  445:	  else if (count)
branch  0 never executed
branch  1 never executed
    #####:  446:	    for (i = 0; i < HD_MAX; i++)
branch  0 never executed
branch  1 never executed
    #####:  447:	      hd_ldays[i] = '\0';
        -:  448:	}
        -:  449:      else
        -:  450:	/*
        -:  451:	   Get the actual dates of holidays; used for highlighting the calendar.
        -:  452:	 */
    #####:  453:      if (((year == EASTER_MIN - 1)
branch  0 never executed
branch  1 never executed
    #####:  454:	     && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
    #####:  455:	    || ((year >= EASTER_MIN) && (year <= EASTER_MAX)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  456:	print_all_holidays (TRUE, TRUE);
call    0 never executed
        1:  457:      *s1 = '\0';
        -:  458:      /*
        -:  459:         All necessary initializations done.
        -:  460:         So print a month calendar / year calendar of the required year.
        -:  461:       */
        1:  462:      if (!is_ext_year && !is_fiscal_year
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  463:#if USE_RC
        1:  464:	  && !is_2month_mode
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  465:#endif
        1:  466:	  && (month
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  467:	      || is_ext_list
branch  0 never executed
branch  1 never executed
    #####:  468:	      || is_ext_range || is_special_range || is_multi_range))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  469:	{
        -:  470:	  /*
        -:  471:	     If no explicit request for suppressing the calendar sheet is given
        -:  472:	     in the command line (`-u' option), create it!  (What else is the
        -:  473:	     expense in this source file good for?)
        -:  474:	   */
        1:  475:	  if (!suppr_cal_flag)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  476:	    {
        1:  477:	      lym = len_year_max;
        1:  478:	      if (transform_year)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  479:		{
    #####:  480:		  n = year - transform_year;
    #####:  481:		  if ((n >= 0) && (transform_year > 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  482:		    n++;
    #####:  483:		  if (abs (n) > YEAR_MAX)
branch  0 never executed
branch  1 never executed
    #####:  484:		    lym++;
        -:  485:		}
        -:  486:	      else
        1:  487:		n = year;
        -:  488:	      /*
        -:  489:	         Print the month calendar sheet and if needed the fixed dates,
        -:  490:	         which are related to the month and the eternal holidays
        -:  491:	         related to the month.
        -:  492:	       */
        1:  493:	      print_text (stdout, s1);
call    0 returned 100%
        1:  494:	      if (special_calsheet_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  495:		{
        -:  496:		  /*
        -:  497:		     Print the month calendar in the special format:
        -:  498:		     Initialize the terminating value of the inner loop.
        -:  499:		   */
    #####:  500:		  inner_end = DAY_MAX;
        -:  501:		  /*
        -:  502:		     Print the month header in centered manner.
        -:  503:		   */
    #####:  504:		  if (use_year_zeroleaded)
branch  0 never executed
branch  1 never executed
        -:  505:		    {
    #####:  506:		      i = ((format_len * DAY_MAX) >> 1)
    #####:  507:			+ ((strlen (month_name (month)) + lym + 1) >> 1) -
call    0 never executed
        -:  508:			lym;
    #####:  509:		      sprintf (s1, "%*s %0*d", i, month_name (month), lym, n);
call    0 never executed
        -:  510:		    }
        -:  511:		  else
        -:  512:		    {
    #####:  513:		      sprintf (s1, "%d", n);
    #####:  514:		      d = (int) strlen (s1);
    #####:  515:		      i = ((format_len * DAY_MAX) >> 1)
    #####:  516:			+ ((strlen (month_name (month)) + d + 1) >> 1) - d;
call    0 never executed
    #####:  517:		      sprintf (s1, "%*s %d", i, month_name (month), n);
call    0 never executed
        -:  518:		    }
    #####:  519:		  print_text (stdout, s1);
call    0 never executed
        -:  520:		  /*
        -:  521:		     Print the day names.
        -:  522:		   */
    #####:  523:		  for (i = DAY_MIN; i <= DAY_MAX; i++)
branch  0 never executed
branch  1 never executed
        -:  524:		    {
    #####:  525:		      if (use_short3_day_name
branch  0 never executed
branch  1 never executed
    #####:  526:			  && (format_len > FORMAT_LEN_MIN))
branch  0 never executed
branch  1 never executed
    #####:  527:			sprintf (s2, "%*s", format_len,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  528:				 short3_day_name (SDAY (i, start_day)));
        -:  529:		      else
    #####:  530:			sprintf (s2, "%*s", format_len,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  531:				 short_day_name (SDAY (i, start_day)));
    #####:  532:		      strcat (s1, s2);
        -:  533:		    }
    #####:  534:		  if (cal_with_week_number)
branch  0 never executed
branch  1 never executed
        -:  535:		    {
        -:  536:		      /*
        -:  537:		         The short week text which should be a proper abbreviation
        -:  538:		         of "calendar week", consists of 2 letters and is
        -:  539:		         separated by one space character of the month calendar.
        -:  540:		       */
        -:  541:		      /*
        -:  542:		       *** Translators, please translate this as a fixed 2-character text.
        -:  543:		       *** This text should be a proper abbreviation of "Calendar Week".
        -:  544:		       */
    #####:  545:		      sprintf (s2, " %2s", _("CW"));
    #####:  546:		      strcat (s1, s2);
        -:  547:		    }
        -:  548:		}
        -:  549:	      else
        -:  550:		{
        -:  551:		  /*
        -:  552:		     Print the month calendar in the standard format:
        -:  553:		     Initialize the terminating value of the inner loop.
        -:  554:		   */
        1:  555:		  inner_end = MONTH_COLS;
        -:  556:		  /*
        -:  557:		     Print the month header.
        -:  558:		   */
        1:  559:		  if (use_year_zeroleaded)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  560:		    sprintf (s1, "%s %0*d", month_name (month), lym, n);
call    0 returned 100%
        -:  561:		  else
    #####:  562:		    sprintf (s1, "%s %d", month_name (month), n);
call    0 never executed
        1:  563:		  print_text (stdout, s1);
call    0 returned 100%
        1:  564:		  if (cal_with_week_number)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  565:		    sprintf (s3, "%-*s", len_dayname_max + blanks_between,
        -:  566:			     _("Week"));
        -:  567:		}
        1:  568:	      print_text (stdout, s1);
call    0 returned 100%
        -:  569:	      /*
        -:  570:	         Print the days.
        -:  571:	       */
        8:  572:	      for (i = 1; i <= outer_end; i++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  573:		{
        7:  574:		  if (!special_calsheet_flag)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  575:		    /*
        -:  576:		       Print the day names.
        -:  577:		     */
       14:  578:		    sprintf (s1, "%-*s", len_dayname_max + blanks_between,
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
call    2 returned 100%
       14:  579:			     day_name (SDAY (i, start_day)));
       49:  580:		  for (d = 1; d <= inner_end; d++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  581:		    {
        -:  582:		      /*
        -:  583:		         Compute the days position in `year_vector'.
        -:  584:		       */
       42:  585:		      if (special_calsheet_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  586:			day = (month - 1) * VEC_BLOCK - 1
    #####:  587:			  + (i - 1) * DAY_MAX + d;
        -:  588:		      else
       84:  589:			day = (month - 1) * VEC_BLOCK - 1
       42:  590:			  + d * DAY_MAX - MONTH_COLS + i - 1;
        -:  591:		      /*
        -:  592:		         Is `day' the actual day?
        -:  593:		       */
       42:  594:		      if (highlight_flag
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       42:  595:			  && (year_vector[day] == act_day)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        1:  596:			  && (month == act_month) && (year == act_year))
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:  597:			{
        2:  598:			  if (is_marked && (ehls1s.len == 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  599:			    marker_flag =
call    0 never executed
    #####:  600:			      print_highlighted_date (d == inner_end,
        -:  601:						      is_marked, "", 0,
        -:  602:						      ehls1e.seq, ehls1e.len);
        -:  603:			  else
        1:  604:			    is_marked = marker_flag =
call    0 returned 100%
        1:  605:			      print_highlighted_date (d == inner_end,
        -:  606:						      is_marked, ehls1s.seq,
        -:  607:						      ehls1s.len, ehls1e.seq,
        -:  608:						      ehls1e.len);
        -:  609:			}
        -:  610:		      else
        -:  611:			{
        -:  612:			  /*
        -:  613:			     Is `day' a legal holiday?
        -:  614:			   */
       41:  615:			  j = 0;
       41:  616:			  if (year_vector[day])
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -:  617:			    {
       30:  618:			      if (cal_special_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  619:				(void) doy2date (year_vector[day],
call    0 never executed
        -:  620:						 is_leap_year, &this_day,
        -:  621:						 &month);
        -:  622:			      else
       30:  623:				this_day = year_vector[day];
       30:  624:			      if (hd_ldays
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  625:				  [((month - 1) * MONTH_LAST) +
       30:  626:				   (this_day - 1)])
    #####:  627:				j = 1;
        -:  628:			    }
       41:  629:			  if (j && highlight_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  630:			    {
        -:  631:			      /*
        -:  632:			         `day' is a legal holiday!
        -:  633:			       */
    #####:  634:			      if (is_marked && (ehls2s.len == 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  635:				marker_flag =
call    0 never executed
    #####:  636:				  print_highlighted_date (d == inner_end,
        -:  637:							  is_marked, "", 0,
        -:  638:							  ehls2e.seq,
        -:  639:							  ehls2e.len);
        -:  640:			      else
    #####:  641:				is_marked = marker_flag =
call    0 never executed
    #####:  642:				  print_highlighted_date (d == inner_end,
        -:  643:							  is_marked,
        -:  644:							  ehls2s.seq,
        -:  645:							  ehls2s.len,
        -:  646:							  ehls2e.seq,
        -:  647:							  ehls2e.len);
        -:  648:			    }
        -:  649:			  else
        -:  650:			    {
        -:  651:			      /*
        -:  652:			         `day' is no holiday!
        -:  653:			       */
       41:  654:			      marker_flag =
call    0 returned 100%
        -:  655:				print_unhighlighted_date (marker_flag);
       41:  656:			      is_marked = FALSE;
        -:  657:			    }
        -:  658:			}
       42:  659:		      if (cal_with_week_number
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  660:			  && ((special_calsheet_flag
branch  0 never executed
branch  1 never executed
    #####:  661:			       && (d == inner_end))
branch  0 never executed
branch  1 never executed
    #####:  662:			      || (!special_calsheet_flag && (i == 1))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  663:			{
    #####:  664:			  j = SPECIAL_VALUE;
    #####:  665:			  if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -:  666:			    {
    #####:  667:			      j = 0;
    #####:  668:			      day -= (DAY_MAX - 1);
    #####:  669:			      if (day >= 0)
branch  0 never executed
branch  1 never executed
        -:  670:				{
    #####:  671:				  while ((j < DAY_MAX)
branch  0 never executed
branch  1 never executed
    #####:  672:					 && (day + j < VEC_ELEMS)
branch  0 never executed
branch  1 never executed
    #####:  673:					 && !year_vector[day + j])
branch  0 never executed
branch  1 never executed
    #####:  674:				    j++;
    #####:  675:				  if ((j != DAY_MAX) && (day + j < VEC_ELEMS))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  676:				    {
    #####:  677:				      if (cal_special_flag)
branch  0 never executed
branch  1 never executed
        -:  678:					{
    #####:  679:					  (void)
call    0 never executed
    #####:  680:					    doy2date (year_vector[day + j],
        -:  681:						      is_leap_year, &day,
        -:  682:						      &month);
    #####:  683:					  j =
call    0 never executed
    #####:  684:					    week_number (day, month, year,
        -:  685:							 iso_week_number,
        -:  686:							 start_day);
        -:  687:					}
        -:  688:				      else
    #####:  689:					j =
call    0 never executed
    #####:  690:					  week_number (year_vector[day + j],
        -:  691:						       month, year,
        -:  692:						       iso_week_number,
        -:  693:						       start_day);
        -:  694:				    }
        -:  695:				  else
    #####:  696:				    j = SPECIAL_VALUE;
        -:  697:				}
        -:  698:			      else
    #####:  699:				j = SPECIAL_VALUE;
        -:  700:			    }
        -:  701:			  else
        -:  702:			    {
    #####:  703:			      j = 0;
    #####:  704:			      while ((j < DAY_MAX)
branch  0 never executed
branch  1 never executed
    #####:  705:				     && (day + j < VEC_ELEMS)
branch  0 never executed
branch  1 never executed
    #####:  706:				     && !year_vector[day + j])
branch  0 never executed
branch  1 never executed
    #####:  707:				j++;
    #####:  708:			      if ((j != DAY_MAX) && (day + j < VEC_ELEMS))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:				{
    #####:  710:				  if (cal_special_flag)
branch  0 never executed
branch  1 never executed
        -:  711:				    {
    #####:  712:				      (void) doy2date (year_vector[day + j],
call    0 never executed
        -:  713:						       is_leap_year, &day,
        -:  714:						       &month);
    #####:  715:				      j =
call    0 never executed
    #####:  716:					week_number (day, month, year,
        -:  717:						     iso_week_number,
        -:  718:						     start_day);
        -:  719:				    }
        -:  720:				  else
    #####:  721:				    j =
call    0 never executed
    #####:  722:				      week_number (year_vector[day + j],
        -:  723:						   month, year,
        -:  724:						   iso_week_number,
        -:  725:						   start_day);
        -:  726:				}
        -:  727:			      else
    #####:  728:				j = SPECIAL_VALUE;
        -:  729:			    }
    #####:  730:			  if (j != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -:  731:			    {
        -:  732:			      /*
        -:  733:			         We convert the computed week number to a week number text
        -:  734:			         (this looks nicer in output).
        -:  735:			       */
    #####:  736:			      if (j < 0)
branch  0 never executed
branch  1 never executed
        -:  737:				/*
        -:  738:				   Week starts in previous year and the first days
        -:  739:				   of the actual year are not in its first week.
        -:  740:				 */
    #####:  741:				sprintf (s2, "%02d/0", -j);
    #####:  742:			      else if (!j)
branch  0 never executed
branch  1 never executed
        -:  743:				/*
        -:  744:				   Week starts in previous year and the first days
        -:  745:				   of the actual year are in its first week.
        -:  746:				 */
    #####:  747:				sprintf (s2, "%s", "53/1");
        -:  748:			      else
        -:  749:				/*
        -:  750:				   Week starts in actual year.
        -:  751:				 */
    #####:  752:				sprintf (s2, "%02d", j);
    #####:  753:			      if (!special_calsheet_flag
branch  0 never executed
branch  1 never executed
    #####:  754:				  && (strlen (s2) > 2) && (d == 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:				{
    #####:  756:				  j = (int) strlen (s3);
    #####:  757:				  s3[j - 2] = '\0';
        -:  758:				}
        -:  759:			    }
        -:  760:			  else
    #####:  761:			    if (special_calsheet_flag
branch  0 never executed
branch  1 never executed
    #####:  762:				|| (!special_calsheet_flag && (i == 1)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  763:			    strcpy (s2, "  ");
    #####:  764:			  if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -:  765:			    {
    #####:  766:			      if (!is_marked
branch  0 never executed
branch  1 never executed
    #####:  767:				  || (is_marked
branch  0 never executed
branch  1 never executed
    #####:  768:				      && ((ehls1s.len > 1)
branch  0 never executed
branch  1 never executed
    #####:  769:					  || (ehls2s.len > 1))))
branch  0 never executed
branch  1 never executed
    #####:  770:				strcat (s1, " ");
    #####:  771:			      strcat (s1, s2);
        -:  772:			    }
        -:  773:			  else
        -:  774:			    {
    #####:  775:			      sprintf (s4, "%*s", format_len - 2, "");
    #####:  776:			      strcat (s3, s4);
    #####:  777:			      strcat (s3, s2);
        -:  778:			    }
        -:  779:			}
        -:  780:		    }
        -:  781:		  /*
        -:  782:		     Print the constructed line.
        -:  783:		   */
        7:  784:		  print_text (stdout, s1);
call    0 returned 100%
        7:  785:		  is_marked = marker_flag = FALSE;
        -:  786:		}
        1:  787:	      if (cal_with_week_number && !special_calsheet_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
        -:  788:		{
    #####:  789:		  print_text (stdout, s1);
call    0 never executed
    #####:  790:		  print_text (stdout, s3);
call    0 never executed
        -:  791:		}
        -:  792:	    }
        -:  793:#if USE_RC
        -:  794:	  /*
        -:  795:	     Print the fixed dates list.
        -:  796:	   */
        1:  797:	  if (rc_use_flag
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  798:	      && (is_ext_list
branch  0 never executed
branch  1 never executed
    #####:  799:		  || is_ext_range
branch  0 never executed
branch  1 never executed
    #####:  800:		  || is_special_range || is_multi_range || amount > 1L))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  801:	    rc_use ();
call    0 never executed
        -:  802:#endif
        -:  803:	  /*
        -:  804:	     Print the eternal holiday list.
        -:  805:	   */
        2:  806:	  if (holiday_flag
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  807:	      && (is_ext_list
branch  0 never executed
branch  1 never executed
    #####:  808:		  || is_ext_range
branch  0 never executed
branch  1 never executed
    #####:  809:		  || is_special_range
branch  0 never executed
branch  1 never executed
    #####:  810:		  || is_multi_range
branch  0 never executed
branch  1 never executed
    #####:  811:		  || amount > 1L)
branch  0 never executed
branch  1 never executed
    #####:  812:	      && (((year == EASTER_MIN - 1)
branch  0 never executed
branch  1 never executed
    #####:  813:		   && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
    #####:  814:		  || ((year >= EASTER_MIN) && (year <= EASTER_MAX))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  815:	    print_all_holidays (FALSE, FALSE);
call    0 never executed
        -:  816:	}
        -:  817:      else
        -:  818:	{
        -:  819:	  /*
        -:  820:	     If no explicit request for suppressing the calendar sheet
        -:  821:	     is given in command line (`-u' option), create it!
        -:  822:	   */
    #####:  823:	  if (!suppr_cal_flag)
branch  0 never executed
branch  1 never executed
        -:  824:	    {
        -:  825:	      register int n2;
        -:  826:
        -:  827:
    #####:  828:	      lym = len_year_max;
    #####:  829:	      if (transform_year)
branch  0 never executed
branch  1 never executed
        -:  830:		{
    #####:  831:		  n = year - transform_year;
    #####:  832:		  if ((n >= 0) && (transform_year > 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  833:		    n++;
    #####:  834:		  n2 = (year - transform_year) + 1;
    #####:  835:		  if ((n2 >= 0) && (transform_year > 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  836:		    n2++;
    #####:  837:		  if (abs (n) > YEAR_MAX || abs (n2) > YEAR_MAX)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  838:		    lym++;
        -:  839:		}
        -:  840:	      else
        -:  841:		{
    #####:  842:		  n = year;
    #####:  843:		  n2 = year + 1;
        -:  844:		}
        -:  845:	      /*
        -:  846:	         Print the year calendar sheet and if needed:
        -:  847:	         The fixed dates related to the year and
        -:  848:	         the eternal holidays related to the year.
        -:  849:	       */
    #####:  850:	      print_text (stdout, s1);
call    0 never executed
    #####:  851:	      print_text (stdout, s1);
call    0 never executed
    #####:  852:	      if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -:  853:		{
        -:  854:		  /*
        -:  855:		     Print the year calendar in the special format:
        -:  856:		     Initialize the terminating value of the inner loop.
        -:  857:		   */
    #####:  858:		  inner_end = DAY_MAX * out_cols;
        -:  859:		  /*
        -:  860:		     Compute the position of the year number.
        -:  861:		   */
    #####:  862:		  i =
    #####:  863:		    ((out_cols - 1) * blanks_between +
    #####:  864:		     out_cols * format_len * DAY_MAX) >> 1;
        -:  865:		}
        -:  866:	      else
        -:  867:		{
        -:  868:		  /*
        -:  869:		     Print the year calendar in the standard format:
        -:  870:		     Initialize the terminating value of the inner loop.
        -:  871:		   */
    #####:  872:		  inner_end = MONTH_COLS * out_cols;
        -:  873:		  /*
        -:  874:		     Compute the position of the year number.
        -:  875:		   */
    #####:  876:		  i =
    #####:  877:		    (out_cols * format_len * MONTH_COLS + 2 +
        -:  878:		     blanks_between) >> 1;
        -:  879:		}
        -:  880:	      /*
        -:  881:	         Print the year header.
        -:  882:	       */
    #####:  883:	      if ((!is_3month_mode
branch  0 never executed
branch  1 never executed
        -:  884:#if USE_RC
    #####:  885:		   && !is_2month_mode
branch  0 never executed
branch  1 never executed
        -:  886:#endif
    #####:  887:		   && !is_3month_mode2
branch  0 never executed
branch  1 never executed
    #####:  888:		   && (fiscal_month > MONTH_MIN) && (year + 1 <= YEAR_MAX))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  889:#if USE_RC
    #####:  890:		  || (is_2month_mode && (fiscal_month == MONTH_MAX))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  891:#endif
    #####:  892:		  || (is_3month_mode && (fiscal_month >= MONTH_MAX - 1)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  893:		{
    #####:  894:		  if (use_year_zeroleaded)
branch  0 never executed
branch  1 never executed
    #####:  895:		    sprintf (s1, "%*s%0*d/%0*d", i - lym, "", lym, n, lym,
        -:  896:			     n2);
        -:  897:		  else
        -:  898:		    {
    #####:  899:		      sprintf (s1, "%d", n);
    #####:  900:		      d = (int) strlen (s1);
    #####:  901:		      sprintf (s1, "%d", n2);
    #####:  902:		      d += (int) strlen (s1);
    #####:  903:		      sprintf (s1, "%*s%d/%d", i - (d >> 1), "", n, n2);
        -:  904:		    }
        -:  905:		}
        -:  906:	      else
        -:  907:		{
    #####:  908:		  if (use_year_zeroleaded)
branch  0 never executed
branch  1 never executed
    #####:  909:		    sprintf (s1, "%*s%0*d", i - (lym >> 1), "", lym, n);
        -:  910:		  else
        -:  911:		    {
    #####:  912:		      sprintf (s1, "%d", n);
    #####:  913:		      d = (int) strlen (s1);
    #####:  914:		      sprintf (s1, "%*s%d", i - (d >> 1), "", n);
        -:  915:		    }
        -:  916:		}
    #####:  917:	      print_text (stdout, s1);
call    0 never executed
    #####:  918:	      print_text (stdout, s1);
call    0 never executed
    #####:  919:	      print_text (stdout, s1);
call    0 never executed
    #####:  920:	      for (m = 0; m < out_rows; m++)
branch  0 never executed
branch  1 never executed
        -:  921:		{
    #####:  922:		  if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -:  923:		    {
        -:  924:		      /*
        -:  925:		         Print the month header in centered manner.
        -:  926:		       */
    #####:  927:		      for (i = 1; i <= out_cols; i++)
branch  0 never executed
branch  1 never executed
        -:  928:			{
    #####:  929:			  d = ((format_len * DAY_MAX) >> 1)
    #####:  930:			    +
    #####:  931:			    (strlen
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  932:			     (month_name
    #####:  933:			      (SMONTH (m * out_cols + i, fiscal_month))) >>
        -:  934:			     1);
    #####:  935:			  sprintf (s2, "%*s", d,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  936:				   month_name (SMONTH
        -:  937:					       (m * out_cols + i,
        -:  938:						fiscal_month)));
    #####:  939:			  strcat (s1, s2);
    #####:  940:			  if (i != out_cols)
branch  0 never executed
branch  1 never executed
        -:  941:			    {
    #####:  942:			      sprintf (s2, "%*s",
    #####:  943:				       (format_len * DAY_MAX) - (d -
        -:  944:								 blanks_between),
        -:  945:				       "");
    #####:  946:			      strcat (s1, s2);
        -:  947:			    }
        -:  948:			}
    #####:  949:		      print_text (stdout, s1);
call    0 never executed
        -:  950:		      /*
        -:  951:		         Print the day names.
        -:  952:		       */
    #####:  953:		      for (i = 1; i <= out_cols; i++)
branch  0 never executed
branch  1 never executed
        -:  954:			{
    #####:  955:			  for (d = DAY_MIN; d <= DAY_MAX; d++)
branch  0 never executed
branch  1 never executed
        -:  956:			    {
    #####:  957:			      if (use_short3_day_name
branch  0 never executed
branch  1 never executed
    #####:  958:				  && (format_len > FORMAT_LEN_MIN))
branch  0 never executed
branch  1 never executed
    #####:  959:				sprintf (s2, "%*s", format_len,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  960:					 short3_day_name (SDAY
        -:  961:							  (d, start_day)));
        -:  962:			      else
    #####:  963:				sprintf (s2, "%*s", format_len,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####:  964:					 short_day_name (SDAY
        -:  965:							 (d, start_day)));
    #####:  966:			      strcat (s1, s2);
        -:  967:			    }
    #####:  968:			  if (cal_with_week_number)
branch  0 never executed
branch  1 never executed
        -:  969:			    {
        -:  970:			      /*
        -:  971:			         The short week text which should be a proper abbreviation
        -:  972:			         of "calendar week", consists of 2 letters and is
        -:  973:			         separated by one space character of the month calendar.
        -:  974:			       */
        -:  975:			      /*
        -:  976:			       *** Translators, please translate this as a fixed 2-character text.
        -:  977:			       *** This text should be a proper abbreviation of "Calendar Week".
        -:  978:			       */
    #####:  979:			      sprintf (s2, " %2s", _("CW"));
    #####:  980:			      strcat (s1, s2);
        -:  981:			    }
    #####:  982:			  if (i != out_cols)
branch  0 never executed
branch  1 never executed
        -:  983:			    {
    #####:  984:			      sprintf (s2, "%*s",
branch  0 never executed
branch  1 never executed
    #####:  985:				       (cal_with_week_number) ? blanks_between
        -:  986:				       - 3 : blanks_between, "");
    #####:  987:			      strcat (s1, s2);
        -:  988:			    }
        -:  989:			}
        -:  990:		    }
        -:  991:		  else
        -:  992:		    {
        -:  993:		      /*
        -:  994:		         Print the month header.
        -:  995:		       */
    #####:  996:		      if (use_short3_day_name)
branch  0 never executed
branch  1 never executed
    #####:  997:			strcat (s1, " ");
    #####:  998:		      for (i = 1; i <= out_cols; i++)
branch  0 never executed
branch  1 never executed
        -:  999:			{
    #####: 1000:			  strcpy (s2,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1001:				  month_name (SMONTH
        -: 1002:					      (m * out_cols + i,
        -: 1003:					       fiscal_month)));
    #####: 1004:			  d = (int) strlen (s2);
    #####: 1005:			  sprintf (s2, "%*s%s", 2 + blanks_between + 1, "",
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1006:				   month_name (SMONTH
        -: 1007:					       (m * out_cols + i,
        -: 1008:						fiscal_month)));
    #####: 1009:			  strcat (s1, s2);
    #####: 1010:			  if (i != out_cols)
branch  0 never executed
branch  1 never executed
        -: 1011:			    {
    #####: 1012:			      sprintf (s2, "%*s",
    #####: 1013:				       (format_len * MONTH_COLS) - (d + 2 +
        -: 1014:								    blanks_between
    #####: 1015:								    + 1), "");
    #####: 1016:			      strcat (s1, s2);
        -: 1017:			    }
        -: 1018:			}
    #####: 1019:		      if (cal_with_week_number)
branch  0 never executed
branch  1 never executed
        -: 1020:			{
    #####: 1021:			  if (use_short3_day_name)
branch  0 never executed
branch  1 never executed
    #####: 1022:			    j = 3;
        -: 1023:			  else
    #####: 1024:			    j = 2;
        -: 1025:			  /*
        -: 1026:			     The short week text which should be a proper abbreviation
        -: 1027:			     of "calendar week", consists of 2 letters and is
        -: 1028:			     separated by one space character of the month calendar.
        -: 1029:			   */
        -: 1030:			  /*
        -: 1031:			   *** Translators, please translate this as a fixed 2-character text.
        -: 1032:			   *** This text should be a proper abbreviation of "Calendar Week".
        -: 1033:			   */
    #####: 1034:			  sprintf (s3, "%-*s", j + blanks_between, _("CW"));
        -: 1035:			}
    #####: 1036:		      print_text (stdout, s1);
call    0 never executed
        -: 1037:		    }
    #####: 1038:		  print_text (stdout, s1);
call    0 never executed
        -: 1039:		  /*
        -: 1040:		     Print the days.
        -: 1041:		   */
    #####: 1042:		  for (i = 1; i <= outer_end; i++)
branch  0 never executed
branch  1 never executed
        -: 1043:		    {
    #####: 1044:		      if (!special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -: 1045:			{
        -: 1046:			  /*
        -: 1047:			     Print the day name.
        -: 1048:			   */
    #####: 1049:			  if (use_short3_day_name)
branch  0 never executed
branch  1 never executed
    #####: 1050:			    sprintf (s1, "%-*s", 3 + blanks_between,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1051:				     short3_day_name (SDAY (i, start_day)));
        -: 1052:			  else
    #####: 1053:			    sprintf (s1, "%-*s", 2 + blanks_between,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1054:				     short_day_name (SDAY (i, start_day)));
        -: 1055:			}
    #####: 1056:		      for (d = 1; d <= inner_end; d++)
branch  0 never executed
branch  1 never executed
        -: 1057:			{
        -: 1058:			  /*
        -: 1059:			     Compute the days position in `year_vector'.
        -: 1060:			   */
    #####: 1061:			  if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
    #####: 1062:			    day = m * out_cols * VEC_BLOCK - 1
    #####: 1063:			      + (((d - 1) / DAY_MAX) * VEC_BLOCK)
    #####: 1064:			      + ((i - 1) * DAY_MAX) + ((d - 1) % DAY_MAX) + 1;
        -: 1065:			  else
    #####: 1066:			    day = m * out_cols * VEC_BLOCK - 1
    #####: 1067:			      + (d * DAY_MAX - MONTH_COLS) + (i - 1);
    #####: 1068:			  hday = (m * out_cols) + ((d - 1)
    #####: 1069:						   /
    #####: 1070:						   ((special_calsheet_flag) ?
    #####: 1071:						    DAY_MAX : MONTH_COLS)) +
branch  0 never executed
branch  1 never executed
        -: 1072:			    1;
    #####: 1073:			  hmonth = SMONTH (hday, fiscal_month);
branch  0 never executed
branch  1 never executed
        -: 1074:			  /*
        -: 1075:			     Is `day' the actual day?
        -: 1076:			   */
    #####: 1077:			  if (highlight_flag
branch  0 never executed
branch  1 never executed
    #####: 1078:			      && (year_vector[day] == act_day)
branch  0 never executed
branch  1 never executed
    #####: 1079:			      && (hmonth == act_month)
branch  0 never executed
branch  1 never executed
    #####: 1080:			      && (act_year ==
branch  0 never executed
branch  1 never executed
    #####: 1081:				  ((hday > hmonth) ? year + 1 : year)))
branch  0 never executed
branch  1 never executed
        -: 1082:			    {
    #####: 1083:			      if (is_marked && (ehls1s.len == 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1084:				marker_flag = print_highlighted_date (TRUE,
call    0 never executed
        -: 1085:								      is_marked,
        -: 1086:								      "", 0,
        -: 1087:								      ehls1e.
        -: 1088:								      seq,
        -: 1089:								      ehls1e.
        -: 1090:								      len);
        -: 1091:			      else
    #####: 1092:				is_marked = marker_flag =
call    0 never executed
    #####: 1093:				  print_highlighted_date ((ehls1s.len ==
        -: 1094:							   1) ? TRUE : FALSE,
        -: 1095:							  is_marked,
        -: 1096:							  ehls1s.seq,
        -: 1097:							  ehls1s.len,
        -: 1098:							  ehls1e.seq,
        -: 1099:							  ehls1e.len);
        -: 1100:			    }
        -: 1101:			  else
        -: 1102:			    {
        -: 1103:			      /*
        -: 1104:			         Is `day' a legal holiday?
        -: 1105:			       */
    #####: 1106:			      j = 0;
    #####: 1107:			      if (year_vector[day])
branch  0 never executed
branch  1 never executed
        -: 1108:				{
    #####: 1109:				  if (cal_special_flag)
branch  0 never executed
branch  1 never executed
    #####: 1110:				    (void) doy2date (year_vector[day + j],
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1111:						     (hday >
        -: 1112:						      hmonth) ?
    #####: 1113:						     days_of_february (year +
call    0 never executed
    #####: 1114:								       1) ==
        -: 1115:						     29 : is_leap_year,
        -: 1116:						     &this_day, &this_month);
        -: 1117:				  else
        -: 1118:				    {
    #####: 1119:				      this_day = year_vector[day];
    #####: 1120:				      this_month = hmonth;
        -: 1121:				    }
    #####: 1122:				  if (hd_ldays
branch  0 never executed
branch  1 never executed
    #####: 1123:				      [((this_month - 1) * MONTH_LAST) +
    #####: 1124:				       (this_day - 1)])
    #####: 1125:				    j = 1;
        -: 1126:				}
    #####: 1127:			      if (j && highlight_flag)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1128:				{
        -: 1129:				  /*
        -: 1130:				     `day' is a legal holiday!
        -: 1131:				   */
    #####: 1132:				  if (is_marked && (ehls2s.len == 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1133:				    marker_flag =
call    0 never executed
    #####: 1134:				      print_highlighted_date (TRUE, is_marked,
        -: 1135:							      "", 0,
        -: 1136:							      ehls2e.seq,
        -: 1137:							      ehls2e.len);
        -: 1138:				  else
    #####: 1139:				    is_marked = marker_flag =
call    0 never executed
    #####: 1140:				      print_highlighted_date ((ehls2s.len ==
        -: 1141:							       1) ? TRUE :
        -: 1142:							      FALSE,
        -: 1143:							      is_marked,
        -: 1144:							      ehls2s.seq,
        -: 1145:							      ehls2s.len,
        -: 1146:							      ehls2e.seq,
        -: 1147:							      ehls2e.len);
        -: 1148:				}
        -: 1149:			      else
        -: 1150:				{
        -: 1151:				  /*
        -: 1152:				     `day' is no holiday!
        -: 1153:				   */
    #####: 1154:				  marker_flag =
call    0 never executed
        -: 1155:				    print_unhighlighted_date (marker_flag);
    #####: 1156:				  is_marked = FALSE;
        -: 1157:				}
        -: 1158:			    }
    #####: 1159:			  if (cal_with_week_number
branch  0 never executed
branch  1 never executed
    #####: 1160:			      && ((special_calsheet_flag
branch  0 never executed
branch  1 never executed
    #####: 1161:				   && !(d % DAY_MAX))
branch  0 never executed
branch  1 never executed
    #####: 1162:				  || (!special_calsheet_flag && (i == 1))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1163:			    {
    #####: 1164:			      j = SPECIAL_VALUE;
    #####: 1165:			      if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -: 1166:				{
    #####: 1167:				  j = 0;
    #####: 1168:				  day -= (DAY_MAX - 1);
    #####: 1169:				  if (day >= 0)
branch  0 never executed
branch  1 never executed
        -: 1170:				    {
    #####: 1171:				      while ((j < DAY_MAX)
branch  0 never executed
branch  1 never executed
    #####: 1172:					     && (day + j < VEC_ELEMS)
branch  0 never executed
branch  1 never executed
    #####: 1173:					     && !year_vector[day + j])
branch  0 never executed
branch  1 never executed
    #####: 1174:					j++;
    #####: 1175:				      if ((j != DAY_MAX)
branch  0 never executed
branch  1 never executed
    #####: 1176:					  && (day + j < VEC_ELEMS))
branch  0 never executed
branch  1 never executed
        -: 1177:					{
    #####: 1178:					  if (cal_special_flag)
branch  0 never executed
branch  1 never executed
        -: 1179:					    {
    #####: 1180:					      (void)
call    0 never executed
    #####: 1181:						doy2date (year_vector
branch  0 never executed
branch  1 never executed
    #####: 1182:							  [day + j],
    #####: 1183:							  (hday >
        -: 1184:							   hmonth) ?
    #####: 1185:							  days_of_february
call    0 never executed
    #####: 1186:							  (year + 1) ==
        -: 1187:							  29 : is_leap_year,
        -: 1188:							  &day, &hmonth);
    #####: 1189:					      j =
call    0 never executed
    #####: 1190:						week_number (day, hmonth,
branch  0 never executed
branch  1 never executed
    #####: 1191:							     (hday >
    #####: 1192:							      hmonth) ? year +
        -: 1193:							     1 : year,
        -: 1194:							     iso_week_number,
        -: 1195:							     start_day);
        -: 1196:					    }
        -: 1197:					  else
    #####: 1198:					    j =
call    0 never executed
    #####: 1199:					      week_number (year_vector
branch  0 never executed
branch  1 never executed
    #####: 1200:							   [day + j], hmonth,
    #####: 1201:							   (hday >
    #####: 1202:							    hmonth) ? year +
        -: 1203:							   1 : year,
        -: 1204:							   iso_week_number,
        -: 1205:							   start_day);
        -: 1206:					}
        -: 1207:				      else
    #####: 1208:					j = SPECIAL_VALUE;
        -: 1209:				    }
        -: 1210:				  else
    #####: 1211:				    j = SPECIAL_VALUE;
        -: 1212:				}
        -: 1213:			      else
        -: 1214:				{
    #####: 1215:				  j = 0;
    #####: 1216:				  while ((j < DAY_MAX)
branch  0 never executed
branch  1 never executed
    #####: 1217:					 && (day + j < VEC_ELEMS)
branch  0 never executed
branch  1 never executed
    #####: 1218:					 && !year_vector[day + j])
branch  0 never executed
branch  1 never executed
    #####: 1219:				    j++;
    #####: 1220:				  if ((j != DAY_MAX) && (day + j < VEC_ELEMS))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1221:				    {
    #####: 1222:				      if (cal_special_flag)
branch  0 never executed
branch  1 never executed
        -: 1223:					{
    #####: 1224:					  (void)
call    0 never executed
    #####: 1225:					    doy2date (year_vector[day + j],
branch  0 never executed
branch  1 never executed
    #####: 1226:						      (hday >
        -: 1227:						       hmonth) ?
    #####: 1228:						      days_of_february (year +
call    0 never executed
    #####: 1229:									1) ==
        -: 1230:						      29 : is_leap_year, &day,
        -: 1231:						      &hmonth);
    #####: 1232:					  j =
call    0 never executed
    #####: 1233:					    week_number (day, hmonth,
branch  0 never executed
branch  1 never executed
    #####: 1234:							 (hday >
    #####: 1235:							  hmonth) ? year +
        -: 1236:							 1 : year,
        -: 1237:							 iso_week_number,
        -: 1238:							 start_day);
        -: 1239:					}
        -: 1240:				      else
    #####: 1241:					j =
call    0 never executed
    #####: 1242:					  week_number (year_vector[day + j],
branch  0 never executed
branch  1 never executed
        -: 1243:						       hmonth,
    #####: 1244:						       (hday >
    #####: 1245:							hmonth) ? year +
        -: 1246:						       1 : year,
        -: 1247:						       iso_week_number,
        -: 1248:						       start_day);
        -: 1249:				    }
        -: 1250:				  else
    #####: 1251:				    j = SPECIAL_VALUE;
        -: 1252:				}
    #####: 1253:			      if (j != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 1254:				{
        -: 1255:				  /*
        -: 1256:				     We convert the computed week number to a week number text
        -: 1257:				     (this looks nicer in output).
        -: 1258:				   */
    #####: 1259:				  if (j < 0)
branch  0 never executed
branch  1 never executed
        -: 1260:				    /*
        -: 1261:				       Week starts in previous year and the first days
        -: 1262:				       of the actual year are not in its first week.
        -: 1263:				     */
    #####: 1264:				    sprintf (s2, "%02d", -j);
    #####: 1265:				  else if (!j)
branch  0 never executed
branch  1 never executed
        -: 1266:				    /*
        -: 1267:				       Week starts in previous year and the first days
        -: 1268:				       of the actual year are in its first week.
        -: 1269:				     */
    #####: 1270:				    sprintf (s2, "%02d", 1);
        -: 1271:				  else
        -: 1272:				    /*
        -: 1273:				       Week starts in actual year.
        -: 1274:				     */
    #####: 1275:				    sprintf (s2, "%02d", j);
        -: 1276:				}
        -: 1277:			      else
    #####: 1278:				if (special_calsheet_flag
branch  0 never executed
branch  1 never executed
    #####: 1279:				    || (!special_calsheet_flag && (i == 1)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1280:				strcpy (s2, "  ");
    #####: 1281:			      if (special_calsheet_flag)
branch  0 never executed
branch  1 never executed
        -: 1282:				{
    #####: 1283:				  if (!is_marked)
branch  0 never executed
branch  1 never executed
    #####: 1284:				    strcat (s1, " ");
    #####: 1285:				  strcat (s1, s2);
        -: 1286:				}
        -: 1287:			      else
        -: 1288:				{
    #####: 1289:				  sprintf (s4, "%*s", format_len - 2, "");
    #####: 1290:				  strcat (s3, s4);
    #####: 1291:				  strcat (s3, s2);
        -: 1292:				}
        -: 1293:			    }
        -: 1294:			  /*
        -: 1295:			     If we have completed a day line of a month:
        -: 1296:			     Concatenate some separating blanks between the months.
        -: 1297:			   */
    #####: 1298:			  if (special_calsheet_flag
branch  0 never executed
branch  1 never executed
    #####: 1299:			      && !(d % DAY_MAX) && (d != DAY_MAX * out_cols))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1300:			    {
    #####: 1301:			      sprintf (s2, "%*s",
branch  0 never executed
branch  1 never executed
    #####: 1302:				       (cal_with_week_number) ? blanks_between
        -: 1303:				       - 3 : blanks_between, "");
    #####: 1304:			      if (cal_with_week_number && is_marked)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1305:				strcat (s2, " ");
    #####: 1306:			      strcat (s1, s2);
        -: 1307:			    }
        -: 1308:			}
        -: 1309:		      /*
        -: 1310:		         Print the constructed line.
        -: 1311:		       */
    #####: 1312:		      print_text (stdout, s1);
call    0 never executed
    #####: 1313:		      marker_flag = is_marked = FALSE;
        -: 1314:		    }
    #####: 1315:		  if (cal_with_week_number && !special_calsheet_flag)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1316:		    {
    #####: 1317:		      print_text (stdout, s1);
call    0 never executed
    #####: 1318:		      print_text (stdout, s3);
call    0 never executed
        -: 1319:		    }
        -: 1320:		  /*
        -: 1321:		     Print two NEWLINE characters between the month rows.
        -: 1322:		   */
    #####: 1323:		  if (m < out_rows - 1)
branch  0 never executed
branch  1 never executed
        -: 1324:		    {
    #####: 1325:		      print_text (stdout, s1);
call    0 never executed
    #####: 1326:		      print_text (stdout, s1);
call    0 never executed
        -: 1327:		    }
        -: 1328:		}
        -: 1329:	    }
        -: 1330:#if USE_RC
        -: 1331:	  /*
        -: 1332:	     Print the fixed dates list.
        -: 1333:	   */
    #####: 1334:	  if (rc_use_flag && (is_ext_list || is_ext_range))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1335:	    rc_use ();
call    0 never executed
        -: 1336:#endif
        -: 1337:	  /*
        -: 1338:	     Print the eternal holiday list.
        -: 1339:	   */
    #####: 1340:	  if (is_ext_year
branch  0 never executed
branch  1 never executed
    #####: 1341:	      && holiday_flag
branch  0 never executed
branch  1 never executed
    #####: 1342:	      && (((year == EASTER_MIN - 1)
branch  0 never executed
branch  1 never executed
    #####: 1343:		   && (fiscal_month > MONTH_MIN))
branch  0 never executed
branch  1 never executed
    #####: 1344:		  || ((year >= EASTER_MIN) && (year <= EASTER_MAX))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1345:	    print_all_holidays (FALSE, FALSE);
call    0 never executed
        -: 1346:	}
        -: 1347:    }
        -: 1348:#if USE_RC
        -: 1349:  /*
        -: 1350:     A `-cNw' option and no explicit date given:
        -: 1351:     Reset some affected global variables.
        -: 1352:   */
        1: 1353:  if (is_1month_mode || is_2month_mode)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1354:    {
    #####: 1355:      is_fiscal_year = TRUE;
    #####: 1356:      fiscal_month = month;
    #####: 1357:      year = act_year;
        -: 1358:    }
        -: 1359:  else
        -: 1360:    /*
        -: 1361:       Re-initialize the actual date.
        -: 1362:     */
        1: 1363:  if (rc_period_flag
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1364:	&& (rc_forwards_flag
branch  0 never executed
branch  1 never executed
    #####: 1365:	      || rc_backwards_flag) && !rc_period_list && !is_date_given)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1366:    (void) get_actual_date ();
call    0 never executed
        -: 1367:  else
        -: 1368:#endif /* USE_RC */
        1: 1369:  if (cal_special_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1370:    act_day = tmp_ad;
        1: 1371:}
        -: 1372:
        -: 1373:
        -: 1374:
        -: 1375:static void
function fill_year_vector called 1 returned 100% blocks executed 65%
        1: 1376:fill_year_vector (year)
        -: 1377:     int year;
        -: 1378:/*!
        -: 1379:   Builds the "standard" year vector and the "special" year vector
        -: 1380:     according to the delivered `year'.
        -: 1381:*/
        -: 1382:{
        -: 1383:#if !USE_RC
        -: 1384:  register int days_of_feb = days_of_february (year);
        -: 1385:#endif
        -: 1386:  register int i;
        -: 1387:  register int j;
        -: 1388:  register int count;
        -: 1389:  register int d;
        1: 1390:  register int m = fiscal_month;
        -: 1391:
        -: 1392:
        -: 1393:  /*
        -: 1394:     First, detect starting day of the fiscal/standard year.
        -: 1395:   */
        1: 1396:  i = weekday_of_date (DAY_MIN, m, year);
call    0 returned 100%
        1: 1397:  i = day = SYEAR (i, start_day);
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1: 1398:  j = d = 0;
        1: 1399:  if (fiscal_month > MONTH_MIN)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1400:    count = day_of_year (DAY_MIN, m, year) - 1;
call    0 never executed
        -: 1401:  else
        1: 1402:    count = 0;
        -: 1403:  /*
        -: 1404:     Then, fill the year vector.
        -: 1405:   */
        -: 1406:  LOOP
        -: 1407:  {
      733: 1408:    d++;
      367: 1409:    count++;
        -: 1410:#if USE_RC
      367: 1411:    if (!valid_date (d, m, year))
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        -: 1412:#else /* !USE_RC */
        -: 1413:    if (((m != 2) && (d > dvec[m - 1])) || ((m == 2) && (d > days_of_feb)))
        -: 1414:#endif /* !USE_RC */
        -: 1415:      {
       12: 1416:	j++;
       12: 1417:	if ((m < MONTH_MAX) && (j < MONTH_MAX))
branch  0 taken 92% (fallthrough)
branch  1 taken 8%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -: 1418:	  {
       11: 1419:	    if (fiscal_month > MONTH_MIN)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1420:	      i = j * VEC_BLOCK + day;
        -: 1421:	    else
       11: 1422:	      i = m * VEC_BLOCK + day;
       11: 1423:	    d = DAY_MIN;
       11: 1424:	    m++;
        -: 1425:	  }
        -: 1426:	else
        -: 1427:	  {
        1: 1428:	    if (fiscal_month > MONTH_MIN)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1429:	      {
    #####: 1430:		year++;
    #####: 1431:		if (j == MONTH_MAX || year > YEAR_MAX)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1432:		  break;
    #####: 1433:		i = j * VEC_BLOCK + day;
    #####: 1434:		count = d = DAY_MIN;
    #####: 1435:		m = MONTH_MIN;
        -: 1436:#if !USE_RC
        -: 1437:		days_of_feb = days_of_february (year);
        -: 1438:#endif
        -: 1439:	      }
        -: 1440:	    else
        1: 1441:	      break;
        -: 1442:	  }
        -: 1443:      }
      366: 1444:    if ((year == greg->year)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1445:	&& (m == greg->month)
branch  0 never executed
branch  1 never executed
    #####: 1446:	&& ((d >= greg->first_day) && (d <= greg->last_day)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1447:      i--;
        -: 1448:    else
        -: 1449:      {
      366: 1450:	day++;
      366: 1451:	if (cal_special_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1452:	  year_vector[i - 1] = count;
        -: 1453:	else
      366: 1454:	  year_vector[i - 1] = d;
      366: 1455:	special_vector[i - 1] = count;
        -: 1456:      }
      366: 1457:    i++;
      366: 1458:    if (day > DAY_MAX)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       52: 1459:      day = DAY_MIN;
        -: 1460:  }
        1: 1461:}
        -: 1462:
        -: 1463:
        -: 1464:
        -: 1465:static Bool
function print_unhighlighted_date called 41 returned 100% blocks executed 43%
       41: 1466:print_unhighlighted_date (marker_flag)
        -: 1467:     Bool marker_flag;
        -: 1468:/*!
        -: 1469:   Prints a date in NON-highlighted manner.
        -: 1470:     If the MARKER_FLAG is set to TRUE when entering this function, this
        -: 1471:     indicates, that a highlighting sequence/marking character pair was
        -: 1472:     already displayed previously (or better adjacent) in the same row of
        -: 1473:     the line, so it can be set to FALSE now and returned by this function,
        -: 1474:     otherwise it will be returned untouched (means it was FALSE).  The
        -: 1475:     respection of this MARKER_FLAG is absolutely necessary to format the
        -: 1476:     line properly.
        -: 1477:*/
        -: 1478:{
       41: 1479:  if (cal_both_dates_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1480:    {
    #####: 1481:      if (year_vector[day])
branch  0 never executed
branch  1 never executed
        -: 1482:	{
    #####: 1483:	  if (marker_flag)
branch  0 never executed
branch  1 never executed
        -: 1484:	    {
    #####: 1485:	      if (use_day_zeroleaded)
branch  0 never executed
branch  1 never executed
    #####: 1486:		sprintf (s2, "%02d(%03d)", year_vector[day],
        -: 1487:			 special_vector[day]);
        -: 1488:	      else
    #####: 1489:		sprintf (s2, "%2d(%3d)", year_vector[day],
        -: 1490:			 special_vector[day]);
    #####: 1491:	      marker_flag = FALSE;
        -: 1492:	    }
    #####: 1493:	  else if (use_day_zeroleaded)
branch  0 never executed
branch  1 never executed
    #####: 1494:	    sprintf (s2, " %02d(%03d)", year_vector[day],
        -: 1495:		     special_vector[day]);
        -: 1496:	  else
    #####: 1497:	    sprintf (s2, " %2d(%3d)", year_vector[day], special_vector[day]);
        -: 1498:	}
        -: 1499:      else
        -: 1500:	{
    #####: 1501:	  if (marker_flag)
branch  0 never executed
branch  1 never executed
        -: 1502:	    {
    #####: 1503:	      sprintf (s2, "%*s", format_len - 1, "");
    #####: 1504:	      marker_flag = FALSE;
        -: 1505:	    }
        -: 1506:	  else
    #####: 1507:	    sprintf (s2, "%*s", format_len, "");
        -: 1508:	}
        -: 1509:    }
        -: 1510:  else
        -: 1511:    {
       41: 1512:      if (year_vector[day])
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -: 1513:	{
       30: 1514:	  if (marker_flag)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1515:	    {
        1: 1516:	      if (use_day_zeroleaded)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1517:		sprintf (s2, "%0*d", format_len - 1, year_vector[day]);
        -: 1518:	      else
        1: 1519:		sprintf (s2, "%*d", format_len - 1, year_vector[day]);
        1: 1520:	      marker_flag = FALSE;
        -: 1521:	    }
       29: 1522:	  else if (use_day_zeroleaded)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1523:	    sprintf (s2, " %0*d", format_len - 1, year_vector[day]);
        -: 1524:	  else
       29: 1525:	    sprintf (s2, "%*d", format_len, year_vector[day]);
        -: 1526:	}
        -: 1527:      else
        -: 1528:	{
       11: 1529:	  if (marker_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1530:	    {
    #####: 1531:	      sprintf (s2, "%*s", format_len - 1, "");
    #####: 1532:	      marker_flag = FALSE;
        -: 1533:	    }
        -: 1534:	  else
       11: 1535:	    sprintf (s2, "%*s", format_len, "");
        -: 1536:	}
        -: 1537:    }
       41: 1538:  strcat (s1, s2);
        -: 1539:
       41: 1540:  return (marker_flag);
        -: 1541:}
        -: 1542:
        -: 1543:
        -: 1544:
        -: 1545:static Bool
function print_highlighted_date called 1 returned 100% blocks executed 21%
        1: 1546:print_highlighted_date (last_item, marker_flag, hls_start, hls_slen, hls_end,
        -: 1547:			hls_elen)
        -: 1548:     const Bool last_item;
        -: 1549:     const Bool marker_flag;
        -: 1550:     const char *hls_start;
        -: 1551:     const int hls_slen;
        -: 1552:     const char *hls_end;
        -: 1553:     const int hls_elen;
        -: 1554:/*!
        -: 1555:   Prints a date in highlighted manner using the given highlighting sequence,
        -: 1556:     which consists of the "starting" highlighting sequence HLS_START and the
        -: 1557:     "ending/final" highlighting sequence HLS_END, for distinguishing whether
        -: 1558:     a real highlighting sequence is given.  The lengths of such a highlighting
        -: 1559:     sequence/marking character pair are delivered, too.  If these lengths
        -: 1560:     are greater ONE, it's assumed that a "real" (Termcap/ANSI) highlighting
        -: 1561:     sequence pair is given, otherwise a marking character pair.  If the
        -: 1562:     MARKER_FLAG is set to TRUE when entering this function, this indicates,
        -: 1563:     that a highlighting sequence/marking character pair was already displayed
        -: 1564:     previously (or better adjacent) in the same row of the line, so only an
        -: 1565:     ending marking character may be produced in this case (this doesn't matter
        -: 1566:     to "real" highlighting sequences, because their width is zero on the
        -: 1567:     display [if interpreted properly by the screen device driver], but a
        -: 1568:     marking character has the width of one), otherwise, all components of the
        -: 1569:     marking character pair must be produced.  The respection of this
        -: 1570:     MARKER_FLAG is absolutely necessary to format the line properly.
        -: 1571:     If `last_item' is set to TRUE, this function does not produce a trailing
        -: 1572:     blank character after an ending highlighting sequence respectively
        -: 1573:     marking character.  Returns always TRUE to indicate, that a
        -: 1574:     marking character/highlighting sequence pair is set by it!
        -: 1575:*/
        -: 1576:{
        1: 1577:  if (cal_both_dates_flag)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1578:    {
    #####: 1579:      if (use_day_zeroleaded)
branch  0 never executed
branch  1 never executed
    #####: 1580:	sprintf (s2, "%s%s%02d(%03d)%s%s",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1581:		 (((hls_slen > 1) && !marker_flag) ? NO_HLS : ""), hls_start,
branch  0 never executed
branch  1 never executed
        -: 1582:		 year_vector[day], special_vector[day],
    #####: 1583:		 hls_end, (((hls_elen > 1) && !last_item) ? NO_HLS : ""));
branch  0 never executed
branch  1 never executed
        -: 1584:      else
    #####: 1585:	sprintf (s2, "%s%s%2d(%3d)%s%s",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1586:		 (((hls_slen > 1) && !marker_flag) ? NO_HLS : ""), hls_start,
branch  0 never executed
branch  1 never executed
        -: 1587:		 year_vector[day], special_vector[day],
    #####: 1588:		 hls_end, (((hls_elen > 1) && !last_item) ? NO_HLS : ""));
branch  0 never executed
branch  1 never executed
        -: 1589:    }
        -: 1590:  else
        -: 1591:    {
        1: 1592:      if (use_day_zeroleaded)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1593:	sprintf (s2, "%s%s%0*d%s%s",
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1594:		 (((hls_slen > 1) && !marker_flag) ? NO_HLS : ""), hls_start,
branch  0 never executed
branch  1 never executed
        -: 1595:		 format_len - 1, year_vector[day],
    #####: 1596:		 hls_end, (((hls_elen > 1) && !last_item) ? NO_HLS : ""));
branch  0 never executed
branch  1 never executed
        -: 1597:      else
        1: 1598:	sprintf (s2, "%s%s%*d%s%s",
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1599:		 (((hls_slen > 1) && !marker_flag) ? NO_HLS : ""), hls_start,
branch  0 never executed
branch  1 never executed
        -: 1600:		 format_len - 1, year_vector[day],
    #####: 1601:		 hls_end, (((hls_elen > 1) && !last_item) ? NO_HLS : ""));
branch  0 never executed
branch  1 never executed
        -: 1602:    }
        1: 1603:  strcat (s1, s2);
        -: 1604:
        1: 1605:  return (TRUE);
        -: 1606:}
