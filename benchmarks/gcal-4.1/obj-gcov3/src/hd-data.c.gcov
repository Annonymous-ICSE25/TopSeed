        -:    0:Source:../../src/hd-data.c
        -:    0:Programs:20
        -:    1:/*!
        -:    2:*  \file hd-data.c
        -:    3:*  \brief All data which is composed into the eternal holiday list.
        -:    4:*/
        -:    5:/*
        -:    6:*  Copyright (c) 1994, 95, 96, 1997, 2000, 2011 Thomas Esken
        -:    7:*  Copyright (c) 2010, 2011, 2013 Free Software Foundation, Inc.
        -:    8:*
        -:    9:*  This software doesn't claim completeness, correctness or usability.
        -:   10:*  On principle I will not be liable for ANY damages or losses (implicit
        -:   11:*  or explicit), which result from using or handling my software.
        -:   12:*  If you use this software, you agree without any exception to this
        -:   13:*  agreement, which binds you LEGALLY !!
        -:   14:*
        -:   15:*  This program is free software; you can redistribute it and/or modify
        -:   16:*  it under the terms of the `GNU General Public License' as published by
        -:   17:*  the `Free Software Foundation'; either version 3, or (at your option)
        -:   18:*  any later version.
        -:   19:*
        -:   20:*  You should have received a copy of the `GNU General Public License'
        -:   21:*  along with this program; if not, write to the:
        -:   22:*
        -:   23:*/
        -:   24:
        -:   25:
        -:   26:
        -:   27:/*
        -:   28:*  Include header files.
        -:   29:*/
        -:   30:#include "tailor.h"
        -:   31:#include "common.h"
        -:   32:#include "globals.h"
        -:   33:#include "hd-astro.h"
        -:   34:#include "hd-defs.h"
        -:   35:#include "hd-data1.h"
        -:   36:#if !HD_TOP20CC
        -:   37:# include "hd-data2.h"
        -:   38:# include "hd-data3.h"
        -:   39:# include "hd-data4.h"
        -:   40:# include "hd-data5.h"
        -:   41:#endif
        -:   42:#include "hd-use.h"
        -:   43:#include "tty.h"
        -:   44:#include "utils.h"
        -:   45:#include "hd-data.h"
        -:   46:
        -:   47:
        -:   48:
        -:   49:/*
        -:   50:*  GLOBAL variables definitions.
        -:   51:*/
        -:   52:/*!
        -:   53:   The table used to manage the country specific holidays is a vector of
        -:   54:     `Cc_struct' terminated by an element containing a `cc_info' which is zero!
        -:   55:     The `cc_id' entries in this table *MUST* be listed in ASCENDING SORT ORDER !!
        -:   56:*/
        -:   57:const Cc_struct cc_holidays[] = {
        -:   58:/*
        -:   59:  The A2 (2-letters) country codes are taken from ISO-3166.
        -:   60:
        -:   61:  { char *cc_id, char *cc_info, void (*Cc_hdy_handler)() },
        -:   62:*/
        -:   63:#if HD_TOP20CC
        -:   64:  {"AU", N_("Australia"), au_hdy},
        -:   65:  {"BE", N_("Belgium"), be_hdy},
        -:   66:  {"BR", N_("Brazil"), br_hdy},
        -:   67:  {"CA", N_("Canada"), ca_hdy},
        -:   68:  {"CH", N_("Switzerland"), ch_hdy},
        -:   69:  {"CN", N_("China"), cn_hdy},
        -:   70:  {CC_DE, N_("Germany"), de_hdy},
        -:   71:  {"ES", N_("Spain"), es_hdy},
        -:   72:  {"FR", N_("France"), fr_hdy},
        -:   73:  {CC_GB, N_("Great Britain"), gb_hdy},
        -:   74:  {"IL", N_("Israel"), il_hdy},
        -:   75:  {"IT", N_("Italy"), it_hdy},
        -:   76:  {"JP", N_("Japan"), jp_hdy},
        -:   77:  {"KR", N_("Republic of Korea"), kr_hdy},
        -:   78:  {"MX", N_("Mexico"), mx_hdy},
        -:   79:  {"NL", N_("Netherlands"), nl_hdy},
        -:   80:  {"NZ", N_("New Zealand"), nz_hdy},
        -:   81:  {"PT", N_("Portugal"), pt_hdy},
        -:   82:  {"RU", N_("Russian Federation"), ru_hdy},
        -:   83:  {CC_US, N_("United States"), us_hdy},
        -:   84:#else /* !HD_TOP20CC */
        -:   85:  {"AD", N_("Andorra"), ad_hdy},
        -:   86:  {"AE", N_("United Arab Emirates"), ae_hdy},
        -:   87:  {"AF", N_("Afghanistan"), af_hdy},
        -:   88:  {"AG", N_("Antigua and Barbuda"), ag_hdy},
        -:   89:  {"AI", N_("Anguilla"), ai_hdy},
        -:   90:  {"AL", N_("Albania"), al_hdy},
        -:   91:  {"AM", N_("Armenia"), am_hdy},
        -:   92:  {"AN_BO", N_("Netherlands Antilles/Bonaire"), an_bo_hdy},
        -:   93:  {"AN_CU", N_("Netherlands Antilles/Curaçao"), an_cu_hdy},
        -:   94:  {"AN_MA", N_("Netherlands Antilles/St Maarten"), an_ma_hdy},
        -:   95:  {"AN_SA", N_("Netherlands Antilles/Saba and Statia"), an_sa_hdy},
        -:   96:  {"AO", N_("Angola #"), ao_hdy},
        -:   97:  {"AR", N_("Argentina"), ar_hdy},
        -:   98:  {"AS", N_("American Samoa"), as_hdy},
        -:   99:  {"AT", N_("Austria"), at_hdy},
        -:  100:  {"AU_CT", N_("Australia/Canberra"), au_ct_hdy},
        -:  101:  {"AU_NT", N_("Australia/Northern Territory"), au_nt_hdy},
        -:  102:  {"AU_QU", N_("Australia/Queensland"), au_qu_hdy},
        -:  103:  {"AU_SA", N_("Australia/Southern Australia"), au_sa_hdy},
        -:  104:  {"AU_SW", N_("Australia/New South Wales"), au_sw_hdy},
        -:  105:  {"AU_TA", N_("Australia/Tasmania"), au_ta_hdy},
        -:  106:  {"AU_VI", N_("Australia/Victoria"), au_vi_hdy},
        -:  107:  {"AU_WA", N_("Australia/Western Australia"), au_wa_hdy},
        -:  108:  {"AW", N_("Aruba"), aw_hdy},
        -:  109:  {"AZ", N_("Azerbaijan"), az_hdy},
        -:  110:  {"BA", N_("Bosnia-Herzegovina"), ba_hdy},
        -:  111:  {"BB", N_("Barbados"), bb_hdy},
        -:  112:  {"BD", N_("Bangladesh #"), bd_hdy},
        -:  113:  {"BE", N_("Belgium"), be_hdy},
        -:  114:  {"BF", N_("Burkina Faso"), bf_hdy},
        -:  115:  {"BG", N_("Bulgaria"), bg_hdy},
        -:  116:  {"BH", N_("Bahrain"), bh_hdy},
        -:  117:  {"BI", N_("Burundi #"), bi_hdy},
        -:  118:  {"BJ", N_("Benin #"), bj_hdy},
        -:  119:  {"BM", N_("Bermuda"), bm_hdy},
        -:  120:  {"BN", N_("Brunei"), bn_hdy},
        -:  121:  {"BO", N_("Bolivia"), bo_hdy},
        -:  122:  {"BR", N_("Brazil"), br_hdy},
        -:  123:  {"BS", N_("Bahamas"), bs_hdy},
        -:  124:  {"BT", N_("Bhutan #"), bt_hdy},
        -:  125:  {"BV", N_("Bouvet Island"), bv_hdy},
        -:  126:  {"BW", N_("Botswana"), bw_hdy},
        -:  127:  {"BY", N_("Belarus"), by_hdy},
        -:  128:  {"BZ", N_("Belize"), bz_hdy},
        -:  129:  {"CA_AL", N_("Canada/Alberta"), ca_al_hdy},
        -:  130:  {"CA_BC", N_("Canada/British Columbia"), ca_bc_hdy},
        -:  131:  {"CA_MA", N_("Canada/Manitoba"), ca_ma_hdy},
        -:  132:  {"CA_NB", N_("Canada/New Brunswick"), ca_nb_hdy},
        -:  133:  {"CA_NF", N_("Canada/Newfoundland and Labrador"), ca_nf_hdy},
        -:  134:  {"CA_NS", N_("Canada/Nova Scotia"), ca_ns_hdy},
        -:  135:  {"CA_NW", N_("Canada/Northwest Territories"), ca_nw_hdy},
        -:  136:  {"CA_ON", N_("Canada/Ontario"), ca_on_hdy},
        -:  137:  {"CA_PE", N_("Canada/Prince Edward Island"), ca_pe_hdy},
        -:  138:  {"CA_QU", N_("Canada/Québec"), ca_qu_hdy},
        -:  139:  {"CA_SA", N_("Canada/Saskatchewan"), ca_sa_hdy},
        -:  140:  {"CA_YU", N_("Canada/Yukon"), ca_yu_hdy},
        -:  141:  {"CC", N_("Cocos Islands (Keeling)"), cc_hdy},
        -:  142:  {"CD", N_("Democratic Republic of Congo #"), cd_hdy},
        -:  143:  {"CF", N_("Central African Republic #"), cf_hdy},
        -:  144:  {"CG", N_("Republic of Congo #"), cg_hdy},
        -:  145:  {"CH_AG", N_("Switzerland/Aargau"), ch_ag_hdy},
        -:  146:  {"CH_AI", N_("Switzerland/Appenzell Innerrhoden"), ch_ai_hdy},
        -:  147:  {"CH_AR", N_("Switzerland/Appenzell Ausserrhoden"), ch_ar_hdy},
        -:  148:  {"CH_BE", N_("Switzerland/Bern"), ch_be_hdy},
        -:  149:  {"CH_BL", N_("Switzerland/Basel-Landschaft"), ch_bl_hdy},
        -:  150:  {"CH_BS", N_("Switzerland/Basel-Stadt"), ch_bs_hdy},
        -:  151:  {"CH_FR", N_("Switzerland/Fribourg"), ch_fr_hdy},
        -:  152:  {"CH_GE", N_("Switzerland/Genève"), ch_ge_hdy},
        -:  153:  {"CH_GL", N_("Switzerland/Glarus"), ch_gl_hdy},
        -:  154:  {"CH_GR", N_("Switzerland/Graubünden"), ch_gr_hdy},
        -:  155:  {"CH_JU", N_("Switzerland/Jura"), ch_ju_hdy},
        -:  156:  {"CH_LU", N_("Switzerland/Luzern"), ch_lu_hdy},
        -:  157:  {"CH_NE", N_("Switzerland/Neuchâtel"), ch_ne_hdy},
        -:  158:  {"CH_NW", N_("Switzerland/Nidwalden"), ch_nw_hdy},
        -:  159:  {"CH_OW", N_("Switzerland/Obwalden"), ch_ow_hdy},
        -:  160:  {"CH_SG", N_("Switzerland/St Gallen"), ch_sg_hdy},
        -:  161:  {"CH_SH", N_("Switzerland/Schaffhausen"), ch_sh_hdy},
        -:  162:  {"CH_SO", N_("Switzerland/Solothurn"), ch_so_hdy},
        -:  163:  {"CH_SZ", N_("Switzerland/Schwyz"), ch_sz_hdy},
        -:  164:  {"CH_TG", N_("Switzerland/Thurgau"), ch_tg_hdy},
        -:  165:  {"CH_TI", N_("Switzerland/Ticino"), ch_ti_hdy},
        -:  166:  {"CH_UR", N_("Switzerland/Uri"), ch_ur_hdy},
        -:  167:  {"CH_VD", N_("Switzerland/Vaud"), ch_vd_hdy},
        -:  168:  {"CH_VS", N_("Switzerland/Valais"), ch_vs_hdy},
        -:  169:  {"CH_ZG", N_("Switzerland/Zug"), ch_zg_hdy},
        -:  170:  {"CH_ZH", N_("Switzerland/Zürich"), ch_zh_hdy},
        -:  171:  {"CI", N_("Côte d'Ivoire"), ci_hdy},
        -:  172:  {"CK", N_("Cook Islands"), ck_hdy},
        -:  173:  {"CL", N_("Chile"), cl_hdy},
        -:  174:  {"CM", N_("Cameroon"), cm_hdy},
        -:  175:  {"CN", N_("China"), cn_hdy},
        -:  176:  {"CO", N_("Colombia"), co_hdy},
        -:  177:  {"CR", N_("Costa Rica"), cr_hdy},
        -:  178:  {"CU", N_("Cuba"), cu_hdy},
        -:  179:  {"CV", N_("Cape Verde"), cv_hdy},
        -:  180:  {"CX", N_("Christmas Islands"), cx_hdy},
        -:  181:  {"CY", N_("Cyprus"), cy_hdy},
        -:  182:  {"CZ", N_("Czech Republic"), cz_hdy},
        -:  183:  {"DE_BB", N_("Germany/Brandenburg"), de_bb_hdy},
        -:  184:  {"DE_BE", N_("Germany/Berlin"), de_be_hdy},
        -:  185:  {"DE_BW", N_("Germany/Baden-Württemberg"), de_bw_hdy},
        -:  186:  {"DE_BY", N_("Germany/Bavaria"), de_by_hdy},
        -:  187:  {"DE_HB", N_("Germany/Bremen"), de_hb_hdy},
        -:  188:  {"DE_HE", N_("Germany/Hesse"), de_he_hdy},
        -:  189:  {"DE_HH", N_("Germany/Hamburg"), de_hh_hdy},
        -:  190:  {"DE_MV", N_("Germany/Mecklenburg-West Pomerania"), de_mv_hdy},
        -:  191:  {"DE_NI", N_("Germany/Lower Saxony"), de_ni_hdy},
        -:  192:  {"DE_NW", N_("Germany/North Rhine-Westphalia"), de_nw_hdy},
        -:  193:  {"DE_RP", N_("Germany/Rhineland Palatinate"), de_rp_hdy},
        -:  194:  {"DE_SH", N_("Germany/Schleswig-Holstein"), de_sh_hdy},
        -:  195:  {"DE_SL", N_("Germany/Saarland"), de_sl_hdy},
        -:  196:  {"DE_SN", N_("Germany/Saxony"), de_sn_hdy},
        -:  197:  {"DE_ST", N_("Germany/Saxony-Anhalt"), de_st_hdy},
        -:  198:  {"DE_TH", N_("Germany/Thuringia"), de_th_hdy},
        -:  199:  {"DJ", N_("Djibouti"), dj_hdy},
        -:  200:  {"DK", N_("Denmark"), dk_hdy},
        -:  201:  {"DM", N_("Dominica"), dm_hdy},
        -:  202:  {"DO", N_("Dominican Republic"), do_hdy},
        -:  203:  {"DZ", N_("Algeria"), dz_hdy},
        -:  204:  {"EC", N_("Ecuador"), ec_hdy},
        -:  205:  {"EE", N_("Estonia"), ee_hdy},
        -:  206:  {"EG", N_("Egypt"), eg_hdy},
        -:  207:  {"EH", N_("Western Sahara"), eh_hdy},
        -:  208:  {"ER", N_("Eritrea"), er_hdy},
        -:  209:  {"ES", N_("Spain"), es_hdy},
        -:  210:  {"ET", N_("Ethiopia"), et_hdy},
        -:  211:  {"FI", N_("Finland"), fi_hdy},
        -:  212:  {"FJ", N_("Fiji #"), fj_hdy},
        -:  213:  {"FK", N_("Falkland Islands (Malvinas)"), fk_hdy},
        -:  214:  {"FM", N_("Federated States of Micronesia"), fm_hdy},
        -:  215:  {"FO", N_("Faroes"), fo_hdy},
        -:  216:  {"FR", N_("France"), fr_hdy},
        -:  217:  {"GA", N_("Gabon #"), ga_hdy},
        -:  218:  {"GB_EN", N_("Great Britain/England and Wales"), gb_en_hdy},
        -:  219:  {"GB_NI", N_("Great Britain/Northern Ireland"), gb_ni_hdy},
        -:  220:  {"GB_SL", N_("Great Britain/Scotland"), gb_sl_hdy},
        -:  221:  {"GD", N_("Grenada"), gd_hdy},
        -:  222:  {"GE", N_("Georgia"), ge_hdy},
        -:  223:  {"GF", N_("French Guiana"), gf_hdy},
        -:  224:  {"GH", N_("Ghana"), gh_hdy},
        -:  225:  {"GI", N_("Gibraltar"), gi_hdy},
        -:  226:  {"GL", N_("Greenland"), gl_hdy},
        -:  227:  {"GM", N_("Gambia"), gm_hdy},
        -:  228:  {"GN", N_("Guinea"), gn_hdy},
        -:  229:  {"GP", N_("Guadeloupe"), gp_hdy},
        -:  230:  {"GQ", N_("Equatorial Guinea"), gq_hdy},
        -:  231:  {"GR", N_("Greece"), gr_hdy},
        -:  232:  {"GS", N_("South Georgia and South Sandwich Islands"), gs_hdy},
        -:  233:  {"GT", N_("Guatemala"), gt_hdy},
        -:  234:  {"GU", N_("Guam"), gu_hdy},
        -:  235:  {"GW", N_("Guinea-Bissau #"), gw_hdy},
        -:  236:  {"GY", N_("Guyana #"), gy_hdy},
        -:  237:  {"HK", N_("Hong Kong"), hk_hdy},
        -:  238:  {"HM", N_("Heard and Mc Donald Islands"), hm_hdy},
        -:  239:  {"HN", N_("Honduras"), hn_hdy},
        -:  240:  {"HR", N_("Croatia"), hr_hdy},
        -:  241:  {"HT", N_("Haiti"), ht_hdy},
        -:  242:  {"HU", N_("Hungary"), hu_hdy},
        -:  243:  {"ID", N_("Indonesia #"), id_hdy},
        -:  244:  {"IE", N_("Ireland"), ie_hdy},
        -:  245:  {"IL", N_("Israel"), il_hdy},
        -:  246:  {"IN", N_("India #"), in_hdy},
        -:  247:  {"IQ", N_("Iraq"), iq_hdy},
        -:  248:  {"IR", N_("Islamic Republic of Iran"), ir_hdy},
        -:  249:  {"IS", N_("Iceland"), is_hdy},
        -:  250:  {"IT", N_("Italy"), it_hdy},
        -:  251:  {"JM", N_("Jamaica"), jm_hdy},
        -:  252:  {"JO", N_("Jordan"), jo_hdy},
        -:  253:  {"JP", N_("Japan"), jp_hdy},
        -:  254:  {"KE", N_("Kenya #"), ke_hdy},
        -:  255:  {"KG", N_("Kyrgyzstan"), kg_hdy},
        -:  256:  {"KH", N_("Cambodia #"), kh_hdy},
        -:  257:  {"KI", N_("Kiribati #"), ki_hdy},
        -:  258:  {"KM", N_("Comoros"), km_hdy},
        -:  259:  {"KN", N_("St Kitts and Nevis"), kn_hdy},
        -:  260:  {"KP", N_("Democratic People's Republic of Korea"), kp_hdy},
        -:  261:  {"KR", N_("Republic of Korea"), kr_hdy},
        -:  262:  {"KW", N_("Kuwait"), kw_hdy},
        -:  263:  {"KY", N_("Cayman Islands"), ky_hdy},
        -:  264:  {"KZ", N_("Kazakhstan"), kz_hdy},
        -:  265:  {"LA", N_("Laos People's Democratic Republic #"), la_hdy},
        -:  266:  {"LB", N_("Lebanon"), lb_hdy},
        -:  267:  {"LC", N_("St Lucia"), lc_hdy},
        -:  268:  {"LI", N_("Liechtenstein"), li_hdy},
        -:  269:  {"LK", N_("Sri Lanka #"), lk_hdy},
        -:  270:  {"LR", N_("Liberia"), lr_hdy},
        -:  271:  {"LS", N_("Lesotho"), ls_hdy},
        -:  272:  {"LT", N_("Lithuania"), lt_hdy},
        -:  273:  {"LU", N_("Luxembourg"), lu_hdy},
        -:  274:  {"LV", N_("Latvia"), lv_hdy},
        -:  275:  {"LY", N_("Libyan Arab Jamahiriya (Libya)"), ly_hdy},
        -:  276:  {"MA", N_("Morocco"), ma_hdy},
        -:  277:  {"MC", N_("Monaco"), mc_hdy},
        -:  278:  {"MD", N_("Republic of Moldova"), md_hdy},
        -:  279:  {"MG", N_("Madagascar #"), mg_hdy},
        -:  280:  {"MH", N_("Marshall Islands"), mh_hdy},
        -:  281:  {"MK", N_("Former Yugoslav Republic of Macedonia"), mk_hdy},
        -:  282:  {"ML", N_("Mali"), ml_hdy},
        -:  283:  {"MN", N_("Mongolia #"), mn_hdy},
        -:  284:  {"MO", N_("Macau"), mo_hdy},
        -:  285:  {"MP", N_("Northern Marian Islands (Saipan)"), mp_hdy},
        -:  286:  {"MQ", N_("Martinique"), mq_hdy},
        -:  287:  {"MR", N_("Mauritania"), mr_hdy},
        -:  288:  {"MS", N_("Montserrat"), ms_hdy},
        -:  289:  {"MT", N_("Malta"), mt_hdy},
        -:  290:  {"MU", N_("Mauritius"), mu_hdy},
        -:  291:  {"MV", N_("Maldives"), mv_hdy},
        -:  292:  {"MW", N_("Malawi"), mw_hdy},
        -:  293:  {"MX", N_("Mexico"), mx_hdy},
        -:  294:  {"MY", N_("Malaysia #"), my_hdy},
        -:  295:  {"MZ", N_("Mozambique"), mz_hdy},
        -:  296:  {"NA", N_("Namibia"), na_hdy},
        -:  297:  {"NC", N_("New Caledonia"), nc_hdy},
        -:  298:  {"NE", N_("Niger"), ne_hdy},
        -:  299:  {"NF", N_("Norfolk Island"), nf_hdy},
        -:  300:  {"NG", N_("Nigeria"), ng_hdy},
        -:  301:  {"NI", N_("Nicaragua"), ni_hdy},
        -:  302:  {"NL", N_("Netherlands"), nl_hdy},
        -:  303:  {"NM", N_("Myanmar (Burma) #"), nm_hdy},
        -:  304:  {"NO", N_("Norway"), no_hdy},
        -:  305:  {"NP", N_("Nepal #"), np_hdy},
        -:  306:  {"NR", N_("Nauru"), nr_hdy},
        -:  307:  {"NU", N_("Niue"), nu_hdy},
        -:  308:  {"NZ", N_("New Zealand"), nz_hdy},
        -:  309:  {"OM", N_("Oman"), om_hdy},
        -:  310:  {"PA", N_("Panama"), pa_hdy},
        -:  311:  {"PE", N_("Peru"), pe_hdy},
        -:  312:  {"PF", N_("French Polynesia"), pf_hdy},
        -:  313:  {"PG", N_("Papua New Guinea"), pg_hdy},
        -:  314:  {"PH", N_("Philippines"), ph_hdy},
        -:  315:  {"PK", N_("Pakistan"), pk_hdy},
        -:  316:  {"PL", N_("Poland"), pl_hdy},
        -:  317:  {"PM", N_("Saint-Pierre and Miquelon"), pm_hdy},
        -:  318:  {"PN", N_("Pitcairn"), pn_hdy},
        -:  319:  {"PR", N_("Puerto Rico"), pr_hdy},
        -:  320:  {"PT", N_("Portugal"), pt_hdy},
        -:  321:  {"PW", N_("Palau"), pw_hdy},
        -:  322:  {"PY", N_("Paraguay"), py_hdy},
        -:  323:  {"QA", N_("Qatar"), qa_hdy},
        -:  324:  {"RE", N_("Réunion"), re_hdy},
        -:  325:  {"RO", N_("Romania"), ro_hdy},
        -:  326:  {"RU", N_("Russian Federation"), ru_hdy},
        -:  327:  {"RW", N_("Rwanda"), rw_hdy},
        -:  328:  {"SA", N_("Saudi Arabia"), sa_hdy},
        -:  329:  {"SB", N_("Solomon Islands"), sb_hdy},
        -:  330:  {"SC", N_("Seychellen"), sc_hdy},
        -:  331:  {"SD", N_("Sudan"), sd_hdy},
        -:  332:  {"SE", N_("Sweden"), se_hdy},
        -:  333:  {"SG", N_("Singapore #"), sg_hdy},
        -:  334:  {"SH", N_("St Helena"), sh_hdy},
        -:  335:  {"SI", N_("Slovenia"), si_hdy},
        -:  336:  {"SJ", N_("Svalbard and Jan Mayen Islands"), sj_hdy},
        -:  337:  {"SK", N_("Slovakia"), sk_hdy},
        -:  338:  {"SL", N_("Sierra Leone"), sl_hdy},
        -:  339:  {"SM", N_("San Marino"), sm_hdy},
        -:  340:  {"SN", N_("Senegal"), sn_hdy},
        -:  341:  {"SO", N_("Somalia"), so_hdy},
        -:  342:  {"SR", N_("Suriname #"), sr_hdy},
        -:  343:  {"ST", N_("Sao Tomé and Principe"), st_hdy},
        -:  344:  {"SV", N_("El Salvador"), sv_hdy},
        -:  345:  {"SY", N_("Syrian Arab Republic (Syria)"), sy_hdy},
        -:  346:  {"SZ", N_("Swaziland"), sz_hdy},
        -:  347:  {"TC", N_("Turks and Caicos Islands"), tc_hdy},
        -:  348:  {"TD", N_("Chad"), td_hdy},
        -:  349:  {"TG", N_("Togo #"), tg_hdy},
        -:  350:  {"TH", N_("Thailand #"), th_hdy},
        -:  351:  {"TJ", N_("Tajikistan"), tj_hdy},
        -:  352:  {"TK", N_("Tokelau"), tk_hdy},
        -:  353:  {"TM", N_("Turkmenistan"), tm_hdy},
        -:  354:  {"TN", N_("Tunisia"), tn_hdy},
        -:  355:  {"TO", N_("Tonga"), to_hdy},
        -:  356:  {"TR", N_("Turkey"), tr_hdy},
        -:  357:  {"TT", N_("Trinidad and Tobago #"), tt_hdy},
        -:  358:  {"TV", N_("Tuvalu"), tv_hdy},
        -:  359:  {"TW", N_("Taiwan"), tw_hdy},
        -:  360:  {"TZ", N_("Tanzania"), tz_hdy},
        -:  361:  {"UA", N_("Ukraine"), ua_hdy},
        -:  362:  {"UG", N_("Uganda"), ug_hdy},
        -:  363:  {"US_AK", N_("United States/Alaska"), us_ak_hdy},
        -:  364:  {"US_AL", N_("United States/Alabama"), us_al_hdy},
        -:  365:  {"US_AR", N_("United States/Arkansas"), us_ar_hdy},
        -:  366:  {"US_AZ", N_("United States/Arizona"), us_az_hdy},
        -:  367:  {"US_CA", N_("United States/California"), us_ca_hdy},
        -:  368:  {"US_CO", N_("United States/Colorado"), us_co_hdy},
        -:  369:  {"US_CT", N_("United States/Connecticut"), us_ct_hdy},
        -:  370:  {"US_DC", N_("United States/District of Columbia"), us_dc_hdy},
        -:  371:  {"US_DE", N_("United States/Delaware"), us_de_hdy},
        -:  372:  {"US_FL", N_("United States/Florida"), us_fl_hdy},
        -:  373:  {"US_GA", N_("United States/Georgia"), us_ga_hdy},
        -:  374:  {"US_HI", N_("United States/Hawaii"), us_hi_hdy},
        -:  375:  {"US_IA", N_("United States/Iowa"), us_ia_hdy},
        -:  376:  {"US_ID", N_("United States/Idaho"), us_id_hdy},
        -:  377:  {"US_IL", N_("United States/Illinois"), us_il_hdy},
        -:  378:  {"US_IN", N_("United States/Indiana"), us_in_hdy},
        -:  379:  {"US_KS", N_("United States/Kansas"), us_ks_hdy},
        -:  380:  {"US_KY", N_("United States/Kentucky"), us_ky_hdy},
        -:  381:  {"US_LA", N_("United States/Louisiana"), us_la_hdy},
        -:  382:  {"US_MA", N_("United States/Massachusetts"), us_ma_hdy},
        -:  383:  {"US_MD", N_("United States/Maryland"), us_md_hdy},
        -:  384:  {"US_ME", N_("United States/Maine"), us_me_hdy},
        -:  385:  {"US_MI", N_("United States/Michigan"), us_mi_hdy},
        -:  386:  {"US_MN", N_("United States/Minnesota"), us_mn_hdy},
        -:  387:  {"US_MO", N_("United States/Missouri"), us_mo_hdy},
        -:  388:  {"US_MS", N_("United States/Mississippi"), us_ms_hdy},
        -:  389:  {"US_MT", N_("United States/Montana"), us_mt_hdy},
        -:  390:  {"US_NC", N_("United States/North Carolina"), us_nc_hdy},
        -:  391:  {"US_ND", N_("United States/North Dakota"), us_nd_hdy},
        -:  392:  {"US_NE", N_("United States/Nebraska"), us_ne_hdy},
        -:  393:  {"US_NH", N_("United States/New Hampshire"), us_nh_hdy},
        -:  394:  {"US_NJ", N_("United States/New Jersey"), us_nj_hdy},
        -:  395:  {"US_NM", N_("United States/New Mexico"), us_nm_hdy},
        -:  396:  {"US_NV", N_("United States/Nevada"), us_nv_hdy},
        -:  397:  {"US_NY", N_("United States/New York"), us_ny_hdy},
        -:  398:  {"US_OH", N_("United States/Ohio"), us_oh_hdy},
        -:  399:  {"US_OK", N_("United States/Oklahoma"), us_ok_hdy},
        -:  400:  {"US_OR", N_("United States/Oregon"), us_or_hdy},
        -:  401:  {"US_PA", N_("United States/Pennsylvania"), us_pa_hdy},
        -:  402:  {"US_RI", N_("United States/Rhode Island"), us_ri_hdy},
        -:  403:  {"US_SC", N_("United States/South Carolina"), us_sc_hdy},
        -:  404:  {"US_SD", N_("United States/South Dakota"), us_sd_hdy},
        -:  405:  {"US_TN", N_("United States/Tennessee"), us_tn_hdy},
        -:  406:  {"US_TX", N_("United States/Texas"), us_tx_hdy},
        -:  407:  {"US_UT", N_("United States/Utah"), us_ut_hdy},
        -:  408:  {"US_VA", N_("United States/Virginia"), us_va_hdy},
        -:  409:  {"US_VT", N_("United States/Vermont"), us_vt_hdy},
        -:  410:  {"US_WA", N_("United States/Washington"), us_wa_hdy},
        -:  411:  {"US_WI", N_("United States/Wisconsin"), us_wi_hdy},
        -:  412:  {"US_WV", N_("United States/West Virginia"), us_wv_hdy},
        -:  413:  {"US_WY", N_("United States/Wyoming"), us_wy_hdy},
        -:  414:  {"UY", N_("Uruguay"), uy_hdy},
        -:  415:  {"UZ", N_("Uzbekistan"), uz_hdy},
        -:  416:  {"VC", N_("St Vincent and Grenadines"), vc_hdy},
        -:  417:  {"VE", N_("Venezuela"), ve_hdy},
        -:  418:  {"VG", N_("British Virgin Islands"), vg_hdy},
        -:  419:  {"VI", N_("U.S. Virgin Islands"), vi_hdy},
        -:  420:  {"VN", N_("Viet Nam"), vn_hdy},
        -:  421:  {"VU", N_("Vanuatu"), vu_hdy},
        -:  422:  {"WF", N_("Wallis and Futuna Islands"), wf_hdy},
        -:  423:  {"WS", N_("Samoa"), ws_hdy},
        -:  424:  {"YE", N_("Yemen"), ye_hdy},
        -:  425:  {"YT", N_("Mayotte"), yt_hdy},
        -:  426:  {"YU", N_("Serbia and Montenegro"), yu_hdy},
        -:  427:  {"ZA", N_("South Africa"), za_hdy},
        -:  428:  {"ZM", N_("Zambia"), zm_hdy},
        -:  429:  {"ZW", N_("Zimbabwe"), zw_hdy},
        -:  430:#endif /* !HD_TOP20CC */
        -:  431:  {NULL, NULL, NULL}
        -:  432:};
        -:  433:
        -:  434:/*! U.S. holidays observance mode. */
        -:  435:int observe_us_hdy = SAFR_SUMO;
        -:  436:
        -:  437:/*! The ISO-3166 character code used in the country specific `hdy_*()' functions. */
        -:  438:char *ptr_cc_id = (char *) NULL;
        -:  439:
        -:  440:/*! Toggle which indicates to use a different CC in output. */
        -:  441:Bool use_other_cc = FALSE;
        -:  442:
        -:  443:/*!
        -:  444:   The table which contains all the holiday texts
        -:  445:     is an unterminated vector of `Ht_struct'.
        -:  446:*/
        -:  447:const Ht_struct hd_text[] = {
        -:  448:/*
        -:  449:  { int ht_id, char *ht_text },
        -:  450:*/
        -:  451:  /*
        -:  452:   *** Translators, please keep in mind to translate all trailing
        -:  453:   *** holiday texts to texts which have a maximum length of:
        -:  454:   *** 34 characters (if the COUNTRY-CODE suffix has 2 characters)
        -:  455:   *** 33 characters (if the COUNTRY-CODE suffix has 3 characters)
        -:  456:   *** 32 characters (if the COUNTRY-CODE suffix has 4 characters)
        -:  457:   *** 31 characters (if the COUNTRY-CODE_TERRITORY suffix has 5 characters).
        -:  458:   */
        -:  459:  {HD_1ST_ADVENT, N_("1st Advent")},
        -:  460:  {HD_1ST_SUNDAY_IN_LENT, N_("1st Sunday in Lent")},
        -:  461:  {HD_2ND_ADVENT, N_("2nd Advent")},
        -:  462:  {HD_2ND_SUNDAY_IN_LENT, N_("2nd Sunday in Lent")},
        -:  463:  {HD_3RD_ADVENT, N_("3rd Advent")},
        -:  464:  {HD_3RD_SUNDAY_IN_LENT, N_("3rd Sunday in Lent")},
        -:  465:  {HD_4TH_ADVENT, N_("4th Advent")},
        -:  466:  {HD_4TH_SUNDAY_IN_LENT, N_("4th Sunday in Lent")},
        -:  467:  {HD_7_5_3_FESTIVAL, N_("7-5-3 Festival")},
        -:  468:  {HD_ABORIGINES_DAY, N_("Aborigines Day")},
        -:  469:  {HD_ALL_FOOLS_DAY, N_("All Fool's Day")},
        -:  470:  {HD_ALL_SAINTS_DAY, N_("All Saints' Day")},
        -:  471:  {HD_ALL_SOULS_DAY, N_("All Souls' Day")},
        -:  472:  {HD_ALPHABET_DAY, N_("Alphabet Day")},
        -:  473:  {HD_ANNIVERSARY_OF_AUCKLAND, N_("Anniversary of Auckland")},
        -:  474:  {HD_ANNIVERSARY_OF_CANTERBURY_NORTH, N_("Anniversary of Canterbury North")},
        -:  475:  {HD_ANNIVERSARY_OF_CANTERBURY_SOUTH, N_("Anniversary of Canterbury South")},
        -:  476:  {HD_ANNIVERSARY_OF_CHATHAM_ISLANDS, N_("Anniversary of Chatham Islands")},
        -:  477:  {HD_ANNIVERSARY_OF_HAWKES_BAY, N_("Anniversary of Hawkes' Bay")},
        -:  478:  {HD_ANNIVERSARY_OF_MARLBOROUGH, N_("Anniversary of Marlborough")},
        -:  479:  {HD_ANNIVERSARY_OF_NELSON, N_("Anniversary of Nelson")},
        -:  480:  {HD_ANNIVERSARY_OF_OTAGO, N_("Anniversary of Otago")},
        -:  481:  {HD_ANNIVERSARY_OF_SOUTHLAND, N_("Anniversary of Southland")},
        -:  482:  {HD_ANNIVERSARY_OF_TARANAKI, N_("Anniversary of Taranaki")},
        -:  483:  {HD_ANNIVERSARY_OF_WELLINGTON, N_("Anniversary of Wellington")},
        -:  484:  {HD_ANNIVERSARY_OF_WESTLAND, N_("Anniversary of Westland")},
        -:  485:  {HD_ANZAC_DAY, N_("Anzac Day")},
        -:  486:  {HD_ARBOR_DAY, N_("Arbor Day")},
        -:  487:  {HD_ARMED_FORCES_DAY, N_("Armed Forces Day")},
        -:  488:  {HD_ARMISTICE_DAY, N_("Armistice Day")},
        -:  489:  {HD_ASH_MONDAY, N_("Ash Monday")},
        -:  490:  {HD_ASH_WEDNESDAY, N_("Ash Wednesday")},
        -:  491:  {HD_BAHAI_ASCENSION_OF_ABDUL_BAHA, N_("Ascension of Abdu'l-Baha")},
        -:  492:  {HD_BAHAI_ASCENSION_OF_BAHA_ULLAH, N_("Ascension of Baha'u'llah")},
        -:  493:  {HD_BAHAI_BIRTH_OF_BAHA_ULLAH, N_("Birth of Baha'u'llah")},
        -:  494:  {HD_BAHAI_BIRTH_OF_THE_BAB, N_("Birth of the Bab")},
        -:  495:  {HD_BAHAI_DAY_OF_THE_COVENANT, N_("Day of the Covenant")},
        -:  496:  {HD_BAHAI_DECLARATION_OF_THE_BAB, N_("Declaration of the Bab")},
        -:  497:  {HD_BAHAI_FIRST_DAY_OF_RIDVAN, N_("First Day of Ridvan")},
        -:  498:  {HD_BAHAI_MARTYRDOM_OF_THE_BAB, N_("Martyrdom of the Bab")},
        -:  499:  {HD_BAHAI_NEW_YEARS_DAY, N_("Bahá'i New Year's Day")},
        -:  500:  {HD_BAHAI_NINTH_DAY_OF_RIDVAN, N_("Ninth Day of Ridvan")},
        -:  501:  {HD_BAHAI_TWELFTH_DAY_OF_RIDVAN, N_("Twelfth Day of Ridvan")},
        -:  502:  {HD_BANK_HOLIDAY, N_("Bank Holiday")},
        -:  503:  {HD_BASQUE_NATIONAL_DAY, N_("Basque National Day")},
        -:  504:  {HD_BATTLE_OF_BOYNE, N_("Battle of Boyne")},
        -:  505:  {HD_BATTLE_OF_PUEBLA, N_("Battle of Puebla")},
        -:  506:  {HD_BEGINNING_OF_FINANCIAL_YEAR, N_("Beginning of Financial Year")},
        -:  507:  {HD_BENITO_JUAREZ_DAY, N_("Benito Juárez Day")},
        -:  508:  {HD_BODHIDHARMAS_BIRTHDAY, N_("Bodhidharma's Birthday")},
        -:  509:  {HD_BOSSES_DAY, N_("Bosses' Day")},
        -:  510:  {HD_BOXING_DAY, N_("Boxing Day")},
        -:  511:  {HD_BRINGING_HOME_THE_HERDS_DAY, N_("Bringing Home the Herds Day")},
        -:  512:  {HD_BRINGING_IN_THE_HARVEST_DAY, N_("Bringing in the Harvest Day")},
        -:  513:  {HD_BUDDHAS_BIRTHDAY, N_("Buddha's Birthday")},
        -:  514:  {HD_BURNS_NIGHT, N_("Burns Night")},
        -:  515:  {HD_CAMOES_DAY, N_("Camoes Day")},
        -:  516:  {HD_CARNIVAL, N_("Carnival")},
        -:  517:  {HD_CELTIC_BELTANE, N_("Beltane")},
        -:  518:  {HD_CELTIC_IMBOLG, N_("Imbolg")},
        -:  519:  {HD_CELTIC_LUGHNASA, N_("Lughnasa")},
        -:  520:  {HD_CELTIC_SAMHAIN, N_("Samhain/Celtic New Year's Day")},
        -:  521:  {HD_CHILDRENS_DAY, N_("Children's Day")},
        -:  522:  {HD_CHINESE_CYCLE, N_("Cycle")},
        -:  523:  {HD_CHINESE_NEW_YEARS_DAY, N_("Chinese New Year's Day")},
        -:  524:  {HD_CHINESE_NEW_YEARS_EVE, N_("Chinese New Year's Eve")},
        -:  525:  {HD_CHRISTMAS_DAY, N_("Christmas Day")},
        -:  526:  {HD_CHRISTMAS_EVE, N_("Christmas Eve")},
        -:  527:  {HD_CHRISTS_ASCENSION_DAY, N_("Christ's Ascension Day")},
        -:  528:  {HD_CHRYSANTHENUM_DAY, N_("Chrysanthenum Day")},
        -:  529:  {HD_CITIZENSHIP_DAY, N_("Citizenship Day")},
        -:  530:  {HD_CIVIC_HOLIDAY, N_("Civic Holiday")},
        -:  531:  {HD_COLUMBUS_DAY, N_("Columbus Day")},
        -:  532:  {HD_COMING_OF_AGE_DAY, N_("Coming of Age Day")},
        -:  533:  {HD_CONFUCIUS_BIRTHDAY, N_("Confucius' Birthday")},
        -:  534:  {HD_CONSTITUTION_ANNIVERSARY, N_("Constitution Anniversary")},
        -:  535:  {HD_COPTIC_NEW_YEARS_DAY, N_("Coptic New Year's Day")},
        -:  536:  {HD_COSMONAUTS_DAY, N_("Cosmonauts' Day")},
        -:  537:  {HD_CROSS_RAISING_DAY, N_("Cross Raising Day")},
        -:  538:  {HD_CULTURE_DAY, N_("Culture Day")},
        -:  539:  {HD_DAY_AFTER_MID_AUTUMN_FESTIVAL, N_("Day after Mid-Autumn Festival")},
        -:  540:  {HD_DAY_AFTER_TOMB_SWEEPING_DAY, N_("Day after Tomb-Sweeping Day")},
        -:  541:  {HD_DAY_OF_ANDALUCIA, N_("Day of Andalucia")},
        -:  542:  {HD_DAY_OF_CATALONIA, N_("Day of Catalonia")},
        -:  543:  {HD_DAY_OF_GALICIA, N_("Day of Galicia")},
        -:  544:  {HD_DAY_OF_PRAYER_AND_REPENTANCE, N_("Day of Prayer and Repentance")},
        -:  545:  {HD_DAY_OF_RECONCILIATION, N_("Day of Reconciliation")},
        -:  546:  {HD_DEFENDERS_OF_MOTHERLAND_DAY, N_("Defenders of Motherland Day")},
        -:  547:  {HD_DOUBLE_9_DAY, N_("Double-9 Day")},
        -:  548:  {HD_DRAGON_BOAT_FESTIVAL, N_("Dragon Boat Festival")},
        -:  549:  {HD_DYNASTY_DAY, N_("Dynasty Day")},
        -:  550:  {HD_EASTER_MONDAY, N_("Easter Monday")},
        -:  551:  {HD_EASTER_SUNDAY, N_("Easter Sunday")},
        -:  552:  {HD_ECLIPSE_LUNAR, N_("Lunar Eclipse")},
        -:  553:  {HD_ECLIPSE_SOLAR, N_("Solar Eclipse")},
        -:  554:  {HD_ECLIPSE_TYPE_ANNULAR, N_("Annular")},
        -:  555:  {HD_ECLIPSE_TYPE_PARTIAL, N_("Partial")},
        -:  556:  {HD_ECLIPSE_TYPE_PENUMBRAL, N_("Penumbral")},
        -:  557:  {HD_ECLIPSE_TYPE_TOTAL, N_("Total")},
        -:  558:  {HD_EINDHOVENS_LIBERATION, N_("Eindhoven's Liberation")},
        -:  559:  {HD_ELECTION_DAY, N_("Election Day")},
        -:  560:  {HD_EMPERORS_BIRTHDAY, N_("Emperor's Birthday")},
        -:  561:  {HD_EQUINOX_DAY, N_("Equinox Day")},
        -:  562:  {HD_ETHIOPIC_NEW_YEARS_DAY, N_("Ethiopic New Year's Day")},
        -:  563:  {HD_FATHERS_DAY, N_("Father's Day")},
        -:  564:  {HD_FEAST_OF_CORPUS_CHRISTI, N_("Feast of Corpus Christi")},
        -:  565:  {HD_FEAST_OF_FORTUNE, N_("Feast of Fortune")},
        -:  566:  {HD_FEAST_OF_HEART_JESUS, N_("Feast of Heart Jesus")},
        -:  567:  {HD_FESTIVAL_OF_LANTERNS, N_("Festival of Lanterns")},
        -:  568:  {HD_FESTIVAL_OF_SADEH, N_("Festival of Sadeh")},
        -:  569:  {HD_FLAG_DAY, N_("Flag Day")},
        -:  570:  {HD_FLEMISH_CULTURE_DAY, N_("Flemish Culture Day")},
        -:  571:  {HD_FOUNDING_OF_THE_COMMUNIST_PARTY, N_("Founding of the Communist Party")},
        -:  572:  {HD_FRENCH_CULTURE_DAY, N_("French Culture Day")},
        -:  573:  {HD_FRENCH_REVOLUTIONARY, N_("French Revolutionary")},
        -:  574:  {HD_FRIENDSHIP_DAY, N_("Friendship Day")},
        -:  575:  {HD_GERMAN_UNITY_DAY, N_("German Unity Day")},
        -:  576:  {HD_GOOD_FRIDAY, N_("Good Friday")},
        -:  577:  {HD_GOOD_SATURDAY, N_("Good Saturday/Easter Eve")},
        -:  578:  {HD_GRANDPARENTS_DAY, N_("Grandparents' Day")},
        -:  579:  {HD_GREENERY_DAY, N_("Greenery Day")},
        -:  580:  {HD_GROTTO_DAY, N_("Grotto Day")},
        -:  581:  {HD_GROUNDHOG_DAY, N_("Groundhog Day")},
        -:  582:  {HD_GUADALUPE_VIRGINS_DAY, N_("Guadalupe Virgin's Day")},
        -:  583:  {HD_GUY_FAWKES_DAY, N_("Guy Fawkes Day")},
        -:  584:  {HD_HALLOWEEN, N_("Halloween")},
        -:  585:  {HD_HEALTH_AND_SPORTS_DAY, N_("Health and Sport's Day")},
        -:  586:  {HD_HEB_HANNUKAH, N_("Hannukah/Festival of Lights")},
        -:  587:  {HD_HEB_LAG_BOMER, N_("Lag B'Omer")},
        -:  588:  {HD_HEB_PESACH, N_("Pesach/Passover")},
        -:  589:  {HD_HEB_PURIM, N_("Purim/Feast of Lots")},
        -:  590:  {HD_HEB_ROSH_HASHANA, N_("Rosh Hashana/New Year's Day")},
        -:  591:  {HD_HEB_SHAVUOT, N_("Shavuot/Giving of the Torah")},
        -:  592:  {HD_HEB_SHUSHAN_PURIM, N_("Shushan Purim")},
        -:  593:  {HD_HEB_SIMCHAT_TORAH, N_("Simchat Torah")},
        -:  594:  {HD_HEB_SUKKOT, N_("Sukkot/Feast of Tabernacles")},
        -:  595:  {HD_HEB_TISHA_BAV, N_("Tisha B'Av/Fasting Day")},
        -:  596:  {HD_HEB_TU_BSHEVAT, N_("Tu B'Shevat/New Year of Trees")},
        -:  597:  {HD_HEB_YOM_HASHOAH, N_("Yom Hashoah/Holocaust Memorial")},
        -:  598:  {HD_HEB_YOM_HAZIKARON, N_("Yom Hazikaron/Soldiers Memorial")},
        -:  599:  {HD_HEB_YOM_HA_AZMAUT, N_("Yom Ha Azmaut/Independence Day")},
        -:  600:  {HD_HEB_YOM_KIPPUR, N_("Yom Kippur/Atonement Day")},
        -:  601:  {HD_HEB_YOM_YERUSHALAYIM, N_("Yom Yerushalayim/Jerusalem Day")},
        -:  602:  {HD_HOLY_INNOCENTS_DAY, N_("Holy Innocent's Day")},
        -:  603:  {HD_HOLY_TRINITY, N_("Holy Trinity")},
        -:  604:  {HD_HURAVEE_DAY, N_("Huravee Day")},
        -:  605:  {HD_INDEPENDENCE_DAY, N_("Independence Day")},
        -:  606:  {HD_INDEPENDENCE_MOVEMENT_DAY, N_("Independence Movement Day")},
        -:  607:  {HD_INDEPENDENCE_PROCLAMATION, N_("Independence Proclamation")},
        -:  608:  {HD_INDIAN_NEW_YEARS_DAY, N_("Indian New Year's Day")},
        -:  609:  {HD_ISL_AGA_KHANS_BIRTHDAY, N_("Aga Khan's Birthday")},
        -:  610:  {HD_ISL_ASHURA, N_("Ashura'")},
        -:  611:  {HD_ISL_EID_AL_ADHA, N_("Eid-al-Adha")},
        -:  612:  {HD_ISL_EID_AL_FITR, N_("Eid-al-Fitr")},
        -:  613:  {HD_ISL_EID_I_MILAD_UN_NABI, N_("Eid-i-Milad-un-Nabi")},
        -:  614:  {HD_ISL_GHADIR, N_("Ghadir")},
        -:  615:  {HD_ISL_IMAMAT_DAY, N_("Imamat Day")},
        -:  616:  {HD_ISL_NEW_YEARS_DAY, N_("Islamic New Year's Day")},
        -:  617:  {HD_ISL_NUZUL_AL_QURAN, N_("Nuzul-al-Qur'an")},
        -:  618:  {HD_ISL_QUDS_DAY, N_("Quds Day")},
        -:  619:  {HD_ISL_RAMADAN, N_("Ramadan")},
        -:  620:  {HD_ISL_SHAB_E_BARAT, N_("Shab-e-Bara't")},
        -:  621:  {HD_ISL_SHAB_E_MIRAJ, N_("Shab-e-Mi'raj")},
        -:  622:  {HD_ISL_SHAB_E_QADR, N_("Shab-e Qadr")},
        -:  623:  {HD_ISL_WAQF_AL_ARAFAT, N_("Waqf-al-Arafat")},
        -:  624:  {HD_JAPANESE_NEW_YEARS_DAY, N_("Japanese New Year's Day")},
        -:  625:  {HD_JAPANESE_NEW_YEARS_EVE, N_("Japanese New Year's Eve")},
        -:  626:  {HD_JESUS_CIRCUMCISION, N_("Jesus' Circumcision")},
        -:  627:  {HD_KWANZAA, N_("Kwanzaa")},
        -:  628:  {HD_LABOUR_DAY, N_("Labour Day")},
        -:  629:  {HD_LABOUR_THANKSGIVING_DAY, N_("Labour Thanksgiving Day")},
        -:  630:  {HD_LAO_TZES_BIRTHDAY, N_("Lao Tze's Birthday")},
        -:  631:  {HD_LIBERATION_DAY, N_("Liberation Day")},
        -:  632:  {HD_MARINE_DAY, N_("Marine Day")},
        -:  633:  {HD_MARTINIMAS, N_("Martinimas")},
        -:  634:  {HD_MARTIN_LUTHER_KINGS_DAY, N_("Martin L. King's Day")},
        -:  635:  {HD_MARTYRS_DAY, N_("Martyrs' Day")},
        -:  636:  {HD_MARYS_ANNUNCIATION_DAY, N_("Mary's Annunciation Day")},
        -:  637:  {HD_MARYS_ASCENSION_DAY, N_("Mary's Ascension Day")},
        -:  638:  {HD_MARYS_CANDLEMAS, N_("Mary's Candlemas")},
        -:  639:  {HD_MARYS_EXPECTATION, N_("Mary's Expectation")},
        -:  640:  {HD_MARYS_IMMACULATE_CONCEPTION, N_("Mary's Immaculate Conception")},
        -:  641:  {HD_MARYS_MATERNITY, N_("Mary's Maternity")},
        -:  642:  {HD_MARYS_NAME, N_("Mary's Name")},
        -:  643:  {HD_MARYS_NATIVITY, N_("Mary's Nativity")},
        -:  644:  {HD_MARYS_SACRIFICE, N_("Mary's Sacrifice")},
        -:  645:  {HD_MARYS_VISITATION, N_("Mary's Visitation")},
        -:  646:  {HD_MARY_BLESSED_VIRGIN, N_("Mary - Blessed Virgin")},
        -:  647:  {HD_MAUNDY_THURSDAY, N_("Maundy Thursday")},
        -:  648:  {HD_MAY_DAY, N_("May Day")},
        -:  649:  {HD_MIDSUMMER_DAY, N_("St John's/Midsummer Day")},
        -:  650:  {HD_MID_AUTUMN_FESTIVAL, N_("Mid-Autumn Festival")},
        -:  651:  {HD_MID_SPRING_FESTIVAL, N_("Mid-Spring Festival")},
        -:  652:  {HD_MID_YEAR_FESTIVAL, N_("Mid-Year Festival")},
        -:  653:  {HD_MOON_FIRST_QUARTER, N_("Waxing Half Moon")},
        -:  654:  {HD_MOON_FULL, N_("Full Moon")},
        -:  655:  {HD_MOON_LAST_QUARTER, N_("Waning Half Moon")},
        -:  656:  {HD_MOON_NEW, N_("New Moon")},
        -:  657:  {HD_MOTHERS_DAY, N_("Mother's Day")},
        -:  658:  {HD_MOTHER_IN_LAWS_DAY, N_("Mother in Law's Day")},
        -:  659:  {HD_MUSIC_WATER_BANQUET, N_("Music Water Banquet")},
        -:  660:  {HD_NATIONAL_FOUNDATION_DAY, N_("National Foundation Day")},
        -:  661:  {HD_NATIONAL_HOLIDAY, N_("National Holiday")},
        -:  662:  {HD_NATIONAL_MOURNING_DAY, N_("National Mourning Day")},
        -:  663:  {HD_NEW_YEARS_DAY, N_("New Year's Day")},
        -:  664:  {HD_NURSES_DAY, N_("Nurses' Day")},
        -:  665:  {HD_OLD_ARMENIC_NEW_YEARS_DAY, N_("Old-Armenic New Year")},
        -:  666:  {HD_OLD_EGYPTIC_NEW_YEARS_DAY, N_("Old-Egyptic New Year")},
        -:  667:  {HD_ORTHODOX_NEW_YEARS_DAY, N_("Orthodox New Year's Day")},
        -:  668:  {HD_OUR_LADY_APARECIDA_DAY, N_("Our Lady Aparecida Day")},
        -:  669:  {HD_PALM_SUNDAY, N_("Palm Sunday")},
        -:  670:  {HD_PARENTS_DAY, N_("Parent's Day")},
        -:  671:  {HD_PASSION_SUNDAY, N_("Passion Sunday")},
        -:  672:  {HD_PEACE_FESTIVAL, N_("Peace Festival")},
        -:  673:  {HD_PEACH_FESTIVAL, N_("Peach Festival")},
        -:  674:  {HD_PENTECOST, N_("Whitsunday/Pentecost")},
        -:  675:  {HD_PERSIAN_NEW_YEARS_DAY, N_("Noruz/Persian New Year's Day")},
        -:  676:  {HD_PRAYER_DAY, N_("Prayer Day")},
        -:  677:  {HD_PRESIDENTIAL_INAUGURATION, N_("Presidential Inauguration")},
        -:  678:  {HD_PRESIDENTS_DAY, N_("Presidents' Day")},
        -:  679:  {HD_PRESIDENTS_INFORM, N_("Presidents' Inform")},
        -:  680:  {HD_PRESIDENT_LINCOLNS_BIRTHDAY, N_("President Lincoln's Birthday")},
        -:  681:  {HD_PRINCESS_DAY, N_("Princess' Day")},
        -:  682:  {HD_QUINQUAGESIMA_SUNDAY, N_("Quinquagesima Sunday")},
        -:  683:  {HD_REFORMATION_DAY, N_("Reformation Day")},
        -:  684:  {HD_REMEMBRANCE_DAY, N_("Remembrance/Memorial Day")},
        -:  685:  {HD_RE_DAY, N_("Republic Day")},
        -:  686:  {HD_RESPECT_FOR_THE_AGED_DAY, N_("Respect for the Aged Day")},
        -:  687:  {HD_REVOLUTION_DAY, N_("Revolution Day")},
        -:  688:  {HD_RIO_DE_JANEIRO_ANNIVERSARY, N_("Rio de Janeiro Anniversary")},
        -:  689:  {HD_ROGATION_SUNDAY, N_("Rogation Sunday")},
        -:  690:  {HD_SAO_PAULO_ANNIVERSARY, N_("Sao Paulo Anniversary")},
        -:  691:  {HD_SAPPORO_SNOW_FESTIVAL, N_("Sapporo Snow Festival")},
        -:  692:  {HD_SEASON_CHANGE, N_("Season Change/Bean-Festival")},
        -:  693:  {HD_SEPTUAGESIMA_SUNDAY, N_("Septuagesima Sunday")},
        -:  694:  {HD_SEVEN_SLEEPERS_DAY, N_("Seven Sleepers Day")},
        -:  695:  {HD_SEXAGESIMA_SUNDAY, N_("Sexagesima Sunday")},
        -:  696:  {HD_SHROVE_TUESDAY, N_("Shrove Tuesday/Mardi Gras")},
        -:  697:  {HD_SOLSTICE_DAY, N_("Solstice Day")},
        -:  698:  {HD_SOOT_SWEEPING_DAY, N_("Soot-Sweeping Day")},
        -:  699:  {HD_SPRING_FESTIVAL, N_("Spring Festival")},
        -:  700:  {HD_START_OF_COMMON_MONTH, N_("Start of common month")},
        -:  701:  {HD_START_OF_LEAP_MONTH, N_("Start of leap month")},
        -:  702:  {HD_STAR_FESTIVAL, N_("Star Festival")},
        -:  703:  {HD_ST_ANDREWS_DAY, N_("St Andrew's Day")},
        -:  704:  {HD_ST_BARTHOLOMEW_DAY, N_("St Bartholomew Day")},
        -:  705:  {HD_ST_BERCHTOLDS_DAY, N_("St Berchtold's Day")},
        -:  706:  {HD_ST_DAVIDS_DAY, N_("St David's Day")},
        -:  707:  {HD_ST_EDWARDS_DAY, N_("St Edward's Day")},
        -:  708:  {HD_ST_GEORGES_DAY, N_("St George's Day")},
        -:  709:  {HD_ST_JAMES_DAY, N_("St James' Day")},
        -:  710:  {HD_ST_JOSEPHS_DAY, N_("St Joseph's Day")},
        -:  711:  {HD_ST_LAURENTIUS_DAY, N_("St Laurentius Day")},
        -:  712:  {HD_ST_NICHOLAS_DAY, N_("St Nicholas' Day")},
        -:  713:  {HD_ST_NICHOLAS_EVE, N_("St Nicholas' Eve")},
        -:  714:  {HD_ST_PATRICKS_DAY, N_("St Patrick's Day")},
        -:  715:  {HD_ST_PETER_AND_ST_PAUL, N_("St Peter and St Paul")},
        -:  716:  {HD_ST_STEPHENS_DAY, N_("St Stephen's Day")},
        -:  717:  {HD_ST_VALENTINES_DAY, N_("St Valentine's Day")},
        -:  718:  {HD_SUNDAY_OF_THE_DEAD, N_("Sunday of the Dead")},
        -:  719:  {HD_SWALLOW_DAY, N_("Swallow Day")},
        -:  720:  {HD_SWEETEST_DAY, N_("Sweetest Day")},
        -:  721:  {HD_SYLVESTER, N_("Sylvester/New Year's Eve")},
        -:  722:  {HD_TEACHERS_DAY, N_("Teacher's Day")},
        -:  723:  {HD_THAI_NEW_YEARS_DAY, N_("Thai New Year's Day")},
        -:  724:  {HD_THANKSGIVING_DAY, N_("Thanksgiving Day")},
        -:  725:  {HD_THE_KINGS_BIRTHDAY, N_("The King's Birthday")},
        -:  726:  {HD_THE_QUEENS_BIRTHDAY, N_("The Queen's Birthday")},
        -:  727:  {HD_THREE_KINGS_DAY, N_("Epiphany/Three King's Day")},
        -:  728:  {HD_TIRADENTES_DAY, N_("Tiradentes Day")},
        -:  729:  {HD_TOMB_SWEEPING_DAY, N_("Tomb-Sweeping Day")},
        -:  730:  {HD_TRANSFIGURATION_DAY, N_("Transfiguration Day")},
        -:  731:  {HD_TYNWALD_DAY, N_("Tynwald Day")},
        -:  732:  {HD_VALBORGS_EVE, N_("Valborg's Eve")},
        -:  733:  {HD_VENICE_CARNIVAL, N_("Venice Carnival")},
        -:  734:  {HD_VETERANS_DAY, N_("Veteran's Day")},
        -:  735:  {HD_VICTORIA_DAY, N_("Victoria Day")},
        -:  736:  {HD_VICTORY_DAY, N_("Victory Day")},
        -:  737:  {HD_WHIT_MONDAY, N_("Whit Monday")},
        -:  738:  {HD_WOMENS_DAY, N_("Women's Day")},
        -:  739:  {HD_WOMENS_SHROVE_DAY, N_("Women's Shrove Day")},
        -:  740:  {HD_WORLD_ANIMAL_DAY, N_("World Animal Day")},
        -:  741:  {HD_YOUTH_DAY, N_("Youth Day")}
        -:  742:#if !HD_TOP20CC
        -:  743:  /*
        -:  744:     This COMMA is necessary here!
        -:  745:   */
        -:  746:  ,
        -:  747:  {HD_ADELAIDE_CUP_DAY, N_("Adelaide Cup Day")},
        -:  748:  {HD_ADMISSION_DAY, N_("Admission Day")},
        -:  749:  {HD_ALASKA_DAY, N_("Alaska Day")},
        -:  750:  {HD_ALEKSIS_KIVI_DAY, N_("Aleksis Kivi Day")},
        -:  751:  {HD_ALICE_SPRINGS_SHOW_DAY, N_("Alice-Springs Show Day")},
        -:  752:  {HD_ALL_SAINTS_EVE, N_("All Saints' Eve")},
        -:  753:  {HD_AMERICAS_DAY, N_("Americas Day")},
        -:  754:  {HD_ANGAM_DAY, N_("Angam Day")},
        -:  755:  {HD_ANNIVERSARY_OF_AMIRS_SUCCESSION,
        -:  756:   N_("Anniversary of Amir's Succession")},
        -:  757:  {HD_ANNIVERSARY_OF_ARMED_STRUGGLE, N_("Anniversary of Armed Struggle")},
        -:  758:  {HD_ANNIVERSARY_OF_GREEN_MARCH, N_("Anniversary of Green March")},
        -:  759:  {HD_ANTILLIAN_DAY, N_("Antillian Day")},
        -:  760:  {HD_ARAB_LEAGUE_DAY, N_("Arab League Day")},
        -:  761:  {HD_ARCHBISHOP_MAKARIOS_MEMORIAL_DAY,
        -:  762:   N_("Archbishop Makarios' Memorial Day")},
        -:  763:  {HD_ARCHBISHOP_MAKARIOS_NAME_DAY, N_("Archbishop Makarios' Name-Day")},
        -:  764:  {HD_ARENGO_ANNIVERSARY, N_("Arengo Anniversary")},
        -:  765:  {HD_ARMY_COUP_DAY, N_("Army Coup Day")},
        -:  766:  {HD_ARRIVAL_OF_THE_SWISS, N_("Arrival of the Swiss")},
        -:  767:  {HD_ARTIGAS_BIRTHDAY, N_("Artigas' Birthday")},
        -:  768:  {HD_ASUNCION_DAY, N_("Asuncion Day")},
        -:  769:  {HD_ATATURK_MEMORIAL_DAY, N_("Ataturk Memorial Day")},
        -:  770:  {HD_AUTHORITIYS_POWER_DAY, N_("Authority's Power Day")},
        -:  771:  {HD_BAATH_REVOLUTION_DAY, N_("Ba'ath Revolution Day")},
        -:  772:  {HD_BARON_BLISS_DAY, N_("Baron Bliss Day")},
        -:  773:  {HD_BATAAN_DAY, N_("Bataan Day")},
        -:  774:  {HD_BATTLE_OF_ANGAMOS, N_("Battle of Angamos")},
        -:  775:  {HD_BATTLE_OF_BOYACA, N_("Battle of Boyacá")},
        -:  776:  {HD_BATTLE_OF_CARABOBO, N_("Battle of Carabobo")},
        -:  777:  {HD_BATTLE_OF_IQUIQUE, N_("Battle of Iquique")},
        -:  778:  {HD_BATTLE_OF_LAS_PIEDRAS, N_("Battle of Las Piedras")},
        -:  779:  {HD_BATTLE_OF_NAEFELS, N_("Battle of Näfels")},
        -:  780:  {HD_BEGINNING_OF_SUMMER, N_("Beginning of Summer")},
        -:  781:  {HD_BELGRADES_DAY, N_("Belgrade's Day")},
        -:  782:  {HD_BENNINGTON_BATTLE_DAY, N_("Bennington Battle Day")},
        -:  783:  {HD_BLESSING_OF_THE_WATER, N_("Blessing of the Water")},
        -:  784:  {HD_BLOOMSDAY, N_("Bloomsday")},
        -:  785:  {HD_BOGANDA_DAY, N_("Boganda Day")},
        -:  786:  {HD_BONAIRE_DAY, N_("Bonaire Day")},
        -:  787:  {HD_BOQUERON_BATTLE_DAY, N_("Boqueron Battle Day")},
        -:  788:  {HD_BOTSWANA_DAY, N_("Botswana Day")},
        -:  789:  {HD_BOUNTY_DAY, N_("Bounty Day")},
        -:  790:  {HD_BUNKER_HILL_DAY, N_("Bunker Hill Day")},
        -:  791:  {HD_BURNING_OF_JAN_HUS, N_("Burning of Jan Hus")},
        -:  792:  {HD_CANBERRA_DAY, N_("Canberra Day")},
        -:  793:  {HD_CARICOM_DAY, N_("Caricom Day")},
        -:  794:  {HD_CASIMIR_PULASKIS_BIRTHDAY, N_("Casimir Pulaski's Birthday")},
        -:  795:  {HD_CASSINGA_DAY, N_("Cassinga Day")},
        -:  796:  {HD_CAYENNE_FESTIVAL, N_("Cayenne Festival")},
        -:  797:  {HD_CESAR_CHAVEZ_DAY, N_("Cesar Chavez Day")},
        -:  798:  {HD_CHARTER_DAY, N_("Charter Day")},
        -:  799:  {HD_CHIANG_KAI_SHEKS_BIRTHDAY, N_("Chiang Kai-shek's Birthday")},
        -:  800:  {HD_CHILDRENS_WHITE_SUNDAY, N_("Children's White Sunday")},
        -:  801:  {HD_COLON_DAY, N_("Colon Day")},
        -:  802:  {HD_COLORADO_DAY, N_("Colorado Day")},
        -:  803:  {HD_COMMONWEALTH_DAY, N_("Commonwealth Day")},
        -:  804:  {HD_COMPACT_DAY, N_("Compact Day")},
        -:  805:  {HD_CONFEDERAL_AGREEMENT_DAY, N_("Confederal Agreement Day")},
        -:  806:  {HD_CORONATION_DAY, N_("Coronation Day")},
        -:  807:  {HD_CUP_MATCH_DAY, N_("Cup Match Day")},
        -:  808:  {HD_CUSTOM_CHIEFS_DAY, N_("Custom Chief's Day")},
        -:  809:  {HD_C_MAPINDUZI_DAY, N_("C. Mapinduzi Day")},
        -:  810:  {HD_DARWIN_SHOW_DAY, N_("Darwin Show Day")},
        -:  811:  {HD_DAY_OF_GOODWILL, N_("Day of Goodwill")},
        -:  812:  {HD_DAY_OF_STUDENTS_REVOLT, N_("Day of Students Revolt")},
        -:  813:  {HD_DAY_OF_THE_FREE_LAOS, N_("Day of the Free Laos")},
        -:  814:  {HD_DEATH_OF_H_CHRISTOPHE, N_("Death of H. Christophe")},
        -:  815:  {HD_DEATH_OF_J_DESSALINES, N_("Death of J. Dessalines")},
        -:  816:  {HD_DEATH_OF_PRESIDENT_ABDALLAH, N_("Death of President Abdallah")},
        -:  817:  {HD_DEATH_OF_PRESIDENT_CHEIKH, N_("Death of President Cheikh")},
        -:  818:  {HD_DEATH_OF_PRESIDENT_SOILIH, N_("Death of President Soilih")},
        -:  819:  {HD_DEATH_OF_QAID_I_AZAM, N_("Death of Qaid-i-Azam")},
        -:  820:  {HD_DEATH_OF_T_LOUVERTURE, N_("Death of T. Louverture")},
        -:  821:  {HD_DEFENDERS_DAY, N_("Defenders Day")},
        -:  822:  {HD_DIA_DEL_PADRE, N_("Dia del Padre")},
        -:  823:  {HD_DIA_DE_LOS_MAESTROS, N_("Dia de los Maestros")},
        -:  824:  {HD_DISCOVERY_DAY, N_("Discovery Day")},
        -:  825:  {HD_DOWNFALL_OF_THE_DERGUE, N_("Downfall of the Dergue")},
        -:  826:  {HD_DRY_SEASON_CELEBRATION, N_("Dry Season Celebration")},
        -:  827:  {HD_DR_SUN_YAT_SENS_BIRTHDAY, N_("Dr. Sun Yat-sen's Birthday")},
        -:  828:  {HD_DUARTES_BIRTHDAY, N_("Duarte's Birthday")},
        -:  829:  {HD_EASTER_TUESDAY, N_("Easter Tuesday")},
        -:  830:  {HD_ECONOMIC_LIBERATION_DAY, N_("Economic Liberation Day")},
        -:  831:  {HD_EIGHT_HOURS_DAY, N_("Eight Hours Day")},
        -:  832:  {HD_ELECTIONS_FOR_NATIONAL_ASSEMBLY, N_("Elections for National Assembly")},
        -:  833:  {HD_ERROL_BARROW_DAY, N_("Errol Barrow Day")},
        -:  834:  {HD_EVACUATION_DAY, N_("Evacuation Day")},
        -:  835:  {HD_EVE_OF_EPIPHANY, N_("Eve of Epiphany")},
        -:  836:  {HD_EXPEDITION_OF_THE_33, N_("Expedition of the 33")},
        -:  837:  {HD_E_HOSTOS_BIRTHDAY, N_("E. Hostos' Birthday")},
        -:  838:  {HD_FAMILY_DAY, N_("Family Day")},
        -:  839:  {HD_FAO_DAY, N_("FAO Day")},
        -:  840:  {HD_FARMERS_DAY, N_("Farmers' Day")},
        -:  841:  {HD_FATHER_LEVAL_DAY, N_("Father Leval Day")},
        -:  842:  {HD_FEAST_OF_OUR_THEOTOKOS, N_("Feast of Our Theotokos")},
        -:  843:  {HD_FISHERMANS_DAY, N_("Fisherman's Day")},
        -:  844:  {HD_FOUNDATION_OF_NPLA_DAY, N_("Foundation of NPLA Day")},
        -:  845:  {HD_FOUNDING_OF_PEOPLES_PARTY, N_("Founding of People's Party")},
        -:  846:  {HD_GARIFUNA_DAY, N_("Garifuna Day")},
        -:  847:  {HD_GENERAL_SAN_MARTINS_ANNIVERSARY,
        -:  848:   N_("General San Martin's Anniversary")},
        -:  849:  {HD_GOSPEL_DAY, N_("Gospel Day")},
        -:  850:  {HD_GUACANASTE_DAY, N_("Guacanaste Day")},
        -:  851:  {HD_GUSTAVUS_ADOLPHUS_DAY, N_("Gustavus Adolphus' Day")},
        -:  852:  {HD_HERITAGE_DAY, N_("Heritage Day")},
        -:  853:  {HD_HEROES_DAY, N_("Heroes Day")},
        -:  854:  {HD_HOBART_SHOW_DAY, N_("Hobart Show Day")},
        -:  855:  {HD_HOLY_WEDNESDAY, N_("Holy Wednesday")},
        -:  856:  {HD_HO_CHI_MINHS_BIRTHDAY, N_("Ho Chi Minh's Birthday")},
        -:  857:  {HD_HUMAN_RIGHTS_DAY, N_("Human Rights Day")},
        -:  858:  {HD_HURRICANE_SUPPLICATION_DAY, N_("Hurricane Supplication Day")},
        -:  859:  {HD_HURRICANE_THANKSGIVING_DAY, N_("Hurricane Thanksgiving Day")},
        -:  860:  {HD_INDEPENDENCE_OF_CARTAGENA, N_("Independence of Cartagena")},
        -:  861:  {HD_INDEPENDENCE_OF_CUENCA, N_("Independence of Cuenca")},
        -:  862:  {HD_INDEPENDENCE_OF_GUAYAQUIL, N_("Independence of Guayaquil")},
        -:  863:  {HD_INDEPENDENCE_OF_QUITO, N_("Independence of Quito")},
        -:  864:  {HD_INDIAN_ARRIVAL_DAY, N_("Indian Arrival Day")},
        -:  865:  {HD_INTERNAL_AUTONOMY_DAY, N_("Internal Autonomy Day")},
        -:  866:  {HD_JEFFERSON_DAVIS_BIRTHDAY, N_("Jefferson Davis' Birthday")},
        -:  867:  {HD_JUNE_HOLIDAY, N_("June Holiday")},
        -:  868:  {HD_J_BARBOSAS_BIRTHDAY, N_("J. Barbosa's Birthday")},
        -:  869:  {HD_J_CHILEMBWE_DAY, N_("J. Chilembwe Day")},
        -:  870:  {HD_J_DIEGOS_BIRTHDAY, N_("J. Diego's Birthday")},
        -:  871:  {HD_J_ROBERTS_BIRTHDAY, N_("J. Robert's Birthday")},
        -:  872:  {HD_KAMARAMPAKA_DAY, N_("Kamarampaka Day")},
        -:  873:  {HD_KARTINI_DAY, N_("Kartini Day")},
        -:  874:  {HD_KATHERINE_SHOW_DAY, N_("Catherine Show Day")},
        -:  875:  {HD_KIEV_DAY, N_("Kiev Day")},
        -:  876:  {HD_KIM_IL_SUNGS_BIRTHDAY, N_("Kim Il-Sung's Birthday")},
        -:  877:  {HD_KIM_JONG_ILS_BIRTHDAY, N_("Kim Jong-Il's Birthday")},
        -:  878:  {HD_KING_KAMEHAMEHA_DAY, N_("King Kamehameha Day")},
        -:  879:  {HD_KING_RAMA_I_MEMORIAL_DAY, N_("King Rama I Memorial Day/Chakri")},
        -:  880:  {HD_KING_RAMA_V_MEMORIAL_DAY, N_("King Rama V Memorial Day")},
        -:  881:  {HD_KNABENSCHIESSEN, N_("Knabenschiessen")},
        -:  882:  {HD_KONSTANTIN_AND_METHODIUS, N_("Konstantin and Methodius")},
        -:  883:  {HD_LAPP_NATIONAL_HOLIDAY, N_("Lapp National Holiday")},
        -:  884:  {HD_LAUNCESTON_CUP_DAY, N_("Launceston Cup Day")},
        -:  885:  {HD_LIBERTY_DAY, N_("Liberty Day")},
        -:  886:  {HD_LOSS_OF_MUSLIM_NATION, N_("Loss of Muslim Nation")},
        -:  887:  {HD_LUXEMBOURG_CITY_KERMIS, N_("Luxembourg City Kermis")},
        -:  888:  {HD_LYNDON_B_JOHNSON_DAY, N_("Lyndon B. Johnson Day")},
        -:  889:  {HD_L_RIVERAS_BIRTHDAY, N_("L. Rivera's Birthday")},
        -:  890:  {HD_MADARAKA_DAY, N_("Madaraka Day")},
        -:  891:  {HD_MAHATMA_GANDHIS_BIRTHDAY, N_("Mahatma Gandhi's Birthday")},
        -:  892:  {HD_MALVINAS_DAY, N_("Malvinas Day")},
        -:  893:  {HD_MANILA_DAY, N_("Manila Day")},
        -:  894:  {HD_MAPUTO_CITY_DAY, N_("Maputo City Day")},
        -:  895:  {HD_MARIEN_NGOUABI_DAY, N_("Marien Ngouabi Day")},
        -:  896:  {HD_MARYLAND_DAY, N_("Maryland Day")},
        -:  897:  {HD_MELBOURNE_CUP_DAY, N_("Melbourne Cup Day")},
        -:  898:  {HD_MERCHANT_DAY, N_("Merchant Day")},
        -:  899:  {HD_MIDSUMMERS_EVE, N_("St John's/Midsummers Eve")},
        -:  900:  {HD_MISSIONARY_DAY, N_("Missionary Day")},
        -:  901:  {HD_MI_CAREME_DAY, N_("Mi-Carême Day")},
        -:  902:  {HD_MORAZAN_DAY, N_("Morazan Day")},
        -:  903:  {HD_MOSHESHOES_DAY, N_("Mosheshoe's Day")},
        -:  904:  {HD_MOTHERHOOD_AND_BEAUTY_DAY, N_("Motherhood and Beauty Day")},
        -:  905:  {HD_NAMING_DAY, N_("Naming Day")},
        -:  906:  {HD_NATIONAL_BUN_DAY, N_("National Bun Day")},
        -:  907:  {HD_NATIONAL_HEROES_DAY, N_("National Heroes Day")},
        -:  908:  {HD_NATIONAL_REDEMPTION_DAY, N_("National Redemption Day")},
        -:  909:  {HD_NATIONAL_RESISTANCE_DAY, N_("National Resistance Day")},
        -:  910:  {HD_NATIONAL_REVIVAL_DAY, N_("National Revival Day")},
        -:  911:  {HD_NATIONAL_UNITY_DAY, N_("National Unity Day")},
        -:  912:  {HD_NDADAYE_DAY, N_("Ndadaye Day")},
        -:  913:  {HD_NEUTRALITY_DAY, N_("Neutrality Day")},
        -:  914:  {HD_NEVADA_DAY, N_("Nevada Day")},
        -:  915:  {HD_NEW_REGIME_ANNIVERSARY, N_("New Regime Anniversary")},
        -:  916:  {HD_NOBEL_DAY, N_("Nobel Day")},
        -:  917:  {HD_NOI_DAY, N_("Noi Day")},
        -:  918:  {HD_OAU_DAY, N_("OAU Day")},
        -:  919:  {HD_OCTOBER_HOLIDAY, N_("October Holiday")},
        -:  920:  {HD_OIL_INDUSTRY_DAY, N_("Oil Industry Day")},
        -:  921:  {HD_OUR_LADY_OF_ALTAGRACIA_DAY, N_("Our Lady of Altagracia Day")},
        -:  922:  {HD_OUR_LADY_OF_CAMARIN_DAY, N_("Our Lady of Camarin Day")},
        -:  923:  {HD_OUR_LADY_OF_LAS_MERCEDES_DAY, N_("Our Lady of Las Mercedes Day")},
        -:  924:  {HD_OUR_LADY_OF_LOS_ANGELES_DAY, N_("Our Lady of Los Angeles Day")},
        -:  925:  {HD_OUR_LADY_OF_SEVEN_SORROWS, N_("Our Lady of Seven Sorrows")},
        -:  926:  {HD_OUR_LADY_OF_VICTORIES_DAY, N_("Our Lady of Victories Day")},
        -:  927:  {HD_PANAMA_CITY_DAY, N_("Panama City Day")},
        -:  928:  {HD_PANAMERICAN_DAY, N_("Panamerica Day")},
        -:  929:  {HD_PARIS_PEACE_AGREEMENT_DAY, N_("Paris Peace Agreement Day")},
        -:  930:  {HD_PATRIOTS_DAY, N_("Patriot's Day")},
        -:  931:  {HD_PEOPLES_UPRISING_DAY, N_("People's Uprising Day")},
        -:  932:  {HD_PEOPLE_POWER_DAY, N_("People Power Day")},
        -:  933:  {HD_PHILIPPINE_USA_FRIENDSHIP, N_("Philippine-American Friendship")},
        -:  934:  {HD_PICHINCHA_DAY, N_("Pichincha Day")},
        -:  935:  {HD_PICNIC_DAY, N_("Picnic Day")},
        -:  936:  {HD_PIONEER_DAY, N_("Pioneer Day")},
        -:  937:  {HD_POYA_DAY, N_("Poya Day")},
        -:  938:  {HD_PRINCE_KALANIANAOLE_DAY, N_("Prince Kalanianaole Day")},
        -:  939:  {HD_PRINCE_OF_WALES_BIRTHDAY, N_("Prince of Wales' Birthday")},
        -:  940:  {HD_PROCLAMATION_DAY, N_("Proclamation Day")},
        -:  941:  {HD_QAID_I_AZAMS_BIRTHDAY, N_("Qaid-i-Azam's Birthday")},
        -:  942:  {HD_RATU_SUKUMA_DAY, N_("Ratu Sukuma Day")},
        -:  943:  {HD_RECREATION_DAY, N_("Recreation Day")},
        -:  944:  {HD_REFERENDUM_DAY, N_("Referendum Day")},
        -:  945:  {HD_REGATTA_DAY, N_("Regatta Day")},
        -:  946:  {HD_REGENCY_EXCHANGE, N_("Regency Exchange")},
        -:  947:  {HD_RESTORATION_DAY, N_("Restoration Day")},
        -:  948:  {HD_RETURN_DAY, N_("Return Day")},
        -:  949:  {HD_REUNIFICATION_DAY, N_("Reunification Day")},
        -:  950:  {HD_RIZAL_DAY, N_("Rizal Day")},
        -:  951:  {HD_RWAGASORE_DAY, N_("Rwagasore Day")},
        -:  952:  {HD_SABA_DAY, N_("Saba Day")},
        -:  953:  {HD_SAN_JACINTO_DAY, N_("San Jacinto Day")},
        -:  954:  {HD_SAN_JOSE_DAY, N_("San José Day")},
        -:  955:  {HD_SAR_ESTABLISHMENT_DAY, N_("SAR Establishment Day")},
        -:  956:  {HD_SCHOOL_HOLIDAY, N_("School Holiday")},
        -:  957:  {HD_SECHSELAEUTEN, N_("Sechseläuten")},
        -:  958:  {HD_SEPARATION_DAY, N_("Separation Day")},
        -:  959:  {HD_SERETSE_KHAMA_DAY, N_("Seretse Khama Day")},
        -:  960:  {HD_SETTLERS_DAY, N_("Settlers Day")},
        -:  961:  {HD_SEWARDS_DAY, N_("Seward's Day")},
        -:  962:  {HD_SHAHEED_DAY, N_("Shaheed Day")},
        -:  963:  {HD_SHEEP_FESTIVAL, N_("Sheep Festival")},
        -:  964:  {HD_SHEIKH_ZAYEDS_ASCENSION_DAY, N_("Sheikh Zayed's Ascension Day")},
        -:  965:  {HD_SIMON_BOLIVAR_DAY, N_("Simon Bolivar's Day")},
        -:  966:  {HD_SINAI_LIBERATION_DAY, N_("Sinai-Liberation Day")},
        -:  967:  {HD_SLAVE_LIBERATION_DAY, N_("Slave-Liberation Day")},
        -:  968:  {HD_SNIFF_THE_BREEZE_DAY, N_("Sniff the Breeze Day")},
        -:  969:  {HD_SOLIDARITY_DAY, N_("Solidarity Day")},
        -:  970:  {HD_SOMERS_DAY, N_("Somers Day")},
        -:  971:  {HD_STATIA_AMERICA_DAY, N_("Statia-American Day")},
        -:  972:  {HD_STUDENTS_DAY, N_("Student's Day")},
        -:  973:  {HD_ST_AGATA_DAY, N_("St Agata Day")},
        -:  974:  {HD_ST_CANUTES_DAY, N_("St Canute's Day")},
        -:  975:  {HD_ST_CEDILIAS_DAY, N_("St Cedilia's Day")},
        -:  976:  {HD_ST_CHARLES_DAY, N_("St Charles' Day")},
        -:  977:  {HD_ST_DEMETRIUS_DAY, N_("St Demetrius' Day")},
        -:  978:  {HD_ST_DEVOTE_DAY, N_("St Dévote Day")},
        -:  979:  {HD_ST_ELIAHS_DAY, N_("St Eliah's Day")},
        -:  980:  {HD_ST_JEAN_BAPTISTE_DAY, N_("St Jean Baptiste Day")},
        -:  981:  {HD_ST_LUCIAS_DAY, N_("St Lucia's Day")},
        -:  982:  {HD_ST_MARGUERITES_DAY, N_("St Marguerite's Day")},
        -:  983:  {HD_ST_MAROONS_DAY, N_("St Maroon's Day")},
        -:  984:  {HD_ST_MICHAELS_DAY, N_("St Michael's Day")},
        -:  985:  {HD_ST_OLAVS_DAY, N_("St Olav's Day")},
        -:  986:  {HD_ST_OLAVS_EVE, N_("St Olav's Eve")},
        -:  987:  {HD_ST_PAULS_SHIPSWRECK, N_("St Paul's Shipswreck")},
        -:  988:  {HD_ST_ROSE_OF_LIMA, N_("St Rose of Lima")},
        -:  989:  {HD_ST_URSULAS_DAY, N_("St Ursula's Day")},
        -:  990:  {HD_ST_VINCENT_DE_PAULS_DAY, N_("St Vincent de Paul's Day")},
        -:  991:  {HD_SUEZ_VICTORY_DAY, N_("Suez Victory Day")},
        -:  992:  {HD_SULTAN_QABOOS_BIRTHDAY, N_("Sultan Qaboos' Birthday")},
        -:  993:  {HD_SVETITSKHOVLOBA, N_("Svetitskhovloba")},
        -:  994:  {HD_SWEDEN_DAY, N_("Sweden Day")},
        -:  995:  {HD_S_DOES_BIRTHDAY, N_("S. Doe's Birthday")},
        -:  996:  {HD_TENNANT_CREEK_SHOW_DAY, N_("Tennant-Creek Show Day")},
        -:  997:  {HD_TERRITORY_DAY, N_("Territory Day")},
        -:  998:  {HD_THE_CROWN_PRINCESSES_BIRTHDAY, N_("The Crown Princesse's Birthday")},
        -:  999:  {HD_THE_CROWN_PRINCESSES_NAME_DAY, N_("The Crown Princesse's Name-Day")},
        -: 1000:  {HD_THE_CROWN_PRINCES_BIRTHDAY, N_("The Crown Prince's Birthday")},
        -: 1001:  {HD_THE_KINGS_NAME_DAY, N_("The King's Name-Day")},
        -: 1002:  {HD_THE_QUEENS_NAME_DAY, N_("The Queen's Name-Day")},
        -: 1003:  {HD_TOPOU_I_DAY, N_("Topou I Day")},
        -: 1004:  {HD_TOWN_MEETING_DAY, N_("Town Meeting Day")},
        -: 1005:  {HD_TRADITIONAL_DAY, N_("Traditional Day")},
        -: 1006:  {HD_TRANSFER_DAY, N_("Transfer Day")},
        -: 1007:  {HD_TRUMAN_DAY, N_("Truman Day")},
        -: 1008:  {HD_UNION_DAY, N_("Union Day")},
        -: 1009:  {HD_UNION_WITH_SWEDEN_DISSOLVED, N_("Union with Sweden dissolved")},
        -: 1010:  {HD_UNITED_NATIONS_DAY, N_("United Nations Day")},
        -: 1011:  {HD_UNITY_FACTORY_DAY, N_("Unity Factory Day")},
        -: 1012:  {HD_VICTOR_SCHOELCHER_DAY, N_("Victor-Schoelcher Day")},
        -: 1013:  {HD_VIDOVDAN, N_("Vidovdan")},
        -: 1014:  {HD_WEST_VIRGINIA_DAY, N_("West Virginia Day")},
        -: 1015:  {HD_WHITSUN_EVE, N_("Whitsun Eve")},
        -: 1016:  {HD_W_TUBMANS_BIRTHDAY, N_("W. Tubman's Birthday")},
        -: 1017:  {HD_YAP_DAY, N_("Yap Day")},
        -: 1018:  {HD_DAY_OF_CZECH_STATEHOOD, N_("Day of Czech Statehood")}
        -: 1019:#endif	/* !HD_TOP20CC */
        -: 1020:};
        -: 1021:
        -: 1022:
        -: 1023:
        -: 1024:/*
        -: 1025:*  static functions prototypes.
        -: 1026:*/
        -: 1027:__BEGIN_DECLARATIONS
        -: 1028:/*
        -: 1029:************************************************** Defined in `hd-data.c'.
        -: 1030:*/
        -: 1031:static char *decode_eclipse __P_ ((double *eclipse));
        -: 1032:static void
        -: 1033:  ocs_monthtext __P_ ((Bool * init_data,
        -: 1034:		       const Bool detected,
        -: 1035:		       const char *ptr_cc_id,
        -: 1036:		       const int day,
        -: 1037:		       const int month,
        -: 1038:		       const int year,
        -: 1039:		       const Bool ocs_leap,
        -: 1040:		       const int ocs_month,
        -: 1041:		       const int ocs_year,
        -: 1042:		       const int ocs_extra,
        -: 1043:		       int *hd_elems, const int fday, const int count));
        -: 1044:__END_DECLARATIONS
        -: 1045:/*
        -: 1046:*  static variables definitions.
        -: 1047:*/
        -: 1048:/*! Number of past days of Hebrew month. */
        -: 1049:static const int hmvec[][MONTH_MAX + 1] = { {0, 30, 59, 88, 117, 147,
        -: 1050:					     147, 176, 206, 235, 265, 294,
        -: 1051:					     324},
        -: 1052:{0, 30, 59, 89, 118, 148,
        -: 1053: 148, 177, 207, 236, 266, 295, 325},
        -: 1054:{0, 30, 60, 90, 119, 149,
        -: 1055: 149, 178, 208, 237, 267, 296, 326},
        -: 1056:{0, 30, 59, 88, 117, 147,
        -: 1057: 177, 206, 236, 265, 295, 324, 354},
        -: 1058:{0, 30, 59, 89, 118, 148,
        -: 1059: 178, 207, 237, 266, 296, 325, 355},
        -: 1060:{0, 30, 60, 90, 119, 149,
        -: 1061: 179, 208, 238, 267, 297, 326, 356}
        -: 1062:};
        -: 1063:
        -: 1064:/*! Latin Zodiac names. */
        -: 1065:static const char *zod_name[] = {
        -: 1066:  "Aries", "Taurus", "Gemini",
        -: 1067:  "Cancer", "Leo", "Virgo",
        -: 1068:  "Libra", "Scorpius", "Sagittarius",
        -: 1069:  "Capricornus", "Aquarius", "Pisces"
        -: 1070:};
        -: 1071:
        -: 1072:/*! Chinese (Mandarin??) names for the celestial stems. */
        -: 1073:static const char *chi_stem[] = {
        -: 1074:  "Jia", "Yi",
        -: 1075:  "Bing", "Ding",
        -: 1076:  "Wu", "Ji",
        -: 1077:  "Geng", "Xin",
        -: 1078:  "Ren", "Gui"
        -: 1079:};
        -: 1080:
        -: 1081:/*! Chinese (Mandarin??) names for the heavenly branches. */
        -: 1082:static const char *chi_branch[] = {
        -: 1083:  N_("Zi/Rat"), N_("Chou/Ox"),
        -: 1084:  N_("Yin/Tiger"), N_("Mao/Rabbit"),
        -: 1085:  N_("Chen/Dragon"), N_("Si/Snake"),
        -: 1086:  N_("Wu/Horse"), N_("Wei/Sheep"),
        -: 1087:  N_("Shen/Monkey"), N_("You/Rooster"),
        -: 1088:  N_("Xu/Dog"), N_("Hai/Pig")
        -: 1089:};
        -: 1090:
        -: 1091:
        -: 1092:
        -: 1093:/*
        -: 1094:*  Function implementations.
        -: 1095:*/
        -: 1096:static char *
function decode_eclipse called 0 returned 0% blocks executed 0%
    #####: 1097:decode_eclipse (eclipse)
        -: 1098:     double *eclipse;
        -: 1099:/*!
        -: 1100:   Decodes the eclipse mode value given via the address of ECLIPSE
        -: 1101:     in that it is reduced to the Julian/Gregorian date with time fraction
        -: 1102:     and returns a pointer to the proper eclipse mode text found.
        -: 1103:*/
        -: 1104:{
    #####: 1105:  if (*eclipse > ECLIPSE_TOTAL)
branch  0 never executed
branch  1 never executed
        -: 1106:    {
    #####: 1107:      *eclipse -= ECLIPSE_TOTAL;
    #####: 1108:      return (_(hd_text[HD_ECLIPSE_TYPE_TOTAL].ht_text));
        -: 1109:    }
    #####: 1110:  if (*eclipse > ECLIPSE_ANNULAR)
branch  0 never executed
branch  1 never executed
        -: 1111:    {
    #####: 1112:      *eclipse -= ECLIPSE_ANNULAR;
    #####: 1113:      return (_(hd_text[HD_ECLIPSE_TYPE_ANNULAR].ht_text));
        -: 1114:    }
    #####: 1115:  if (*eclipse > ECLIPSE_PARTIAL)
branch  0 never executed
branch  1 never executed
        -: 1116:    {
    #####: 1117:      *eclipse -= ECLIPSE_PARTIAL;
    #####: 1118:      return (_(hd_text[HD_ECLIPSE_TYPE_PARTIAL].ht_text));
        -: 1119:    }
    #####: 1120:  if (*eclipse > ECLIPSE_PENUMBRAL)
branch  0 never executed
branch  1 never executed
        -: 1121:    {
    #####: 1122:      *eclipse -= ECLIPSE_PENUMBRAL;
    #####: 1123:      return (_(hd_text[HD_ECLIPSE_TYPE_PENUMBRAL].ht_text));
        -: 1124:    }
        -: 1125:  /*
        -: 1126:     Internal error, misplaced eclipse mode constants defined by maintainer!
        -: 1127:   */
    #####: 1128:  abort ();
call    0 never executed
        -: 1129:
        -: 1130:  /*
        -: 1131:     Notreached, only used to make the compiler happy :)
        -: 1132:   */
        -: 1133:  return (NULL);
        -: 1134:}
        -: 1135:
        -: 1136:
        -: 1137:
        -: 1138:static void
function ocs_monthtext called 0 returned 0% blocks executed 0%
    #####: 1139:ocs_monthtext (init_data, detected, ptr_cc_id, day, month, year,
        -: 1140:	       ocs_leap, ocs_month, ocs_year, ocs_extra, hd_elems, fday,
        -: 1141:	       count)
        -: 1142:     Bool *init_data;
        -: 1143:     const Bool detected;
        -: 1144:     const char *ptr_cc_id;
        -: 1145:     const int day;
        -: 1146:     const int month;
        -: 1147:     const int year;
        -: 1148:     const Bool ocs_leap;
        -: 1149:     const int ocs_month;
        -: 1150:     const int ocs_year;
        -: 1151:     const int ocs_extra;
        -: 1152:     int *hd_elems;
        -: 1153:     const int fday;
        -: 1154:     const int count;
        -: 1155:/*!
        -: 1156:   Formats a text that includes the given OCS_MONTH and OCS_YEAR number,
        -: 1157:     which is based on another calendar systems date.  The given PTR_CC_ID
        -: 1158:     is also placed in the text, provided with a trailing SUFFIX character.
        -: 1159:*/
        -: 1160:{
        -: 1161:  static char the_cc_id[7];
        -: 1162:  auto char *the_text;
        -: 1163:
        -: 1164:
    #####: 1165:  strcpy (the_cc_id, ptr_cc_id);
    #####: 1166:  strcat (the_cc_id, "*");
    #####: 1167:  if (ocs_leap)
branch  0 never executed
branch  1 never executed
    #####: 1168:    the_text = _(hd_text[HD_START_OF_LEAP_MONTH].ht_text);
        -: 1169:  else
    #####: 1170:    the_text = _(hd_text[HD_START_OF_COMMON_MONTH].ht_text);
    #####: 1171:  if (ocs_extra != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
    #####: 1172:    sprintf (s2, "%s %02d/%d-%d", the_text, ocs_month, ocs_year, ocs_extra);
        -: 1173:  else
    #####: 1174:    sprintf (s2, "%s %02d/%d", the_text, ocs_month, ocs_year);
    #####: 1175:  holiday (*init_data, detected, s2, the_cc_id,
call    0 never executed
        -: 1176:	   DIS_HLS_PREF, day, month, year, hd_elems, fday, count);
    #####: 1177:  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1178:    *init_data = FALSE;
    #####: 1179:}
        -: 1180:
        -: 1181:
        -: 1182:
        -: 1183:const Cc_struct *
function binsearch_cc_id called 0 returned 0% blocks executed 0%
    #####: 1184:binsearch_cc_id (id)
        -: 1185:     char *id;
        -: 1186:/*!
        -: 1187:   Simple binary search the delivered `id' if it is listed in the global
        -: 1188:     `cc_holidays' table.  The `id' is an ISO-3166 A2 (2-letter) country
        -: 1189:     code, plus an optionally trailing territory text `_TT'.  If `id' is
        -: 1190:     found in the table, this function returns a pointer to its complete
        -: 1191:     record, otherwise NULL.
        -: 1192:   *** This functions must be placed in the same `.c' file
        -: 1193:   *** in which the `cc_holidays' table is defined!
        -: 1194:*/
        -: 1195:{
        -: 1196:  auto const Cc_struct *ptr_cc;
        -: 1197:  register int i;
    #####: 1198:  register int low = 0;
        -: 1199:  register int mid;
    #####: 1200:  register int high = (sizeof cc_holidays / sizeof (Cc_struct)) - 2;
        -: 1201:
        -: 1202:
    #####: 1203:  while (low <= high)
branch  0 never executed
branch  1 never executed
        -: 1204:    {
    #####: 1205:      mid = ((low + high) >> 1);
    #####: 1206:      ptr_cc = cc_holidays + mid;
    #####: 1207:      i = strcmp (id, ptr_cc->cc_id);
    #####: 1208:      if (i < 0)
branch  0 never executed
branch  1 never executed
    #####: 1209:	high = mid - 1;
    #####: 1210:      else if (i > 0)
branch  0 never executed
branch  1 never executed
    #####: 1211:	low = mid + 1;
        -: 1212:      else
    #####: 1213:	return (ptr_cc);
        -: 1214:    }
        -: 1215:
    #####: 1216:  return (NULL);
        -: 1217:}
        -: 1218:
        -: 1219:
        -: 1220:
        -: 1221:void
function base_christian_hdy called 0 returned 0% blocks executed 0%
    #####: 1222:base_christian_hdy (init_data, detected, easter, year, hd_elems, fday, count, cc)
        -: 1223:     Bool *init_data;
        -: 1224:     const Bool detected;
        -: 1225:     int easter;
        -: 1226:     const int year;
        -: 1227:     int *hd_elems;
        -: 1228:     const int fday;
        -: 1229:     const int count;
        -: 1230:     const char *cc;
        -: 1231:/*!
        -: 1232:   Manages all base Christian Western churches calendar based holidays.
        -: 1233:*/
        -: 1234:{
    #####: 1235:  holiday (*init_data, detected, _(hd_text[HD_CHRISTMAS_DAY].ht_text),
call    0 never executed
        -: 1236:	   ptr_cc_id, "+", 25, MONTH_MAX, year, hd_elems, fday, count);
    #####: 1237:  holiday (*init_data, detected, _(hd_text[HD_EASTER_MONDAY].ht_text),
call    0 never executed
        -: 1238:	   ptr_cc_id, "+", easter + 1, 0, year, hd_elems, fday, count);
    #####: 1239:  holiday (*init_data, detected, _(hd_text[HD_EASTER_SUNDAY].ht_text),
call    0 never executed
        -: 1240:	   ptr_cc_id, "+", easter, 0, year, hd_elems, fday, count);
    #####: 1241:  holiday (*init_data, detected, _(hd_text[HD_NEW_YEARS_DAY].ht_text),
call    0 never executed
        -: 1242:	   ptr_cc_id, "+", DAY_MIN, MONTH_MIN, year, hd_elems, fday, count);
    #####: 1243:  holiday (*init_data, detected, _(hd_text[HD_PENTECOST].ht_text),
call    0 never executed
        -: 1244:	   ptr_cc_id, "+", easter + 49, 0, year, hd_elems, fday, count);
    #####: 1245:  if (strcmp (cc, "SE") != 0)
branch  0 never executed
branch  1 never executed
    #####: 1246:    holiday (*init_data, detected, _(hd_text[HD_WHIT_MONDAY].ht_text),
call    0 never executed
        -: 1247:	     ptr_cc_id, "+", easter + 50, 0, year, hd_elems, fday, count);
    #####: 1248:}
        -: 1249:
        -: 1250:
        -: 1251:
        -: 1252:/*
        -: 1253:*  All global holiday management functions.
        -: 1254:*/
        -: 1255:void
function astronomical_hdy called 0 returned 0% blocks executed 0%
    #####: 1256:astronomical_hdy (init_data, detected, year, hd_elems, fday, count)
        -: 1257:     Bool *init_data;
        -: 1258:     const Bool detected;
        -: 1259:     const int year;
        -: 1260:     int *hd_elems;
        -: 1261:     const int fday;
        -: 1262:     const int count;
        -: 1263:/*!
        -: 1264:   Manages all Astronomically based holidays (equinoxes, solstices,
        -: 1265:   Moon phases, solar and lunar eclipses).
        -: 1266:     Calculations are done for a line at a definite meridian expressed as a
        -: 1267:     time value.  This time value is given by the global `time_hour_offset'
        -: 1268:     variable and by the global `time_min_offset' variable.  If HOUR and MIN
        -: 1269:     are set to zero, calculations are made for Universal Time (UTC/GMT).  If
        -: 1270:     HOUR and MIN have a positive sign, UTC/GMT calculations are made for
        -: 1271:     meridians East of Greenwich, otherwise for meridians West of Greenwich.
        -: 1272:*/
        -: 1273:{
        -: 1274:  auto double mjd;
        -: 1275:  auto double eclipse;
        -: 1276:  auto double x;
        -: 1277:  auto Ulint lunation;
        -: 1278:  auto int the_min;
        -: 1279:  auto int the_hour;
        -: 1280:  auto int d;
        -: 1281:  auto int m;
    #####: 1282:  auto int y = year;
        -: 1283:  auto char *ptr_txt;
    #####: 1284:  auto char *ptr2_txt = (char *) NULL;
        -: 1285:
        -: 1286:
    #####: 1287:  ptr_cc_id = _("Ast");
        -: 1288:  /*
        -: 1289:     Detect all equinoxes and solstices of the YEAR.
        -: 1290:   */
    #####: 1291:  for (x = NH_VE; x <= NH_WS; x += 90.0)
branch  0 never executed
branch  1 never executed
        -: 1292:    {
    #####: 1293:      mjd =
call    0 never executed
    #####: 1294:	equinox_solstice (x, &d, &m, &y, time_hour_offset, time_min_offset);
    #####: 1295:      if (mjd != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 1296:	{
    #####: 1297:	  val2hours (mjd, &the_hour, &the_min, NULL);
call    0 never executed
    #####: 1298:	  if (x == NH_VE || x == NH_AE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1299:	    ptr_txt = _(hd_text[HD_EQUINOX_DAY].ht_text);
        -: 1300:	  else
    #####: 1301:	    ptr_txt = _(hd_text[HD_SOLSTICE_DAY].ht_text);
    #####: 1302:	  sprintf (s2, "%s %02d%s%02d", ptr_txt, the_hour, time_sep, the_min);
    #####: 1303:	  holiday (*init_data, detected, s2, ptr_cc_id,
call    0 never executed
        -: 1304:		   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 1305:	  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1306:	    *init_data = FALSE;
        -: 1307:	}
        -: 1308:      else
    #####: 1309:	y = year;
        -: 1310:    }
        -: 1311:  /*
        -: 1312:     Detect all New, First Quarter, Full and Last Quarter Moon phases,
        -: 1313:     and all solar and lunar eclipses of the YEAR.
        -: 1314:   */
    #####: 1315:  for (x = MPHASE_NEW; x <= MPHASE_LQT; x += 0.25)
branch  0 never executed
branch  1 never executed
        -: 1316:    {
    #####: 1317:      lunation = 0L;
    #####: 1318:      d = DAY_MIN;
    #####: 1319:      m = MONTH_MIN;
    #####: 1320:      y = year;
    #####: 1321:      while (y == year)
branch  0 never executed
branch  1 never executed
        -: 1322:	{
    #####: 1323:	  mjd = moonphase (x, TRUE, &eclipse, &lunation,
call    0 never executed
        -: 1324:			   &d, &m, &y, time_hour_offset, time_min_offset);
    #####: 1325:	  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1326:	    {
        -: 1327:	      /*
        -: 1328:	         Manage Moon phase.
        -: 1329:	       */
    #####: 1330:	      switch ((int) ROUND (x * 4.0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
        -: 1331:		{
    #####: 1332:		case 0:
    #####: 1333:		  ptr_txt = _(hd_text[HD_MOON_NEW].ht_text);
    #####: 1334:		  ptr2_txt = _(hd_text[HD_ECLIPSE_SOLAR].ht_text);
    #####: 1335:		  break;
    #####: 1336:		case 1:
    #####: 1337:		  ptr_txt = _(hd_text[HD_MOON_FIRST_QUARTER].ht_text);
    #####: 1338:		  break;
    #####: 1339:		case 2:
    #####: 1340:		  ptr_txt = _(hd_text[HD_MOON_FULL].ht_text);
    #####: 1341:		  ptr2_txt = _(hd_text[HD_ECLIPSE_LUNAR].ht_text);
    #####: 1342:		  break;
    #####: 1343:		case 3:
    #####: 1344:		  ptr_txt = _(hd_text[HD_MOON_LAST_QUARTER].ht_text);
    #####: 1345:		  break;
    #####: 1346:		default:
    #####: 1347:		  abort ();	/* Error, invalid case! */
call    0 never executed
        -: 1348:		}
    #####: 1349:	      val2hours (mjd, &the_hour, &the_min, NULL);
call    0 never executed
    #####: 1350:	      sprintf (s2, "%s %02d%s%02d", ptr_txt, the_hour, time_sep,
        -: 1351:		       the_min);
    #####: 1352:	      holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d,
call    0 never executed
        -: 1353:		       m, year, hd_elems, fday, count);
        -: 1354:	      /*
        -: 1355:	         Manage eclipse.
        -: 1356:	       */
    #####: 1357:	      if (eclipse != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 1358:		{
    #####: 1359:		  ptr_txt = decode_eclipse (&eclipse);
call    0 never executed
    #####: 1360:		  num2date ((Ulint) eclipse, &d, &m, &y);
call    0 never executed
    #####: 1361:		  val2hours (eclipse, &the_hour, &the_min, NULL);
call    0 never executed
    #####: 1362:		  sprintf (s2, "%s/%s %02d%s%02d",
        -: 1363:			   ptr2_txt, ptr_txt, the_hour, time_sep, the_min);
    #####: 1364:		  holiday (*init_data, detected, s2, ptr_cc_id,
call    0 never executed
        -: 1365:			   DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
        -: 1366:		}
    #####: 1367:	      lunation++;
        -: 1368:	    }
        -: 1369:	}
        -: 1370:    }
    #####: 1371:}
        -: 1372:
        -: 1373:
        -: 1374:
        -: 1375:void
function bahai_hdy called 0 returned 0% blocks executed 0%
    #####: 1376:bahai_hdy (init_data, detected, year, hd_elems, fday, count, cc)
        -: 1377:     Bool *init_data;
        -: 1378:     const Bool detected;
        -: 1379:     const int year;
        -: 1380:     int *hd_elems;
        -: 1381:     const int fday;
        -: 1382:     const int count;
        -: 1383:     const char *cc;
        -: 1384:/*!
        -: 1385:   Manages all Bah'a'i calendar based holidays since AD 21-Mar-1844.
        -: 1386:*/
        -: 1387:{
    #####: 1388:  if (year > 1843)
branch  0 never executed
branch  1 never executed
        -: 1389:    {
        -: 1390:      register int doy;
        -: 1391:      register int cc_mode;
        -: 1392:
        -: 1393:
    #####: 1394:      if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 1395:	cc_mode = 0;
    #####: 1396:      else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 1397:	cc_mode = SPECIAL_VALUE;
        -: 1398:      else
    #####: 1399:	abort ();		/* Error, invalid case! */
call    0 never executed
    #####: 1400:      ptr_cc_id = _("Bah");
    #####: 1401:      doy = day_of_year (21, 3, year);
call    0 never executed
    #####: 1402:      if (year <= greg->year)
branch  0 never executed
branch  1 never executed
    #####: 1403:	doy -= 12;
        -: 1404:      /*
        -: 1405:         Calculate the year number used in the Bah'a'i calendar.
        -: 1406:       */
    #####: 1407:      sprintf (s2, "%s %d", _(hd_text[HD_BAHAI_NEW_YEARS_DAY].ht_text),
        -: 1408:	       year - 1843);
    #####: 1409:      holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, doy, 0,
call    0 never executed
        -: 1410:	       year, hd_elems, fday, count);
    #####: 1411:      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1412:	*init_data = FALSE;
    #####: 1413:      if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 1414:	{
    #####: 1415:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1416:		   _(hd_text[HD_BAHAI_FIRST_DAY_OF_RIDVAN].ht_text),
        -: 1417:		   ptr_cc_id, DIS_HLS_PREF, doy + 31, 0, year, hd_elems, fday,
        -: 1418:		   count);
    #####: 1419:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1420:		   _(hd_text[HD_BAHAI_NINTH_DAY_OF_RIDVAN].ht_text),
        -: 1421:		   ptr_cc_id, DIS_HLS_PREF, doy + 39, 0, year, hd_elems, fday,
        -: 1422:		   count);
    #####: 1423:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1424:		   _(hd_text[HD_BAHAI_TWELFTH_DAY_OF_RIDVAN].ht_text),
        -: 1425:		   ptr_cc_id, DIS_HLS_PREF, doy + 42, 0, year, hd_elems, fday,
        -: 1426:		   count);
    #####: 1427:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1428:		   _(hd_text[HD_BAHAI_DECLARATION_OF_THE_BAB].ht_text),
        -: 1429:		   ptr_cc_id, DIS_HLS_PREF, doy + 63, 0, year, hd_elems, fday,
        -: 1430:		   count);
    #####: 1431:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1432:		   _(hd_text[HD_BAHAI_ASCENSION_OF_BAHA_ULLAH].ht_text),
        -: 1433:		   ptr_cc_id, DIS_HLS_PREF, doy + 69, 0, year, hd_elems, fday,
        -: 1434:		   count);
    #####: 1435:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1436:		   _(hd_text[HD_BAHAI_MARTYRDOM_OF_THE_BAB].ht_text),
        -: 1437:		   ptr_cc_id, DIS_HLS_PREF, doy + 110, 0, year, hd_elems,
        -: 1438:		   fday, count);
    #####: 1439:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1440:		   _(hd_text[HD_BAHAI_BIRTH_OF_THE_BAB].ht_text), ptr_cc_id,
        -: 1441:		   DIS_HLS_PREF, doy + 213, 0, year, hd_elems, fday, count);
    #####: 1442:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1443:		   _(hd_text[HD_BAHAI_BIRTH_OF_BAHA_ULLAH].ht_text),
        -: 1444:		   ptr_cc_id, DIS_HLS_PREF, doy + 236, 0, year, hd_elems,
        -: 1445:		   fday, count);
    #####: 1446:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1447:		   _(hd_text[HD_BAHAI_DAY_OF_THE_COVENANT].ht_text),
        -: 1448:		   ptr_cc_id, DIS_HLS_PREF, doy + 250, 0, year, hd_elems,
        -: 1449:		   fday, count);
    #####: 1450:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1451:		   _(hd_text[HD_BAHAI_ASCENSION_OF_ABDUL_BAHA].ht_text),
        -: 1452:		   ptr_cc_id, DIS_HLS_PREF, doy + 252, 0, year, hd_elems,
        -: 1453:		   fday, count);
        -: 1454:	}
        -: 1455:    }
    #####: 1456:}
        -: 1457:
        -: 1458:
        -: 1459:
        -: 1460:void
function bahai_mth called 0 returned 0% blocks executed 0%
    #####: 1461:bahai_mth (init_data, detected, year, hd_elems, fday, count)
        -: 1462:     Bool *init_data;
        -: 1463:     const Bool detected;
        -: 1464:     const int year;
        -: 1465:     int *hd_elems;
        -: 1466:     const int fday;
        -: 1467:     const int count;
        -: 1468:/*!
        -: 1469:   Manages all Bah'a'i calendar based months since AD 21-Mar-1844.
        -: 1470:*/
        -: 1471:{
    #####: 1472:  if (year > 1843)
branch  0 never executed
branch  1 never executed
        -: 1473:    {
        -: 1474:      auto Ulint bdate;
        -: 1475:      register int bm;
        -: 1476:      register int i;
        -: 1477:      register int n;
        -: 1478:      auto int d;
        -: 1479:      auto int m;
        -: 1480:      auto int y;
        -: 1481:
        -: 1482:
    #####: 1483:      ptr_cc_id = _("Bah");
    #####: 1484:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 1485:	if (n > 1843)
branch  0 never executed
branch  1 never executed
        -: 1486:	  {
    #####: 1487:	    bdate = date2num (21, 3, n);
call    0 never executed
    #####: 1488:	    if (n <= greg->year)
branch  0 never executed
branch  1 never executed
    #####: 1489:	      bdate -= 12;
        -: 1490:	    /*
        -: 1491:	       And manage all Bah'a'i calendar months.
        -: 1492:	     */
    #####: 1493:	    for (bm = MONTH_MIN, i = 0; i <= 19; bm++, i++)
branch  0 never executed
branch  1 never executed
        -: 1494:	      {
    #####: 1495:		num2date (bdate, &d, &m, &y);
call    0 never executed
    #####: 1496:		if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1497:		  {
    #####: 1498:		    if (i == 18)
branch  0 never executed
branch  1 never executed
        -: 1499:		      {
    #####: 1500:			bm--;
    #####: 1501:			bdate -= (15 - (days_of_february (n) != 29));
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1502:			ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
call    0 never executed
        -: 1503:				       year, TRUE, bm, n - 1843,
        -: 1504:				       SPECIAL_VALUE, hd_elems, fday, count);
        -: 1505:		      }
        -: 1506:		    else
    #####: 1507:		      ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
call    0 never executed
        -: 1508:				     year, FALSE, bm, n - 1843, SPECIAL_VALUE,
        -: 1509:				     hd_elems, fday, count);
        -: 1510:		  }
    #####: 1511:		bdate += 19;
        -: 1512:	      }
        -: 1513:	  }
        -: 1514:    }
    #####: 1515:}
        -: 1516:
        -: 1517:
        -: 1518:
        -: 1519:void
function celtic_hdy called 0 returned 0% blocks executed 0%
    #####: 1520:celtic_hdy (init_data, detected, year, hd_elems, fday, count, cc)
        -: 1521:     Bool *init_data;
        -: 1522:     const Bool detected;
        -: 1523:     const int year;
        -: 1524:     int *hd_elems;
        -: 1525:     const int fday;
        -: 1526:     const int count;
        -: 1527:     const char *cc;
        -: 1528:/*!
        -: 1529:   Manages all Celtic calendar based holidays.
        -: 1530:     Calculations are done for a line at a definite meridian expressed as a
        -: 1531:     time value.  This time value is given by the global `time_hour_offset'
        -: 1532:     variable and by the global `time_min_offset' variable.  If HOUR and MIN
        -: 1533:     are set to zero, calculations are made for Universal Time (UTC/GMT).  If
        -: 1534:     HOUR and MIN have a positive sign, UTC/GMT calculations are made for
        -: 1535:     meridians East of Greenwich, otherwise for meridians West of Greenwich.
        -: 1536:*/
        -: 1537:{
        -: 1538:  register int cc_mode;
        -: 1539:  auto int d;
        -: 1540:  auto int m;
    #####: 1541:  auto int y = year;
        -: 1542:
        -: 1543:
    #####: 1544:  if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 1545:    cc_mode = 0;
    #####: 1546:  else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 1547:    cc_mode = SPECIAL_VALUE;
        -: 1548:  else
    #####: 1549:    abort ();			/* Error, invalid case! */
call    0 never executed
    #####: 1550:  ptr_cc_id = _("Cel");
        -: 1551:  /*
        -: 1552:     Manage all critical holidays, which can exceed the year bounds
        -: 1553:     of a Julian/Gregorian calendar year.
        -: 1554:   */
    #####: 1555:  if (sun_longitude
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1556:      (225.0, &d, &m, &y, time_hour_offset, time_min_offset,
        -: 1557:       FALSE) != SPECIAL_VALUE)
        -: 1558:    {
    #####: 1559:      holiday (*init_data, detected, _(hd_text[HD_CELTIC_SAMHAIN].ht_text),
call    0 never executed
        -: 1560:	       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 1561:      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1562:	*init_data = FALSE;
        -: 1563:    }
        -: 1564:  else
    #####: 1565:    y = year;
    #####: 1566:  if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 1567:    {
    #####: 1568:      if (sun_longitude
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1569:	  (315.0, &d, &m, &y, time_hour_offset, time_min_offset,
        -: 1570:	   FALSE) != SPECIAL_VALUE)
        -: 1571:	{
    #####: 1572:	  holiday (*init_data, detected, _(hd_text[HD_CELTIC_IMBOLG].ht_text),
call    0 never executed
        -: 1573:		   ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 1574:	  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1575:	    *init_data = FALSE;
        -: 1576:	}
        -: 1577:      else
    #####: 1578:	y = year;
    #####: 1579:      if (sun_longitude
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1580:	  (45.0, &d, &m, &y, time_hour_offset, time_min_offset,
        -: 1581:	   FALSE) != SPECIAL_VALUE)
        -: 1582:	{
    #####: 1583:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1584:		   _(hd_text[HD_CELTIC_BELTANE].ht_text), ptr_cc_id,
        -: 1585:		   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 1586:	  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1587:	    *init_data = FALSE;
        -: 1588:	}
        -: 1589:      else
    #####: 1590:	y = year;
    #####: 1591:      if (sun_longitude
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1592:	  (135.0, &d, &m, &y, time_hour_offset, time_min_offset,
        -: 1593:	   FALSE) != SPECIAL_VALUE)
        -: 1594:	{
    #####: 1595:	  holiday (*init_data, detected,
call    0 never executed
    #####: 1596:		   _(hd_text[HD_CELTIC_LUGHNASA].ht_text), ptr_cc_id,
        -: 1597:		   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 1598:	  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1599:	    *init_data = FALSE;
        -: 1600:	}
        -: 1601:    }
    #####: 1602:}
        -: 1603:
        -: 1604:
        -: 1605:
        -: 1606:void
function chinese_hdy called 0 returned 0% blocks executed 0%
    #####: 1607:chinese_hdy (init_data, detected, year, hd_elems, fday, count, cc,
        -: 1608:	     is_any_meridian)
        -: 1609:     Bool *init_data;
        -: 1610:     const Bool detected;
        -: 1611:     const int year;
        -: 1612:     int *hd_elems;
        -: 1613:     const int fday;
        -: 1614:     const int count;
        -: 1615:     const char *cc;
        -: 1616:     const Bool is_any_meridian;
        -: 1617:/*!
        -: 1618:   Manages all Chinese calendar based holidays since AD 1645.
        -: 1619:     Earlier years are not respected, because the rules of the Chinese
        -: 1620:     calendar have changed too many times during these former years.
        -: 1621:     The function results have to be interpreted with caution, because
        -: 1622:     of the inaccuratenesses of the Moon phase and the Sun longitude
        -: 1623:     calculation function used.
        -: 1624:   For a good and detailed reference of the Chinese calendar, see:
        -: 1625:     "The Mathematics of the Chinese Calendar" by Helmer Aslaksen,
        -: 1626:     <http://www.math.nus.edu.sg/aslaksen/>.
        -: 1627:*/
        -: 1628:{
    #####: 1629:  if (year > 1644)
branch  0 never executed
branch  1 never executed
        -: 1630:    {
        -: 1631:      auto Ulint conjunction_vector[MONTH_MAX + 4];
    #####: 1632:      auto Ulint *ptr_conjunction_vector = conjunction_vector;
        -: 1633:      auto Ulint zq;
        -: 1634:      register int cj;
        -: 1635:      register int lm;
        -: 1636:      register int cc_mode;
        -: 1637:      register int hour;
        -: 1638:      register int min;
    #####: 1639:      register int extra = 0;
        -: 1640:      register int i;
        -: 1641:      register int j;
        -: 1642:      register int k;
        -: 1643:      auto int d;
        -: 1644:      auto int m;
    #####: 1645:      auto int y = year;
        -: 1646:      auto char *hdy_prefix;
    #####: 1647:      auto Bool is_checked = FALSE;
    #####: 1648:      auto Bool check_twice = FALSE;
        -: 1649:
        -: 1650:
    #####: 1651:      if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 1652:	cc_mode = 0;
    #####: 1653:      else if (!strcmp (cc, "BN"))
branch  0 never executed
branch  1 never executed
    #####: 1654:	cc_mode = 1;
    #####: 1655:      else if (!strcmp (cc, "CN"))
branch  0 never executed
branch  1 never executed
    #####: 1656:	cc_mode = 2;
    #####: 1657:      else if (!strcmp (cc, "HK"))
branch  0 never executed
branch  1 never executed
    #####: 1658:	cc_mode = 3;
    #####: 1659:      else if (!strcmp (cc, "ID"))
branch  0 never executed
branch  1 never executed
    #####: 1660:	cc_mode = 4;
    #####: 1661:      else if (!strcmp (cc, "KH"))
branch  0 never executed
branch  1 never executed
    #####: 1662:	cc_mode = 5;
    #####: 1663:      else if (!strcmp (cc, "KR"))
branch  0 never executed
branch  1 never executed
    #####: 1664:	cc_mode = 6;
    #####: 1665:      else if (!strcmp (cc, "KP"))
branch  0 never executed
branch  1 never executed
    #####: 1666:	cc_mode = 7;
    #####: 1667:      else if (!strcmp (cc, "LA"))
branch  0 never executed
branch  1 never executed
    #####: 1668:	cc_mode = 8;
    #####: 1669:      else if (!strcmp (cc, "MN"))
branch  0 never executed
branch  1 never executed
    #####: 1670:	cc_mode = 9;
    #####: 1671:      else if (!strcmp (cc, "MO"))
branch  0 never executed
branch  1 never executed
    #####: 1672:	cc_mode = 10;
    #####: 1673:      else if (!strcmp (cc, "MU"))
branch  0 never executed
branch  1 never executed
    #####: 1674:	cc_mode = 11;
    #####: 1675:      else if (!strcmp (cc, "MY"))
branch  0 never executed
branch  1 never executed
    #####: 1676:	cc_mode = 12;
    #####: 1677:      else if (!strcmp (cc, "PF"))
branch  0 never executed
branch  1 never executed
    #####: 1678:	cc_mode = 13;
    #####: 1679:      else if (!strcmp (cc, "SG"))
branch  0 never executed
branch  1 never executed
    #####: 1680:	cc_mode = 14;
    #####: 1681:      else if (!strcmp (cc, "TH"))
branch  0 never executed
branch  1 never executed
    #####: 1682:	cc_mode = 15;
    #####: 1683:      else if (!strcmp (cc, "TW"))
branch  0 never executed
branch  1 never executed
    #####: 1684:	cc_mode = 16;
    #####: 1685:      else if (!strcmp (cc, "VN"))
branch  0 never executed
branch  1 never executed
    #####: 1686:	cc_mode = 17;
    #####: 1687:      else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 1688:	cc_mode = SPECIAL_VALUE;
        -: 1689:      else
    #####: 1690:	abort ();		/* Error, invalid case! */
call    0 never executed
    #####: 1691:      if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1692:	ptr_cc_id = _("Chi");
    #####: 1693:      if (is_any_meridian)
branch  0 never executed
branch  1 never executed
        -: 1694:	{
        -: 1695:	  /*
        -: 1696:	     Astronomical calculations are done for a line at a definite
        -: 1697:	     meridian expressed as a time value.  This time value is given
        -: 1698:	     by the global `time_hour_offset' variable and by the global
        -: 1699:	     `time_min_offset' variable.  If HOUR and MIN are set to zero,
        -: 1700:	     calculations are made for Universal Time (UTC/GMT).  If HOUR
        -: 1701:	     and MIN have a positive sign, UTC/GMT calculations are made
        -: 1702:	     for meridians East of Greenwich, otherwise for meridians
        -: 1703:	     West of Greenwich.
        -: 1704:	   */
    #####: 1705:	  hour = time_hour_offset;
    #####: 1706:	  min = time_min_offset;
        -: 1707:	}
        -: 1708:      else
        -: 1709:	{
        -: 1710:	  /*
        -: 1711:	     Astronomical calculations are based on China local time.
        -: 1712:	   */
    #####: 1713:	  if (year < 1929)
branch  0 never executed
branch  1 never executed
        -: 1714:	    {
        -: 1715:	      /*
        -: 1716:	         Meridian Beijing (116 25' degrees East), UTC/GMT time difference.
        -: 1717:	       */
    #####: 1718:	      hour = 7;
    #####: 1719:	      min = 45;
        -: 1720:	    }
        -: 1721:	  else
        -: 1722:	    {
        -: 1723:	      /*
        -: 1724:	         UTC/GMT-8 for the meridian 120 degrees East.
        -: 1725:	       */
    #####: 1726:	      hour = 8;
    #####: 1727:	      min = 0;
        -: 1728:	    }
        -: 1729:	}
    #####: 1730:      if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 1731:	{
        -: 1732:	  /*
        -: 1733:	     Manage the major solar term/Zhong-Qi related festivals first.
        -: 1734:	   */
    #####: 1735:	  if (!cc_mode || cc_mode == 2 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1736:	    {
    #####: 1737:	      if (cc_mode == 10)
branch  0 never executed
branch  1 never executed
    #####: 1738:		hdy_prefix = "+";
        -: 1739:	      else
    #####: 1740:		hdy_prefix = DIS_HLS_PREF;
    #####: 1741:	      if (equinox_solstice (NH_WS, &d, &m, &y, hour, min) !=
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1742:		  SPECIAL_VALUE)
        -: 1743:		{
    #####: 1744:		  holiday (*init_data, detected,
call    0 never executed
    #####: 1745:			   _(hd_text[HD_SOLSTICE_DAY].ht_text), ptr_cc_id,
        -: 1746:			   hdy_prefix, d, m, y, hd_elems, fday, count);
    #####: 1747:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1748:		    *init_data = FALSE;
        -: 1749:		}
        -: 1750:	      else
    #####: 1751:		y = year;
        -: 1752:	    }
        -: 1753:	  /*
        -: 1754:	     Manage the minor solar term/Jie-Qi related festivals next.
        -: 1755:	   */
    #####: 1756:	  if (!cc_mode || cc_mode == 2 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1757:	    j = 1;
    #####: 1758:	  else if (cc_mode == 3 || cc_mode == 16)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1759:	    j = 2;
        -: 1760:	  else
    #####: 1761:	    j = 0;
    #####: 1762:	  if (j)
branch  0 never executed
branch  1 never executed
        -: 1763:	    {
    #####: 1764:	      if (cc_mode == 3 || cc_mode == 10 || cc_mode == 16)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1765:		hdy_prefix = "+";
        -: 1766:	      else
    #####: 1767:		hdy_prefix = DIS_HLS_PREF;
    #####: 1768:	      if (sun_longitude (15.0, &d, &m, &y, hour, min, FALSE) !=
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1769:		  SPECIAL_VALUE)
        -: 1770:		{
    #####: 1771:		  if (j == 1)
branch  0 never executed
branch  1 never executed
    #####: 1772:		    holiday (*init_data, detected,
call    0 never executed
    #####: 1773:			     _(hd_text[HD_TOMB_SWEEPING_DAY].ht_text),
        -: 1774:			     ptr_cc_id, hdy_prefix, d, m, y, hd_elems, fday,
        -: 1775:			     count);
        -: 1776:		  else
        -: 1777:		    {
    #####: 1778:		      (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 1779:		      holiday (*init_data, detected,
call    0 never executed
    #####: 1780:			       _(hd_text[HD_DAY_AFTER_TOMB_SWEEPING_DAY].
        -: 1781:				 ht_text), ptr_cc_id, hdy_prefix, d, m, y,
        -: 1782:			       hd_elems, fday, count);
        -: 1783:		    }
    #####: 1784:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1785:		    *init_data = FALSE;
        -: 1786:		}
        -: 1787:	      else
    #####: 1788:		y = year;
        -: 1789:	    }
        -: 1790:	}
    #####: 1791:    LABEL_chinese_new_year_twice:
        -: 1792:      /*
        -: 1793:         And now the lunar based holidays, so check for a possible leap month.
        -: 1794:       */
    #####: 1795:      lm =
call    0 never executed
    #####: 1796:	find_chinese_leap_month (ptr_conjunction_vector, &zq, y, hour, min);
    #####: 1797:      if (lm == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 1798:	{
        -: 1799:	  /*
        -: 1800:	     Error, cannot compute the lunisolar based calendar correctly.
        -: 1801:	   */
    #####: 1802:	  if (warning_level >= 0)
branch  0 never executed
branch  1 never executed
        -: 1803:	    {
    #####: 1804:	      sprintf (s2,
        -: 1805:		       _
        -: 1806:		       ("Cannot calculate lunisolar calendar for %d correctly"),
        -: 1807:		       y);
    #####: 1808:	      print_text (stderr, s2);
call    0 never executed
    #####: 1809:	      if (warning_level >= WARN_LVL_MAX)
branch  0 never executed
branch  1 never executed
    #####: 1810:		my_error (ERR_INTERNAL_C_FUNC_FAILURE, __FILE__,
call    0 never executed
        -: 1811:			  ((long) __LINE__) - 15L,
        -: 1812:			  "find_chinese_leap_month()::lm!=", lm);
        -: 1813:	    }
        -: 1814:	}
        -: 1815:      else
        -: 1816:	{
        -: 1817:	  /*
        -: 1818:	     Now, since we know the leap month in the year YEAR, we can
        -: 1819:	     calculate the date of the Chinese_New_Year/Chinese calendar
        -: 1820:	     month 1 correctly.  The Chinese_New_Year is on the date of the
        -: 1821:	     second New Moon ***after*** the date of the winter solstice
        -: 1822:	     (which is always in the 11th month of the Chinese calendar)
        -: 1823:	     of the previous YEAR, but only if there is NO leap month 11
        -: 1824:	     or 12 (this case is marked by `lm==-11|-12'), otherwise it is
        -: 1825:	     on the date of the third New Moon ***after*** the date of the
        -: 1826:	     winter solstice of the previous YEAR.
        -: 1827:	   */
    #####: 1828:	  cj = 0;
    #####: 1829:	  if (conjunction_vector[cj] == zq)
branch  0 never executed
branch  1 never executed
    #####: 1830:	    cj++;
    #####: 1831:	  if (lm < 0)
branch  0 never executed
branch  1 never executed
    #####: 1832:	    cj += 2;
        -: 1833:	  else
    #####: 1834:	    cj++;
    #####: 1835:	  num2date (conjunction_vector[cj], &d, &m, &y);
call    0 never executed
        -: 1836:	  /*
        -: 1837:	     Detect whether it is necessary to respect the holidays of
        -: 1838:	     the next YEAR.  This must always be done if we are creating
        -: 1839:	     dates according to the proleptic Julian calendar and the
        -: 1840:	     Chinese_New_Year holiday either started in the previous YEAR
        -: 1841:	     or started early in the actual YEAR.
        -: 1842:	   */
    #####: 1843:	  if (!is_checked
branch  0 never executed
branch  1 never executed
    #####: 1844:	      && ((y != year) || ((year <= greg->year) && (year >= 2700))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1845:	    is_checked = check_twice = TRUE;
    #####: 1846:	  if (!cc_mode || cc_mode == 6 || cc_mode == 16)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1847:	    {
    #####: 1848:	      (void) prev_date (&d, &m, &y);
call    0 never executed
    #####: 1849:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1850:		{
    #####: 1851:		  holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 1852:			   _(hd_text[HD_CHINESE_NEW_YEARS_EVE].ht_text),
        -: 1853:			   ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m, y,
        -: 1854:			   hd_elems, fday, count);
    #####: 1855:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1856:		    *init_data = FALSE;
        -: 1857:		}
    #####: 1858:	      (void) next_date (&d, &m, &y);
call    0 never executed
        -: 1859:	    }
    #####: 1860:	  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1861:	    {
    #####: 1862:	      if (!cc_mode
branch  0 never executed
branch  1 never executed
    #####: 1863:		  || cc_mode == 7
branch  0 never executed
branch  1 never executed
    #####: 1864:		  || cc_mode == 15 || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1865:		hdy_prefix = DIS_HLS_PREF;
    #####: 1866:	      else if (cc_mode == 4 || cc_mode == 5)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1867:		hdy_prefix = DIS_HLS_PREF2;
        -: 1868:	      else
    #####: 1869:		hdy_prefix = "+";
        -: 1870:	      /*
        -: 1871:	         Calculate the year number used in the Chinese calendar,
        -: 1872:	         based on the first historical record of the 60-year cycle
        -: 1873:	         from 08-Mar-2637 BCE.
        -: 1874:	       */
    #####: 1875:	      k = y + 2637 + extra;
    #####: 1876:	      sprintf (s2, "%s %d-%d",
    #####: 1877:		       _(hd_text[HD_CHINESE_NEW_YEARS_DAY].ht_text), k,
        -: 1878:		       (lm < 0) ? 0 : lm);
    #####: 1879:	      holiday (*init_data, detected, s2, ptr_cc_id, hdy_prefix, d, m,
call    0 never executed
        -: 1880:		       y, hd_elems, fday, count);
    #####: 1881:	      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1882:		*init_data = FALSE;
    #####: 1883:	      if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1884:		{
        -: 1885:		  /*
        -: 1886:		     Compute the sexagesimal cycle data.
        -: 1887:		   */
    #####: 1888:		  i = ((k - 1) / 60) + 1;
    #####: 1889:		  j = ((k - 1) % 60) + 1;
    #####: 1890:		  sprintf (s2, "%s %d/%02d-%02d %s-%s",
    #####: 1891:			   _(hd_text[HD_CHINESE_CYCLE].ht_text), i, j,
    #####: 1892:			   (lm < 0) ? 0 : lm, chi_stem[((j - 1) % 10)],
    #####: 1893:			   _(chi_branch[((j - 1) % 12)]));
    #####: 1894:		  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF,
call    0 never executed
        -: 1895:			   d, m, y, hd_elems, fday, count);
        -: 1896:		}
        -: 1897:	    }
    #####: 1898:	  if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 1899:	    {
    #####: 1900:	      if (cc_mode == 1
branch  0 never executed
branch  1 never executed
    #####: 1901:		  || cc_mode == 4
branch  0 never executed
branch  1 never executed
    #####: 1902:		  || cc_mode == 5
branch  0 never executed
branch  1 never executed
    #####: 1903:		  || cc_mode == 8 || cc_mode == 11 || cc_mode == 13)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1904:		j = 0;
    #####: 1905:	      else if (cc_mode == 6 || cc_mode == 12 || cc_mode == 14)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1906:		j = 1;
    #####: 1907:	      else if (cc_mode == 2)
branch  0 never executed
branch  1 never executed
    #####: 1908:		j = 4;
    #####: 1909:	      else if (!cc_mode)
branch  0 never executed
branch  1 never executed
    #####: 1910:		j = 14;
        -: 1911:	      else
    #####: 1912:		j = 2;
    #####: 1913:	      if (j)
branch  0 never executed
branch  1 never executed
        -: 1914:		{
    #####: 1915:		  if (!cc_mode || cc_mode == 7 || cc_mode == 15)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1916:		    hdy_prefix = DIS_HLS_PREF;
        -: 1917:		  else
    #####: 1918:		    hdy_prefix = "+";
    #####: 1919:		  for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 1920:		    {
    #####: 1921:		      (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 1922:		      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1923:			{
    #####: 1924:			  holiday (*init_data, detected,
call    0 never executed
    #####: 1925:				   _(hd_text[HD_CHINESE_NEW_YEARS_DAY].
        -: 1926:				     ht_text), ptr_cc_id, hdy_prefix, d, m, y,
        -: 1927:				   hd_elems, fday, count);
    #####: 1928:			  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1929:			    *init_data = FALSE;
        -: 1930:			}
        -: 1931:		    }
        -: 1932:		}
    #####: 1933:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
    #####: 1934:		j = 1;
    #####: 1935:	      else if (cc_mode == 6 || cc_mode == 7)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1936:		j = 3;
        -: 1937:	      else
    #####: 1938:		j = 0;
    #####: 1939:	      if (j)
branch  0 never executed
branch  1 never executed
        -: 1940:		{
    #####: 1941:		  if (!cc_mode || cc_mode == 6 || cc_mode == 7)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1942:		    hdy_prefix = DIS_HLS_PREF;
        -: 1943:		  else
    #####: 1944:		    hdy_prefix = "+";
    #####: 1945:		  num2date (conjunction_vector[cj] + 14, &d, &m, &y);
call    0 never executed
    #####: 1946:		  for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 1947:		    {
    #####: 1948:		      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1949:			{
    #####: 1950:			  holiday (*init_data, detected,
call    0 never executed
    #####: 1951:				   _(hd_text[HD_FESTIVAL_OF_LANTERNS].
        -: 1952:				     ht_text), ptr_cc_id, hdy_prefix, d, m, y,
        -: 1953:				   hd_elems, fday, count);
    #####: 1954:			  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1955:			    *init_data = FALSE;
        -: 1956:			}
    #####: 1957:		      (void) next_date (&d, &m, &y);
call    0 never executed
        -: 1958:		    }
        -: 1959:		}
        -: 1960:	      /*
        -: 1961:	         Detect the date of the first day of the Chinese calendar
        -: 1962:	         month 2.
        -: 1963:	       */
    #####: 1964:	      if (lm == 1)
branch  0 never executed
branch  1 never executed
    #####: 1965:		cj++;
    #####: 1966:	      cj++;
    #####: 1967:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 1968:		{
    #####: 1969:		  num2date (conjunction_vector[cj] + 14, &d, &m, &y);
call    0 never executed
    #####: 1970:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1971:		    {
    #####: 1972:		      holiday (*init_data, detected,
call    0 never executed
    #####: 1973:			       _(hd_text[HD_LAO_TZES_BIRTHDAY].ht_text),
        -: 1974:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 1975:			       fday, count);
    #####: 1976:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 1977:			*init_data = FALSE;
        -: 1978:		    }
        -: 1979:		}
        -: 1980:	      /*
        -: 1981:	         Detect the date of the first day of the Chinese calendar
        -: 1982:	         month 4.
        -: 1983:	       */
    #####: 1984:	      if (lm == 2 || lm == 3)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1985:		cj++;
    #####: 1986:	      cj += 2;
    #####: 1987:	      num2date (conjunction_vector[cj] + 7, &d, &m, &y);
call    0 never executed
    #####: 1988:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 1989:		{
    #####: 1990:		  if (!cc_mode
branch  0 never executed
branch  1 never executed
    #####: 1991:		      || cc_mode == 3 || cc_mode == 6 || cc_mode == 7)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1992:		    {
    #####: 1993:		      if (cc_mode == 3)
branch  0 never executed
branch  1 never executed
    #####: 1994:			hdy_prefix = "+";
    #####: 1995:		      else if (cc_mode == 6)
branch  0 never executed
branch  1 never executed
        -: 1996:			{
    #####: 1997:			  if (year > 1974)
branch  0 never executed
branch  1 never executed
    #####: 1998:			    hdy_prefix = "+";
        -: 1999:			  else
    #####: 2000:			    hdy_prefix = DIS_HLS_PREF;
        -: 2001:			}
        -: 2002:		      else
    #####: 2003:			hdy_prefix = DIS_HLS_PREF;
    #####: 2004:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2005:			       _(hd_text[HD_BUDDHAS_BIRTHDAY].ht_text),
        -: 2006:			       ptr_cc_id, hdy_prefix, d, m, y, hd_elems, fday,
        -: 2007:			       count);
    #####: 2008:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2009:			*init_data = FALSE;
        -: 2010:		    }
        -: 2011:		}
        -: 2012:	      /*
        -: 2013:	         Detect the date of the first day of the Chinese calendar
        -: 2014:	         month 5.
        -: 2015:	       */
    #####: 2016:	      if (lm == 4)
branch  0 never executed
branch  1 never executed
    #####: 2017:		cj++;
    #####: 2018:	      num2date (conjunction_vector[++cj] + 4, &d, &m, &y);
call    0 never executed
    #####: 2019:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2020:		{
    #####: 2021:		  if (cc_mode == 3 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2022:		    hdy_prefix = "+";
        -: 2023:		  else
    #####: 2024:		    hdy_prefix = DIS_HLS_PREF;
    #####: 2025:		  if (!cc_mode
branch  0 never executed
branch  1 never executed
    #####: 2026:		      || cc_mode == 2
branch  0 never executed
branch  1 never executed
    #####: 2027:		      || cc_mode == 3
branch  0 never executed
branch  1 never executed
    #####: 2028:		      || cc_mode == 6 || cc_mode == 7 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2029:		    {
    #####: 2030:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2031:			       _(hd_text[HD_DRAGON_BOAT_FESTIVAL].ht_text),
        -: 2032:			       ptr_cc_id, hdy_prefix, d, m, y, hd_elems, fday,
        -: 2033:			       count);
    #####: 2034:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2035:			*init_data = FALSE;
        -: 2036:		    }
        -: 2037:		}
        -: 2038:	      /*
        -: 2039:	         Detect the date of the first day of the Chinese calendar
        -: 2040:	         month 7.
        -: 2041:	       */
    #####: 2042:	      if (lm == 5 || lm == 6)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2043:		cj++;
    #####: 2044:	      cj += 2;
    #####: 2045:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 2046:		{
    #####: 2047:		  num2date (conjunction_vector[cj] + 6, &d, &m, &y);
call    0 never executed
    #####: 2048:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2049:		    {
    #####: 2050:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2051:			       _(hd_text[HD_STAR_FESTIVAL].ht_text),
        -: 2052:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 2053:			       fday, count);
    #####: 2054:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2055:			*init_data = FALSE;
        -: 2056:		    }
        -: 2057:		}
        -: 2058:	      /*
        -: 2059:	         Detect the date of the first day of the Chinese calendar
        -: 2060:	         month 8.
        -: 2061:	       */
    #####: 2062:	      if (lm == 7)
branch  0 never executed
branch  1 never executed
    #####: 2063:		cj++;
    #####: 2064:	      num2date (conjunction_vector[++cj] + 13, &d, &m, &y);
call    0 never executed
    #####: 2065:	      if (cc_mode == 6 || cc_mode == 7 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2066:		hdy_prefix = "+";
        -: 2067:	      else
    #####: 2068:		hdy_prefix = DIS_HLS_PREF;
    #####: 2069:	      if ((cc_mode == 6) && (y == year))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2070:		{
    #####: 2071:		  holiday (*init_data, detected,
call    0 never executed
    #####: 2072:			   _(hd_text[HD_MID_AUTUMN_FESTIVAL].ht_text),
        -: 2073:			   ptr_cc_id, hdy_prefix, d, m, y, hd_elems, fday,
        -: 2074:			   count);
    #####: 2075:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2076:		    *init_data = FALSE;
        -: 2077:		}
    #####: 2078:	      if (!cc_mode || cc_mode == 2 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 2079:		j = 1;
    #####: 2080:	      else if (cc_mode == 6)
branch  0 never executed
branch  1 never executed
    #####: 2081:		j = 2;
    #####: 2082:	      else if (cc_mode == 7)
branch  0 never executed
branch  1 never executed
    #####: 2083:		j = 3;
        -: 2084:	      else
    #####: 2085:		j = 0;
    #####: 2086:	      for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 2087:		{
    #####: 2088:		  (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 2089:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2090:		    {
    #####: 2091:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2092:			       _(hd_text[HD_MID_AUTUMN_FESTIVAL].ht_text),
        -: 2093:			       ptr_cc_id, hdy_prefix, d, m, y, hd_elems, fday,
        -: 2094:			       count);
    #####: 2095:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2096:			*init_data = FALSE;
        -: 2097:		    }
        -: 2098:		}
    #####: 2099:	      if (cc_mode == 3 || cc_mode == 10)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2100:		{
    #####: 2101:		  num2date (conjunction_vector[cj] + 15, &d, &m, &y);
call    0 never executed
    #####: 2102:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2103:		    {
    #####: 2104:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2105:			       _(hd_text[HD_DAY_AFTER_MID_AUTUMN_FESTIVAL].
        -: 2106:				 ht_text), ptr_cc_id, "+", d, m, y, hd_elems,
        -: 2107:			       fday, count);
    #####: 2108:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2109:			*init_data = FALSE;
        -: 2110:		    }
        -: 2111:		}
    #####: 2112:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 2113:		{
    #####: 2114:		  num2date (conjunction_vector[cj] + 26, &d, &m, &y);
call    0 never executed
    #####: 2115:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2116:		    {
    #####: 2117:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2118:			       _(hd_text[HD_CONFUCIUS_BIRTHDAY].ht_text),
        -: 2119:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 2120:			       fday, count);
    #####: 2121:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2122:			*init_data = FALSE;
        -: 2123:		    }
        -: 2124:		}
        -: 2125:	      /*
        -: 2126:	         Detect the date of the first day of the Chinese calendar
        -: 2127:	         month 9.
        -: 2128:	       */
    #####: 2129:	      if (lm == 8)
branch  0 never executed
branch  1 never executed
    #####: 2130:		cj++;
    #####: 2131:	      cj++;
    #####: 2132:	      if (!cc_mode || cc_mode == 3)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2133:		{
    #####: 2134:		  num2date (conjunction_vector[cj] + 8, &d, &m, &y);
call    0 never executed
    #####: 2135:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2136:		    {
    #####: 2137:		      holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2138:			       _(hd_text[HD_DOUBLE_9_DAY].ht_text), ptr_cc_id,
        -: 2139:			       (cc_mode) ? "+" : DIS_HLS_PREF, d, m, y,
        -: 2140:			       hd_elems, fday, count);
    #####: 2141:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2142:			*init_data = FALSE;
        -: 2143:		    }
        -: 2144:		}
        -: 2145:	      /*
        -: 2146:	         Detect the date of the first day of the Chinese calendar
        -: 2147:	         month 10.
        -: 2148:	       */
    #####: 2149:	      if (lm == 9)
branch  0 never executed
branch  1 never executed
    #####: 2150:		cj++;
    #####: 2151:	      cj++;
    #####: 2152:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 2153:		{
    #####: 2154:		  num2date (conjunction_vector[cj] + 5, &d, &m, &y);
call    0 never executed
    #####: 2155:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2156:		    {
    #####: 2157:		      holiday (*init_data, detected,
call    0 never executed
    #####: 2158:			       _(hd_text[HD_BODHIDHARMAS_BIRTHDAY].ht_text),
        -: 2159:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 2160:			       fday, count);
    #####: 2161:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2162:			*init_data = FALSE;
        -: 2163:		    }
        -: 2164:		}
        -: 2165:	    }
    #####: 2166:	  if (check_twice)
branch  0 never executed
branch  1 never executed
        -: 2167:	    {
    #####: 2168:	      check_twice = FALSE;
    #####: 2169:	      y = year + 1;
    #####: 2170:	      extra++;
    #####: 2171:	      goto LABEL_chinese_new_year_twice;
        -: 2172:	    }
        -: 2173:	}
        -: 2174:    }
    #####: 2175:}
        -: 2176:
        -: 2177:
        -: 2178:
        -: 2179:void
function chinese_mth called 0 returned 0% blocks executed 0%
    #####: 2180:chinese_mth (init_data, detected, year, hd_elems, fday, count,
        -: 2181:	     is_any_meridian, do_chinese)
        -: 2182:     Bool *init_data;
        -: 2183:     const Bool detected;
        -: 2184:     const int year;
        -: 2185:     int *hd_elems;
        -: 2186:     const int fday;
        -: 2187:     const int count;
        -: 2188:     const Bool is_any_meridian;
        -: 2189:     const Bool do_chinese;
        -: 2190:/*!
        -: 2191:   Manages all Chinese/Japanese calendar based months since AD 1645.
        -: 2192:     Earlier years are not respected, because the rules of the Chinese/Japanese
        -: 2193:     calendar have changed too many times during these former years.  The
        -: 2194:     function results have to be interpreted with caution, because of the
        -: 2195:     inaccuratenesses of the Moon phase and the Sun longitude calculation
        -: 2196:     function used.
        -: 2197:   For a good and detailed reference of the Chinese calendar, see:
        -: 2198:     "The Mathematics of the Chinese Calendar" by Helmer Aslaksen,
        -: 2199:     <http://www.math.nus.edu.sg/aslaksen/>.
        -: 2200:*/
        -: 2201:{
    #####: 2202:  if (year > 1644)
branch  0 never executed
branch  1 never executed
        -: 2203:    {
        -: 2204:      auto Ulint conjunction_vector[MONTH_MAX + 4];
    #####: 2205:      auto Ulint *ptr_conjunction_vector = conjunction_vector;
        -: 2206:      auto Ulint zq;
    #####: 2207:      auto Ulint cj_buf = 0L;
        -: 2208:      register int cj;
    #####: 2209:      register int lm_buf = 0;
        -: 2210:      register int lm;
        -: 2211:      register int cny;
        -: 2212:      register int cm;
        -: 2213:      register int hour;
        -: 2214:      register int min;
        -: 2215:      register int i;
    #####: 2216:      register int j = 0;
        -: 2217:      register int n;
        -: 2218:      register int n_max;
        -: 2219:      auto int d;
        -: 2220:      auto int m;
        -: 2221:      auto int y;
        -: 2222:
        -: 2223:
    #####: 2224:      if (do_chinese)
branch  0 never executed
branch  1 never executed
    #####: 2225:	ptr_cc_id = _("Chi");
        -: 2226:      else
    #####: 2227:	ptr_cc_id = _("Jap");
    #####: 2228:      if (is_any_meridian)
branch  0 never executed
branch  1 never executed
        -: 2229:	{
        -: 2230:	  /*
        -: 2231:	     Astronomical calculations are done for a line at a definite
        -: 2232:	     meridian expressed as a time value.  This time value is given
        -: 2233:	     by the global `time_hour_offset' variable and by the global
        -: 2234:	     `time_min_offset' variable.  If HOUR and MIN are set to zero,
        -: 2235:	     calculations are made for Universal Time (UTC/GMT).  If HOUR
        -: 2236:	     and MIN have a positive sign, UTC/GMT calculations are made
        -: 2237:	     for meridians East of Greenwich, otherwise for meridians
        -: 2238:	     West of Greenwich.
        -: 2239:	   */
    #####: 2240:	  hour = time_hour_offset;
    #####: 2241:	  min = time_min_offset;
        -: 2242:	}
        -: 2243:      else
        -: 2244:	{
    #####: 2245:	  if (do_chinese)
branch  0 never executed
branch  1 never executed
        -: 2246:	    {
        -: 2247:	      /*
        -: 2248:	         Astronomical calculations are based on China local time.
        -: 2249:	       */
    #####: 2250:	      if (year < 1929)
branch  0 never executed
branch  1 never executed
        -: 2251:		{
        -: 2252:		  /*
        -: 2253:		     Meridian Beijing (116 25' degrees East), UTC/GMT time difference.
        -: 2254:		   */
    #####: 2255:		  hour = 7;
    #####: 2256:		  min = 45;
        -: 2257:		}
        -: 2258:	      else
        -: 2259:		{
        -: 2260:		  /*
        -: 2261:		     UTC/GMT-8 for the meridian 120 degrees East.
        -: 2262:		   */
    #####: 2263:		  hour = 8;
    #####: 2264:		  min = 0;
        -: 2265:		}
        -: 2266:	    }
        -: 2267:	  else
        -: 2268:	    {
        -: 2269:	      /*
        -: 2270:	         Astronomical calculations are based on China/Japan local time.
        -: 2271:	       */
    #####: 2272:	      if (year < 1888)
branch  0 never executed
branch  1 never executed
        -: 2273:		{
        -: 2274:		  /*
        -: 2275:		     Meridian Beijing (116 25' degrees East), UTC/GMT time difference.
        -: 2276:		   */
    #####: 2277:		  hour = 7;
    #####: 2278:		  min = 45;
        -: 2279:		}
        -: 2280:	      else
        -: 2281:		{
        -: 2282:		  /*
        -: 2283:		     UTC/GMT-9 for the meridian 135 degrees East.
        -: 2284:		   */
    #####: 2285:		  hour = 9;
    #####: 2286:		  min = 0;
        -: 2287:		}
        -: 2288:	    }
        -: 2289:	}
        -: 2290:      /*
        -: 2291:         Detect whether it is necessary to respect the holidays of the
        -: 2292:         next YEAR instead of the previous YEAR.  This must always be
        -: 2293:         done if we are creating dates according to the proleptic Julian
        -: 2294:         calendar and the Chinese_New_Year holiday either started in
        -: 2295:         the previous YEAR or started early in the actual YEAR.
        -: 2296:       */
    #####: 2297:      if ((year <= greg->year) && (year >= 2700))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 2298:	{
    #####: 2299:	  n = year;
    #####: 2300:	  n_max = year + 1;
        -: 2301:	}
        -: 2302:      else
        -: 2303:	{
    #####: 2304:	  n = year - 1;
    #####: 2305:	  n_max = year;
        -: 2306:	}
    #####: 2307:      for (; n <= n_max; n++)
branch  0 never executed
branch  1 never executed
        -: 2308:	{
    #####: 2309:	  y = n;
        -: 2310:	  /*
        -: 2311:	     Manage the lunar based months, so check for a possible leap month.
        -: 2312:	   */
    #####: 2313:	  lm =
call    0 never executed
    #####: 2314:	    find_chinese_leap_month (ptr_conjunction_vector, &zq, y, hour,
        -: 2315:				     min);
    #####: 2316:	  if (lm == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 2317:	    {
        -: 2318:	      /*
        -: 2319:	         Error, cannot compute the lunisolar based calendar correctly.
        -: 2320:	       */
    #####: 2321:	      if (warning_level >= 0)
branch  0 never executed
branch  1 never executed
        -: 2322:		{
    #####: 2323:		  sprintf (s2,
        -: 2324:			   _
        -: 2325:			   ("Cannot calculate lunisolar calendar for %d correctly"),
        -: 2326:			   y);
    #####: 2327:		  print_text (stderr, s2);
call    0 never executed
    #####: 2328:		  if (warning_level >= WARN_LVL_MAX)
branch  0 never executed
branch  1 never executed
    #####: 2329:		    my_error (ERR_INTERNAL_C_FUNC_FAILURE, __FILE__,
call    0 never executed
        -: 2330:			      ((long) __LINE__) - 15L,
        -: 2331:			      "find_chinese_leap_month()::lm!=", lm);
        -: 2332:		}
        -: 2333:	    }
        -: 2334:	  else
        -: 2335:	    {
    #####: 2336:	      cj = 0;
    #####: 2337:	      if (conjunction_vector[cj] == zq)
branch  0 never executed
branch  1 never executed
    #####: 2338:		cj++;
    #####: 2339:	      if (lm < 0)
branch  0 never executed
branch  1 never executed
    #####: 2340:		cj += 2;
        -: 2341:	      else
    #####: 2342:		cj++;
    #####: 2343:	      if (!lm)
branch  0 never executed
branch  1 never executed
    #####: 2344:		lm = YEAR_MAX;
    #####: 2345:	      cny = cj;
        -: 2346:	      /*
        -: 2347:	         And manage all Chinese/Japanese calendar months.
        -: 2348:	       */
    #####: 2349:	      for (cm = MONTH_MIN, i = 0; i <= MONTH_MAX; cm++, i++)
branch  0 never executed
branch  1 never executed
        -: 2350:		{
    #####: 2351:		  num2date (conjunction_vector[cj++], &d, &m, &y);
call    0 never executed
    #####: 2352:		  if (cm > MONTH_MAX)
branch  0 never executed
branch  1 never executed
        -: 2353:		    {
    #####: 2354:		      if (!cj_buf)
branch  0 never executed
branch  1 never executed
        -: 2355:			{
    #####: 2356:			  lm_buf = lm;
    #####: 2357:			  cj_buf = conjunction_vector[cj - 1];
        -: 2358:			}
        -: 2359:		    }
    #####: 2360:		  else if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2361:		    {
    #####: 2362:		      if (do_chinese)
branch  0 never executed
branch  1 never executed
        -: 2363:			/*
        -: 2364:			   Calculate the year number used in the Chinese calendar,
        -: 2365:			   based on the first historical record of the 60-year
        -: 2366:			   cycle from 08-Mar-2637 BCE.
        -: 2367:			 */
    #####: 2368:			j = n + 2637;
        -: 2369:		      else
        -: 2370:			/*
        -: 2371:			   Calculate the year number used in the Japanese calendar,
        -: 2372:			   based on the first historical record of the 60-year
        -: 2373:			   cycle from 660 BCE.
        -: 2374:			 */
    #####: 2375:			j = n + 660;
    #####: 2376:		      if (i == lm)
branch  0 never executed
branch  1 never executed
        -: 2377:			{
    #####: 2378:			  cm--;
    #####: 2379:			  ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
call    0 never executed
        -: 2380:					 year, TRUE, cm, j, SPECIAL_VALUE,
        -: 2381:					 hd_elems, fday, count);
        -: 2382:			}
        -: 2383:		      else
    #####: 2384:			ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
call    0 never executed
        -: 2385:				       year, FALSE, cm, j, SPECIAL_VALUE,
        -: 2386:				       hd_elems, fday, count);
        -: 2387:		    }
        -: 2388:		}
    #####: 2389:	      if (cj_buf)
branch  0 never executed
branch  1 never executed
    #####: 2390:		if (cj_buf < conjunction_vector[cny])
branch  0 never executed
branch  1 never executed
        -: 2391:		  {
    #####: 2392:		    num2date (cj_buf, &d, &m, &y);
call    0 never executed
    #####: 2393:		    if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2394:		      ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
call    0 never executed
        -: 2395:				     year, (lm_buf == MONTH_MAX), MONTH_MAX,
        -: 2396:				     j - 1, SPECIAL_VALUE, hd_elems, fday,
        -: 2397:				     count);
        -: 2398:		  }
        -: 2399:	    }
        -: 2400:	}
        -: 2401:    }
    #####: 2402:}
        -: 2403:
        -: 2404:
        -: 2405:
        -: 2406:void
function christian_hdy called 0 returned 0% blocks executed 0%
    #####: 2407:christian_hdy (init_data, detected, easter, year, hd_elems, fday, count)
        -: 2408:     Bool *init_data;
        -: 2409:     const Bool detected;
        -: 2410:     int easter;
        -: 2411:     const int year;
        -: 2412:     int *hd_elems;
        -: 2413:     const int fday;
        -: 2414:     const int count;
        -: 2415:/*!
        -: 2416:   Manages all Christian Western churches calendar based holidays.
        -: 2417:*/
        -: 2418:{
        -: 2419:  register int day;
        -: 2420:  register int month;
        -: 2421:
        -: 2422:
    #####: 2423:  ptr_cc_id = _("Chr");
    #####: 2424:  holiday (*init_data, detected, _(hd_text[HD_1ST_SUNDAY_IN_LENT].ht_text),
call    0 never executed
        -: 2425:	   ptr_cc_id, DIS_HLS_PREF, easter - 42, 0, year, hd_elems, fday,
        -: 2426:	   count);
    #####: 2427:  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2428:    *init_data = FALSE;
    #####: 2429:  holiday (*init_data, detected, _(hd_text[HD_2ND_SUNDAY_IN_LENT].ht_text),
call    0 never executed
        -: 2430:	   ptr_cc_id, DIS_HLS_PREF, easter - 35, 0, year, hd_elems, fday,
        -: 2431:	   count);
    #####: 2432:  holiday (*init_data, detected, _(hd_text[HD_3RD_SUNDAY_IN_LENT].ht_text),
call    0 never executed
        -: 2433:	   ptr_cc_id, DIS_HLS_PREF, easter - 28, 0, year, hd_elems, fday,
        -: 2434:	   count);
    #####: 2435:  holiday (*init_data, detected, _(hd_text[HD_4TH_SUNDAY_IN_LENT].ht_text),
call    0 never executed
        -: 2436:	   ptr_cc_id, DIS_HLS_PREF, easter - 21, 0, year, hd_elems, fday,
        -: 2437:	   count);
    #####: 2438:  day = eval_holiday (24, MONTH_MAX, year, DAY_MAX, FALSE);
call    0 never executed
    #####: 2439:  holiday (*init_data, detected, _(hd_text[HD_4TH_ADVENT].ht_text),
call    0 never executed
        -: 2440:	   ptr_cc_id, DIS_HLS_PREF, day, MONTH_MAX, year, hd_elems, fday,
        -: 2441:	   count);
    #####: 2442:  day -= DAY_MAX;
    #####: 2443:  holiday (*init_data, detected, _(hd_text[HD_3RD_ADVENT].ht_text),
call    0 never executed
        -: 2444:	   ptr_cc_id, DIS_HLS_PREF, day, MONTH_MAX, year, hd_elems, fday,
        -: 2445:	   count);
    #####: 2446:  day -= DAY_MAX;
    #####: 2447:  holiday (*init_data, detected, _(hd_text[HD_2ND_ADVENT].ht_text),
call    0 never executed
        -: 2448:	   ptr_cc_id, DIS_HLS_PREF, day, MONTH_MAX, year, hd_elems, fday,
        -: 2449:	   count);
    #####: 2450:  day -= DAY_MAX;
    #####: 2451:  if (day > 0)
branch  0 never executed
branch  1 never executed
    #####: 2452:    month = MONTH_MAX;
        -: 2453:  else
        -: 2454:    {
    #####: 2455:      day = dvec[11 - 1] + day;
    #####: 2456:      month = 11;
        -: 2457:    }
    #####: 2458:  holiday (*init_data, detected, _(hd_text[HD_1ST_ADVENT].ht_text),
call    0 never executed
        -: 2459:	   ptr_cc_id, DIS_HLS_PREF, day, month, year, hd_elems, fday, count);
    #####: 2460:  holiday (*init_data, detected, _(hd_text[HD_ALL_SAINTS_DAY].ht_text),
call    0 never executed
        -: 2461:	   ptr_cc_id, DIS_HLS_PREF, DAY_MIN, 11, year, hd_elems, fday, count);
    #####: 2462:  holiday (*init_data, detected, _(hd_text[HD_ALL_SOULS_DAY].ht_text),
call    0 never executed
        -: 2463:	   ptr_cc_id, DIS_HLS_PREF, 2, 11, year, hd_elems, fday, count);
    #####: 2464:  holiday (*init_data, detected, _(hd_text[HD_ASH_WEDNESDAY].ht_text),
call    0 never executed
        -: 2465:	   ptr_cc_id, DIS_HLS_PREF, easter - 46, 0, year, hd_elems, fday,
        -: 2466:	   count);
    #####: 2467:  holiday (*init_data, detected, _(hd_text[HD_ST_BARTHOLOMEW_DAY].ht_text),
call    0 never executed
        -: 2468:	   ptr_cc_id, DIS_HLS_PREF, 24, 8, year, hd_elems, fday, count);
    #####: 2469:  holiday (*init_data, detected, _(hd_text[HD_BOXING_DAY].ht_text), ptr_cc_id,
call    0 never executed
        -: 2470:	   DIS_HLS_PREF, 26, MONTH_MAX, year, hd_elems, fday, count);
    #####: 2471:  holiday (*init_data, detected, _(hd_text[HD_CHRISTMAS_DAY].ht_text),
call    0 never executed
        -: 2472:	   ptr_cc_id, DIS_HLS_PREF, 25, MONTH_MAX, year, hd_elems, fday,
        -: 2473:	   count);
    #####: 2474:  holiday (*init_data, detected, _(hd_text[HD_CHRISTMAS_EVE].ht_text),
call    0 never executed
        -: 2475:	   ptr_cc_id, DIS_HLS_PREF, 24, MONTH_MAX, year, hd_elems, fday,
        -: 2476:	   count);
    #####: 2477:  holiday (*init_data, detected, _(hd_text[HD_CHRISTS_ASCENSION_DAY].ht_text),
call    0 never executed
        -: 2478:	   ptr_cc_id, DIS_HLS_PREF, easter + 39, 0, year, hd_elems, fday,
        -: 2479:	   count);
    #####: 2480:  holiday (*init_data, detected, _(hd_text[HD_EASTER_MONDAY].ht_text),
call    0 never executed
        -: 2481:	   ptr_cc_id, DIS_HLS_PREF, easter + 1, 0, year, hd_elems, fday,
        -: 2482:	   count);
    #####: 2483:  holiday (*init_data, detected, _(hd_text[HD_EASTER_SUNDAY].ht_text),
call    0 never executed
        -: 2484:	   ptr_cc_id, DIS_HLS_PREF, easter, 0, year, hd_elems, fday, count);
    #####: 2485:  holiday (*init_data, detected,
call    0 never executed
    #####: 2486:	   _(hd_text[HD_FEAST_OF_CORPUS_CHRISTI].ht_text), ptr_cc_id,
        -: 2487:	   DIS_HLS_PREF, easter + 60, 0, year, hd_elems, fday, count);
    #####: 2488:  holiday (*init_data, detected, _(hd_text[HD_FEAST_OF_HEART_JESUS].ht_text),
call    0 never executed
        -: 2489:	   ptr_cc_id, DIS_HLS_PREF, easter + 68, 0, year, hd_elems, fday,
        -: 2490:	   count);
    #####: 2491:  holiday (*init_data, detected, _(hd_text[HD_GOOD_FRIDAY].ht_text),
call    0 never executed
        -: 2492:	   ptr_cc_id, DIS_HLS_PREF, easter - 2, 0, year, hd_elems, fday,
        -: 2493:	   count);
    #####: 2494:  holiday (*init_data, detected, _(hd_text[HD_GOOD_SATURDAY].ht_text),
call    0 never executed
        -: 2495:	   ptr_cc_id, DIS_HLS_PREF, easter - 1, 0, year, hd_elems, fday,
        -: 2496:	   count);
    #####: 2497:  holiday (*init_data, detected, _(hd_text[HD_MARTINIMAS].ht_text), ptr_cc_id,
call    0 never executed
        -: 2498:	   DIS_HLS_PREF, 11, 11, year, hd_elems, fday, count);
    #####: 2499:  holiday (*init_data, detected,
call    0 never executed
    #####: 2500:	   _(hd_text[HD_MARYS_ANNUNCIATION_DAY].ht_text), ptr_cc_id,
        -: 2501:	   DIS_HLS_PREF, 25, 3, year, hd_elems, fday, count);
    #####: 2502:  holiday (*init_data, detected, _(hd_text[HD_MARYS_ASCENSION_DAY].ht_text),
call    0 never executed
        -: 2503:	   ptr_cc_id, DIS_HLS_PREF, 15, 8, year, hd_elems, fday, count);
    #####: 2504:  holiday (*init_data, detected, _(hd_text[HD_MARY_BLESSED_VIRGIN].ht_text),
call    0 never executed
        -: 2505:	   ptr_cc_id, DIS_HLS_PREF, DAY_MIN, MONTH_MIN, year, hd_elems, fday,
        -: 2506:	   count);
    #####: 2507:  holiday (*init_data, detected, _(hd_text[HD_MARYS_CANDLEMAS].ht_text),
call    0 never executed
        -: 2508:	   ptr_cc_id, DIS_HLS_PREF, 2, 2, year, hd_elems, fday, count);
    #####: 2509:  holiday (*init_data, detected, _(hd_text[HD_MARYS_EXPECTATION].ht_text),
call    0 never executed
        -: 2510:	   ptr_cc_id, DIS_HLS_PREF, 18, MONTH_MAX, year, hd_elems, fday,
        -: 2511:	   count);
    #####: 2512:  holiday (*init_data, detected,
call    0 never executed
    #####: 2513:	   _(hd_text[HD_MARYS_IMMACULATE_CONCEPTION].ht_text), ptr_cc_id,
        -: 2514:	   DIS_HLS_PREF, 8, MONTH_MAX, year, hd_elems, fday, count);
    #####: 2515:  holiday (*init_data, detected, _(hd_text[HD_MARYS_NATIVITY].ht_text),
call    0 never executed
        -: 2516:	   ptr_cc_id, DIS_HLS_PREF, 8, 9, year, hd_elems, fday, count);
    #####: 2517:  holiday (*init_data, detected, _(hd_text[HD_MARYS_NAME].ht_text), ptr_cc_id,
call    0 never executed
        -: 2518:	   DIS_HLS_PREF, 12, 9, year, hd_elems, fday, count);
    #####: 2519:  holiday (*init_data, detected, _(hd_text[HD_MARYS_MATERNITY].ht_text),
call    0 never executed
        -: 2520:	   ptr_cc_id, DIS_HLS_PREF, 11, 10, year, hd_elems, fday, count);
    #####: 2521:  holiday (*init_data, detected, _(hd_text[HD_MARYS_SACRIFICE].ht_text),
call    0 never executed
        -: 2522:	   ptr_cc_id, DIS_HLS_PREF, 21, 11, year, hd_elems, fday, count);
    #####: 2523:  holiday (*init_data, detected, _(hd_text[HD_MARYS_VISITATION].ht_text),
call    0 never executed
        -: 2524:	   ptr_cc_id, DIS_HLS_PREF, 2, 7, year, hd_elems, fday, count);
    #####: 2525:  holiday (*init_data, detected, _(hd_text[HD_MIDSUMMER_DAY].ht_text),
call    0 never executed
        -: 2526:	   ptr_cc_id, DIS_HLS_PREF, 24, 6, year, hd_elems, fday, count);
    #####: 2527:  holiday (*init_data, detected, _(hd_text[HD_PALM_SUNDAY].ht_text),
call    0 never executed
        -: 2528:	   ptr_cc_id, DIS_HLS_PREF, easter - DAY_MAX, 0, year, hd_elems, fday,
        -: 2529:	   count);
    #####: 2530:  holiday (*init_data, detected, _(hd_text[HD_PASSION_SUNDAY].ht_text),
call    0 never executed
        -: 2531:	   ptr_cc_id, DIS_HLS_PREF, easter - 14, 0, year, hd_elems, fday,
        -: 2532:	   count);
    #####: 2533:  holiday (*init_data, detected, _(hd_text[HD_PENTECOST].ht_text), ptr_cc_id,
call    0 never executed
        -: 2534:	   DIS_HLS_PREF, easter + 49, 0, year, hd_elems, fday, count);
    #####: 2535:  holiday (*init_data, detected, _(hd_text[HD_QUINQUAGESIMA_SUNDAY].ht_text),
call    0 never executed
        -: 2536:	   ptr_cc_id, DIS_HLS_PREF, easter - 49, 0, year, hd_elems, fday,
        -: 2537:	   count);
    #####: 2538:  if (year > 1516)
branch  0 never executed
branch  1 never executed
    #####: 2539:    holiday (*init_data, detected, _(hd_text[HD_REFORMATION_DAY].ht_text),
call    0 never executed
        -: 2540:	     ptr_cc_id, DIS_HLS_PREF, dvec[10 - 1], 10, year, hd_elems, fday,
        -: 2541:	     count);
    #####: 2542:  holiday (*init_data, detected, _(hd_text[HD_ROGATION_SUNDAY].ht_text),
call    0 never executed
        -: 2543:	   ptr_cc_id, DIS_HLS_PREF, easter + 35, 0, year, hd_elems, fday,
        -: 2544:	   count);
    #####: 2545:  holiday (*init_data, detected, _(hd_text[HD_SEPTUAGESIMA_SUNDAY].ht_text),
call    0 never executed
        -: 2546:	   ptr_cc_id, DIS_HLS_PREF, easter - 63, 0, year, hd_elems, fday,
        -: 2547:	   count);
    #####: 2548:  holiday (*init_data, detected, _(hd_text[HD_SEXAGESIMA_SUNDAY].ht_text),
call    0 never executed
        -: 2549:	   ptr_cc_id, DIS_HLS_PREF, easter - 56, 0, year, hd_elems, fday,
        -: 2550:	   count);
    #####: 2551:  holiday (*init_data, detected, _(hd_text[HD_ST_ANDREWS_DAY].ht_text),
call    0 never executed
        -: 2552:	   ptr_cc_id, DIS_HLS_PREF, dvec[11 - 1], 11, year, hd_elems, fday,
        -: 2553:	   count);
    #####: 2554:  holiday (*init_data, detected, _(hd_text[HD_ST_JOSEPHS_DAY].ht_text),
call    0 never executed
        -: 2555:	   ptr_cc_id, DIS_HLS_PREF, 19, 3, year, hd_elems, fday, count);
    #####: 2556:  holiday (*init_data, detected, _(hd_text[HD_ST_LAURENTIUS_DAY].ht_text),
call    0 never executed
        -: 2557:	   ptr_cc_id, DIS_HLS_PREF, 10, 8, year, hd_elems, fday, count);
    #####: 2558:  holiday (*init_data, detected, _(hd_text[HD_ST_NICHOLAS_DAY].ht_text),
call    0 never executed
        -: 2559:	   ptr_cc_id, DIS_HLS_PREF, 6, MONTH_MAX, year, hd_elems, fday,
        -: 2560:	   count);
    #####: 2561:  holiday (*init_data, detected, _(hd_text[HD_ST_PETER_AND_ST_PAUL].ht_text),
call    0 never executed
        -: 2562:	   ptr_cc_id, DIS_HLS_PREF, 29, 6, year, hd_elems, fday, count);
    #####: 2563:  holiday (*init_data, detected, _(hd_text[HD_ST_VALENTINES_DAY].ht_text),
call    0 never executed
        -: 2564:	   ptr_cc_id, DIS_HLS_PREF, 14, 2, year, hd_elems, fday, count);
    #####: 2565:  holiday (*init_data, detected, _(hd_text[HD_SYLVESTER].ht_text), ptr_cc_id,
call    0 never executed
        -: 2566:	   DIS_HLS_PREF, dvec[MONTH_MAX - 1], MONTH_MAX, year, hd_elems, fday,
        -: 2567:	   count);
    #####: 2568:  holiday (*init_data, detected, _(hd_text[HD_THREE_KINGS_DAY].ht_text),
call    0 never executed
        -: 2569:	   ptr_cc_id, DIS_HLS_PREF, 6, MONTH_MIN, year, hd_elems, fday,
        -: 2570:	   count);
    #####: 2571:  holiday (*init_data, detected, _(hd_text[HD_HOLY_TRINITY].ht_text),
call    0 never executed
        -: 2572:	   ptr_cc_id, DIS_HLS_PREF, easter + 56, 0, year, hd_elems, fday,
        -: 2573:	   count);
    #####: 2574:  holiday (*init_data, detected, _(hd_text[HD_WHIT_MONDAY].ht_text),
call    0 never executed
        -: 2575:	   ptr_cc_id, DIS_HLS_PREF, easter + 50, 0, year, hd_elems, fday,
        -: 2576:	   count);
    #####: 2577:}
        -: 2578:
        -: 2579:
        -: 2580:
        -: 2581:void
function coptic_mth called 0 returned 0% blocks executed 0%
    #####: 2582:coptic_mth (init_data, detected, year, hd_elems, fday, count, do_coptic)
        -: 2583:     Bool *init_data;
        -: 2584:     const Bool detected;
        -: 2585:     const int year;
        -: 2586:     int *hd_elems;
        -: 2587:     const int fday;
        -: 2588:     const int count;
        -: 2589:     const Bool do_coptic;
        -: 2590:/*!
        -: 2591:   Manages all Coptic/Ethiopic calendar based months
        -: 2592:     since AD 284 (Coptic) respectively AD 7 (Ethiopic).
        -: 2593:*/
        -: 2594:{
    #####: 2595:  if (!do_coptic || (do_coptic && (year > 283)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2596:    {
        -: 2597:      auto Ulint cdate;
        -: 2598:      register int i;
        -: 2599:      register int n;
        -: 2600:      auto int d;
        -: 2601:      auto int m;
        -: 2602:      auto int y;
        -: 2603:
        -: 2604:
    #####: 2605:      if (do_coptic)
branch  0 never executed
branch  1 never executed
    #####: 2606:	ptr_cc_id = "EG";
        -: 2607:      else
    #####: 2608:	ptr_cc_id = "ET";
    #####: 2609:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 2610:	if (!do_coptic || (do_coptic && (n > 283)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 2611:	  {
    #####: 2612:	    cdate = date2num (29, 8, n)
call    0 never executed
    #####: 2613:	      + ((n & 3) == 3) + julian_gregorian_diff (29, 8, n);
call    0 never executed
        -: 2614:	    /*
        -: 2615:	       And manage all Coptic/Ethiopic calendar months.
        -: 2616:	     */
    #####: 2617:	    for (i = 0; i <= MONTH_MAX; i++)
branch  0 never executed
branch  1 never executed
        -: 2618:	      {
    #####: 2619:		num2date (cdate, &d, &m, &y);
call    0 never executed
    #####: 2620:		if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2621:		  ocs_monthtext (init_data, detected, ptr_cc_id, d, m, year,
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
        -: 2622:				 (i == MONTH_MAX),
        -: 2623:				 (i == MONTH_MAX) ? i : i + 1,
        -: 2624:				 (do_coptic) ? n - 283 : n - 7, SPECIAL_VALUE,
        -: 2625:				 hd_elems, fday, count);
    #####: 2626:		cdate += 30;
        -: 2627:	      }
        -: 2628:	  }
        -: 2629:    }
    #####: 2630:}
        -: 2631:
        -: 2632:
        -: 2633:
        -: 2634:void
function french_revolutionary_mth called 0 returned 0% blocks executed 0%
    #####: 2635:french_revolutionary_mth (init_data, detected, year, hd_elems, fday, count)
        -: 2636:     Bool *init_data;
        -: 2637:     const Bool detected;
        -: 2638:     const int year;
        -: 2639:     int *hd_elems;
        -: 2640:     const int fday;
        -: 2641:     const int count;
        -: 2642:/*!
        -: 2643:   Manages all French Revolutionary (Republican) calendar months
        -: 2644:     since AD 22-Sep-1792.
        -: 2645:*/
        -: 2646:{
    #####: 2647:  if (year > 1791)
branch  0 never executed
branch  1 never executed
        -: 2648:    {
        -: 2649:      auto Ulint fdate;
        -: 2650:      register int i;
        -: 2651:      register int n;
        -: 2652:      auto int d;
        -: 2653:      auto int m;
        -: 2654:      auto int y;
        -: 2655:
        -: 2656:
    #####: 2657:      ptr_cc_id = _("FRR");
    #####: 2658:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 2659:	if (n > 1791)
branch  0 never executed
branch  1 never executed
        -: 2660:	  {
    #####: 2661:	    y = n;
        -: 2662:	    /*
        -: 2663:	       Detect the French_Revolutionary_New_Year's_Day as used in the
        -: 2664:	       French Revolutionary (Republican) calendar, which is based
        -: 2665:	       on the date of the autumnal equinox as it occurs in Paris, FR.
        -: 2666:	     */
    #####: 2667:	    fdate = (Ulint) equinox_solstice (NH_AE, &d, &m, &y, 0, 9);
call    0 never executed
    #####: 2668:	    if (fdate != (Ulint) SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 2669:	      {
        -: 2670:		/*
        -: 2671:		   And manage all French Revolutionary calendar months.
        -: 2672:		 */
    #####: 2673:		for (i = 0; i <= MONTH_MAX; i++)
branch  0 never executed
branch  1 never executed
        -: 2674:		  {
    #####: 2675:		    num2date (fdate, &d, &m, &y);
call    0 never executed
    #####: 2676:		    if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2677:		      ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2678:				     year, (i == MONTH_MAX),
        -: 2679:				     (i == MONTH_MAX) ? i : i + 1, n - 1791,
        -: 2680:				     SPECIAL_VALUE, hd_elems, fday, count);
    #####: 2681:		    fdate += 30;
        -: 2682:		  }
        -: 2683:	      }
        -: 2684:	  }
        -: 2685:    }
    #####: 2686:}
        -: 2687:
        -: 2688:
        -: 2689:
        -: 2690:void
function indian_civil_mth called 0 returned 0% blocks executed 0%
    #####: 2691:indian_civil_mth (init_data, detected, year, hd_elems, fday, count)
        -: 2692:     Bool *init_data;
        -: 2693:     const Bool detected;
        -: 2694:     const int year;
        -: 2695:     int *hd_elems;
        -: 2696:     const int fday;
        -: 2697:     const int count;
        -: 2698:/*!
        -: 2699:   Manages all Indian civil-calendar (reformed calendar) months
        -: 2700:     since AD 22-Mar-1957.
        -: 2701:*/
        -: 2702:{
    #####: 2703:  if (year > 1956)
branch  0 never executed
branch  1 never executed
        -: 2704:    {
        -: 2705:      auto Ulint idate;
        -: 2706:      register int i;
        -: 2707:      register int n;
        -: 2708:      auto int d;
        -: 2709:      auto int m;
        -: 2710:      auto int y;
        -: 2711:
        -: 2712:
    #####: 2713:      ptr_cc_id = "IN";
    #####: 2714:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 2715:	if (n > 1956)
branch  0 never executed
branch  1 never executed
        -: 2716:	  {
    #####: 2717:	    d = 22 - (days_of_february (n) == 29);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2718:	    if (n <= greg->year)
branch  0 never executed
branch  1 never executed
    #####: 2719:	      d -= 13;
    #####: 2720:	    idate = date2num (d, 3, n);
call    0 never executed
        -: 2721:	    /*
        -: 2722:	       And manage all Indian civil-calendar months.
        -: 2723:	     */
    #####: 2724:	    for (i = MONTH_MIN; i <= MONTH_MAX; i++)
branch  0 never executed
branch  1 never executed
        -: 2725:	      {
    #####: 2726:		num2date (idate, &d, &m, &y);
call    0 never executed
    #####: 2727:		if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2728:		  ocs_monthtext (init_data, detected, ptr_cc_id, d, m, year,
call    0 never executed
        -: 2729:				 FALSE, i, n - 78, SPECIAL_VALUE, hd_elems,
        -: 2730:				 fday, count);
    #####: 2731:		if (i == MONTH_MIN)
branch  0 never executed
branch  1 never executed
    #####: 2732:		  idate += ((days_of_february (n) == 29) ? 31 : 30);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 2733:		else
    #####: 2734:		  idate += ((i < 7) ? 31 : 30);
branch  0 never executed
branch  1 never executed
        -: 2735:	      }
        -: 2736:	  }
        -: 2737:    }
    #####: 2738:}
        -: 2739:
        -: 2740:
        -: 2741:
        -: 2742:void
function hebrew_hdy called 0 returned 0% blocks executed 0%
    #####: 2743:hebrew_hdy (init_data, detected, year, hd_elems, fday, count, cc)
        -: 2744:     Bool *init_data;
        -: 2745:     const Bool detected;
        -: 2746:     const int year;
        -: 2747:     int *hd_elems;
        -: 2748:     const int fday;
        -: 2749:     const int count;
        -: 2750:     const char *cc;
        -: 2751:/*!
        -: 2752:   Manages all Hebrew calendar based holidays.
        -: 2753:     (Really unoptimized and dull implementation of the arithmetical
        -: 2754:     lunisolar Hebrew calendar, but it works.)
        -: 2755:*/
        -: 2756:{
        -: 2757:  auto Ulint ddiff;
        -: 2758:  auto Ulint hdate;
        -: 2759:  register int cc_mode;
        -: 2760:  register int doy;
        -: 2761:  register int hm;
        -: 2762:  register int i;
        -: 2763:  register int n;
        -: 2764:  auto int d;
        -: 2765:  auto int m;
        -: 2766:  auto int y;
        -: 2767:
        -: 2768:
    #####: 2769:  if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 2770:    cc_mode = 0;
    #####: 2771:  else if (!strcmp (cc, "IL"))
branch  0 never executed
branch  1 never executed
    #####: 2772:    cc_mode = 1;
    #####: 2773:  else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 2774:    cc_mode = SPECIAL_VALUE;
        -: 2775:  else
    #####: 2776:    abort ();			/* Error, invalid case! */
call    0 never executed
    #####: 2777:  if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 2778:    ptr_cc_id = _("Heb");
        -: 2779:  /*
        -: 2780:     Manage those holidays first, which either cannot exceed the year bounds
        -: 2781:     of a Julian/Gregorian calendar year, or do not depend on the length of
        -: 2782:     the Hebrew calendar year.
        -: 2783:   */
    #####: 2784:  doy = tishri_1 (year) - 1;
call    0 never executed
        -: 2785:  /*
        -: 2786:     Calculate the year number used in the Hebrew calendar.
        -: 2787:   */
    #####: 2788:  d = doy + 1;
    #####: 2789:  sprintf (s2, "%s %d", _(hd_text[HD_HEB_ROSH_HASHANA].ht_text), year + 3761);
    #####: 2790:  holiday (*init_data, detected, s2, ptr_cc_id,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2791:	   (cc_mode > 0) ? "+" : DIS_HLS_PREF, d, 0, year, hd_elems, fday,
        -: 2792:	   count);
    #####: 2793:  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 2794:    *init_data = FALSE;
    #####: 2795:  if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 2796:    {
    #####: 2797:      holiday (*init_data, detected, _(hd_text[HD_HEB_ROSH_HASHANA].ht_text),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2798:	       ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d + 1, 0, year,
        -: 2799:	       hd_elems, fday, count);
    #####: 2800:      (void) doy2date (doy - 143, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2801:      i = weekday_of_date (d, m, year);
call    0 never executed
    #####: 2802:      if (i == 4)
branch  0 never executed
branch  1 never executed
    #####: 2803:	(void) doy2date (doy - 144, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2804:      else if (i == 5)
branch  0 never executed
branch  1 never executed
    #####: 2805:	(void) doy2date (doy - 145, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2806:      holiday (*init_data, detected, _(hd_text[HD_HEB_YOM_HAZIKARON].ht_text),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2807:	       ptr_cc_id, (cc_mode) ? "#" : DIS_HLS_PREF, d, m, year,
        -: 2808:	       hd_elems, fday, count);
    #####: 2809:      d = doy - 162;
    #####: 2810:      if (!cc_mode)
branch  0 never executed
branch  1 never executed
    #####: 2811:	for (i = 0; i < 7; i++)
branch  0 never executed
branch  1 never executed
    #####: 2812:	  holiday (*init_data, detected, _(hd_text[HD_HEB_PESACH].ht_text),
call    0 never executed
        -: 2813:		   ptr_cc_id, DIS_HLS_PREF, d + i, 0, year, hd_elems, fday,
        -: 2814:		   count);
        -: 2815:      else
        -: 2816:	{
    #####: 2817:	  holiday (*init_data, detected, _(hd_text[HD_HEB_PESACH].ht_text),
call    0 never executed
        -: 2818:		   ptr_cc_id, "+", d, 0, year, hd_elems, fday, count);
    #####: 2819:	  holiday (*init_data, detected, _(hd_text[HD_HEB_PESACH].ht_text),
call    0 never executed
        -: 2820:		   ptr_cc_id, "+", d + 6, 0, year, hd_elems, fday, count);
        -: 2821:	}
    #####: 2822:      if (year > 1942)
branch  0 never executed
branch  1 never executed
        -: 2823:	{
    #####: 2824:	  (void) doy2date (doy - 150, (days_of_february (year) == 29), &d,
call    0 never executed
call    1 never executed
        -: 2825:			   &m);
    #####: 2826:	  if (weekday_of_date (d, m, year) == 5)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2827:	    (void) doy2date (doy - 151, (days_of_february (year) == 29), &d,
call    0 never executed
call    1 never executed
        -: 2828:			     &m);
    #####: 2829:	  holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2830:		   _(hd_text[HD_HEB_YOM_HASHOAH].ht_text), ptr_cc_id,
        -: 2831:		   (cc_mode) ? "#" : DIS_HLS_PREF, d, m, year, hd_elems, fday,
        -: 2832:		   count);
        -: 2833:	}
    #####: 2834:      (void) doy2date (doy - 142, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2835:      i = weekday_of_date (d, m, year);
call    0 never executed
    #####: 2836:      if (i == 5)
branch  0 never executed
branch  1 never executed
    #####: 2837:	(void) doy2date (doy - 143, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2838:      else if (i == 6)
branch  0 never executed
branch  1 never executed
    #####: 2839:	(void) doy2date (doy - 144, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2840:      if (year > 1947)
branch  0 never executed
branch  1 never executed
    #####: 2841:	holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 2842:		 _(hd_text[HD_HEB_YOM_HA_AZMAUT].ht_text), ptr_cc_id,
        -: 2843:		 (cc_mode) ? "+" : DIS_HLS_PREF, d, m, year, hd_elems, fday,
        -: 2844:		 count);
    #####: 2845:      holiday (*init_data, detected, _(hd_text[HD_HEB_LAG_BOMER].ht_text),
call    0 never executed
        -: 2846:	       ptr_cc_id, DIS_HLS_PREF, doy - 129, 0, year, hd_elems, fday,
        -: 2847:	       count);
    #####: 2848:      if (year > 1966)
branch  0 never executed
branch  1 never executed
    #####: 2849:	holiday (*init_data, detected,
call    0 never executed
    #####: 2850:		 _(hd_text[HD_HEB_YOM_YERUSHALAYIM].ht_text), ptr_cc_id,
        -: 2851:		 DIS_HLS_PREF, doy - 119, 0, year, hd_elems, fday, count);
    #####: 2852:      holiday (*init_data, detected, _(hd_text[HD_HEB_SHAVUOT].ht_text),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2853:	       ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, doy - 112, 0, year,
        -: 2854:	       hd_elems, fday, count);
    #####: 2855:      (void) doy2date (doy - 50, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2856:      if (weekday_of_date (d, m, year) == 6)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 2857:	(void) doy2date (doy - 49, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2858:      holiday (*init_data, detected, _(hd_text[HD_HEB_TISHA_BAV].ht_text),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2859:	       ptr_cc_id, (cc_mode) ? "#" : DIS_HLS_PREF, d, m, year,
        -: 2860:	       hd_elems, fday, count);
    #####: 2861:      holiday (*init_data, detected, _(hd_text[HD_HEB_YOM_KIPPUR].ht_text),
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 2862:	       ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, doy + 10, 0, year,
        -: 2863:	       hd_elems, fday, count);
    #####: 2864:      d = doy + 15;
    #####: 2865:      if (!cc_mode)
branch  0 never executed
branch  1 never executed
    #####: 2866:	for (i = 0; i < 7; i++)
branch  0 never executed
branch  1 never executed
    #####: 2867:	  holiday (*init_data, detected, _(hd_text[HD_HEB_SUKKOT].ht_text),
call    0 never executed
        -: 2868:		   ptr_cc_id, DIS_HLS_PREF, d + i, 0, year, hd_elems, fday,
        -: 2869:		   count);
        -: 2870:      else
        -: 2871:	{
    #####: 2872:	  holiday (*init_data, detected, _(hd_text[HD_HEB_SUKKOT].ht_text),
call    0 never executed
        -: 2873:		   ptr_cc_id, "+", d, 0, year, hd_elems, fday, count);
    #####: 2874:	  holiday (*init_data, detected, _(hd_text[HD_HEB_SUKKOT].ht_text),
call    0 never executed
        -: 2875:		   ptr_cc_id, "+", d + 6, 0, year, hd_elems, fday, count);
        -: 2876:	}
    #####: 2877:      holiday (*init_data, detected, _(hd_text[HD_HEB_SIMCHAT_TORAH].ht_text),
call    0 never executed
        -: 2878:	       ptr_cc_id, DIS_HLS_PREF, doy + 22, 0, year, hd_elems, fday,
        -: 2879:	       count);
        -: 2880:      /*
        -: 2881:         Manage those holidays last, which can either exceed the year
        -: 2882:         bounds of a Julian/Gregorian calendar year, or depend on
        -: 2883:         the length of the Hebrew calendar year.
        -: 2884:       */
    #####: 2885:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
        -: 2886:	{
        -: 2887:	  /*
        -: 2888:	     Detect the length of the Hebrew calendar year.
        -: 2889:	   */
    #####: 2890:	  (void) doy2date (tishri_1 (n + 1), (days_of_february (n + 1) == 29),
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2891:			   &d, &m);
    #####: 2892:	  ddiff = date2num (d, m, n + 1);
call    0 never executed
    #####: 2893:	  doy = tishri_1 (n) - 1;
call    0 never executed
    #####: 2894:	  (void) doy2date (doy + 1, (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 2895:	  hdate = date2num (d, m, n);
call    0 never executed
    #####: 2896:	  ddiff -= hdate--;
        -: 2897:	  /*
        -: 2898:	     Calculate the selector for the proper number of past days of month.
        -: 2899:	   */
    #####: 2900:	  if (ddiff < 383)
branch  0 never executed
branch  1 never executed
    #####: 2901:	    hm = (int) ddiff - 353;
        -: 2902:	  else
    #####: 2903:	    hm = (int) ddiff - 380;
        -: 2904:	  /*
        -: 2905:	     And manage all ``critical'' holidays.
        -: 2906:	   */
    #####: 2907:	  for (i = 0; i < 8; i++)
branch  0 never executed
branch  1 never executed
        -: 2908:	    {
    #####: 2909:	      num2date (hdate + hmvec[hm][3 - 1] + 25 + i, &d, &m, &y);
call    0 never executed
    #####: 2910:	      if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2911:		holiday (*init_data, detected,
call    0 never executed
    #####: 2912:			 _(hd_text[HD_HEB_HANNUKAH].ht_text), ptr_cc_id,
        -: 2913:			 DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
        -: 2914:	    }
    #####: 2915:	  num2date (hdate + hmvec[hm][5 - 1] + 15, &d, &m, &y);
call    0 never executed
    #####: 2916:	  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2917:	    holiday (*init_data, detected,
call    0 never executed
    #####: 2918:		     _(hd_text[HD_HEB_TU_BSHEVAT].ht_text), ptr_cc_id,
        -: 2919:		     DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
    #####: 2920:	  num2date (hdate + hmvec[hm][7 - 1] + 14, &d, &m, &y);
call    0 never executed
    #####: 2921:	  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2922:	    holiday (*init_data, detected, _(hd_text[HD_HEB_PURIM].ht_text),
call    0 never executed
        -: 2923:		     ptr_cc_id, DIS_HLS_PREF, d, m, year, hd_elems, fday,
        -: 2924:		     count);
    #####: 2925:	  num2date (hdate + hmvec[hm][7 - 1] + 15, &d, &m, &y);
call    0 never executed
    #####: 2926:	  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 2927:	    holiday (*init_data, detected,
call    0 never executed
    #####: 2928:		     _(hd_text[HD_HEB_SHUSHAN_PURIM].ht_text), ptr_cc_id,
        -: 2929:		     DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
        -: 2930:	}
        -: 2931:    }
    #####: 2932:}
        -: 2933:
        -: 2934:
        -: 2935:
        -: 2936:void
function hebrew_mth called 0 returned 0% blocks executed 0%
    #####: 2937:hebrew_mth (init_data, detected, year, hd_elems, fday, count)
        -: 2938:     Bool *init_data;
        -: 2939:     const Bool detected;
        -: 2940:     const int year;
        -: 2941:     int *hd_elems;
        -: 2942:     const int fday;
        -: 2943:     const int count;
        -: 2944:/*!
        -: 2945:   Manages all Hebrew calendar based months.
        -: 2946:     (Really unoptimized and dull implementation of the arithmetical
        -: 2947:     lunisolar Hebrew calendar, but it works.)
        -: 2948:*/
        -: 2949:{
        -: 2950:  auto Ulint ddiff;
        -: 2951:  auto Ulint hdate;
        -: 2952:  register int hms;
        -: 2953:  register int hm;
        -: 2954:  register int i;
        -: 2955:  register int n;
        -: 2956:  auto int d;
        -: 2957:  auto int m;
        -: 2958:  auto int y;
        -: 2959:
    #####: 2960:  ptr_cc_id = _("Heb");
    #####: 2961:  for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
        -: 2962:    {
        -: 2963:      /*
        -: 2964:         Detect the length of the Hebrew calendar year.
        -: 2965:       */
    #####: 2966:      (void) doy2date (tishri_1 (n + 1), (days_of_february (n + 1) == 29), &d,
call    0 never executed
call    1 never executed
call    2 never executed
        -: 2967:		       &m);
    #####: 2968:      ddiff = date2num (d, m, n + 1);
call    0 never executed
    #####: 2969:      (void) doy2date (tishri_1 (n), (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
call    2 never executed
    #####: 2970:      hdate = date2num (d, m, n);
call    0 never executed
    #####: 2971:      ddiff -= hdate;
        -: 2972:      /*
        -: 2973:         Calculate the selector for the proper number of past days of month.
        -: 2974:       */
    #####: 2975:      if (ddiff < 383)
branch  0 never executed
branch  1 never executed
    #####: 2976:	hms = (int) ddiff - 353;
        -: 2977:      else
    #####: 2978:	hms = (int) ddiff - 380;
        -: 2979:      /*
        -: 2980:         And manage all Hebrew calendar months.
        -: 2981:       */
    #####: 2982:      for (hm = MONTH_MIN, i = 0; i <= MONTH_MAX; hm++, i++)
branch  0 never executed
branch  1 never executed
        -: 2983:	{
    #####: 2984:	  num2date (hdate + hmvec[hms][i], &d, &m, &y);
call    0 never executed
    #####: 2985:	  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 2986:	    {
    #####: 2987:	      if (i == 6)
branch  0 never executed
branch  1 never executed
        -: 2988:		{
    #####: 2989:		  hm--;
    #####: 2990:		  if (hmvec[hms][i] != hmvec[hms][i - 1])
branch  0 never executed
branch  1 never executed
    #####: 2991:		    ocs_monthtext (init_data, detected, ptr_cc_id, d, m, year,
call    0 never executed
    #####: 2992:				   TRUE, ((hm + 5) % MONTH_MAX) + 1, n + 3761,
        -: 2993:				   SPECIAL_VALUE, hd_elems, fday, count);
        -: 2994:		}
        -: 2995:	      else
    #####: 2996:		ocs_monthtext (init_data, detected, ptr_cc_id, d, m, year,
call    0 never executed
    #####: 2997:			       FALSE, ((hm + 5) % MONTH_MAX) + 1, n + 3761,
        -: 2998:			       SPECIAL_VALUE, hd_elems, fday, count);
        -: 2999:	    }
        -: 3000:	}
        -: 3001:    }
    #####: 3002:}
        -: 3003:
        -: 3004:
        -: 3005:
        -: 3006:void
function islamic_hdy called 0 returned 0% blocks executed 0%
    #####: 3007:islamic_hdy (init_data, detected, year, hd_elems, fday, count, cc)
        -: 3008:     Bool *init_data;
        -: 3009:     const Bool detected;
        -: 3010:     const int year;
        -: 3011:     int *hd_elems;
        -: 3012:     const int fday;
        -: 3013:     const int count;
        -: 3014:     const char *cc;
        -: 3015:/*!
        -: 3016:   Manages all Islamic civil-calendar based holidays since AD 622.
        -: 3017:     Note that this function uses the arithmetical lunar Islamic ***CIVIL***
        -: 3018:     calendar.  This kind of calendar is just a rough estimate of the
        -: 3019:     religious Islamic lunar calendar, which is calculated astronomically.
        -: 3020:     So don't be surprised if some holiday dates differ from the religious
        -: 3021:     Islamic calendar about +/-1...2 days in some years.
        -: 3022:*/
        -: 3023:{
    #####: 3024:  if (year > 621)
branch  0 never executed
branch  1 never executed
        -: 3025:    {
        -: 3026:      auto Ulint idate;
    #####: 3027:      register int cc_mode = YEAR_MAX;
        -: 3028:      register int i;
        -: 3029:      register int j;
        -: 3030:      register int n;
        -: 3031:      register int doy;
        -: 3032:      auto int doy2;
        -: 3033:      auto int d;
        -: 3034:      auto int m;
        -: 3035:      auto int y;
        -: 3036:      auto char *hdy_prefix;
    #####: 3037:      auto Bool check_twice = FALSE;
        -: 3038:
        -: 3039:
    #####: 3040:      if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 3041:	cc_mode = 0;
        -: 3042:      else
        -: 3043:	{
    #####: 3044:	  if (!strcmp (cc, "AE"))
branch  0 never executed
branch  1 never executed
    #####: 3045:	    cc_mode = 1;
    #####: 3046:	  if (!strcmp (cc, "AF"))
branch  0 never executed
branch  1 never executed
    #####: 3047:	    cc_mode = 2;
    #####: 3048:	  if (!strcmp (cc, "AL"))
branch  0 never executed
branch  1 never executed
    #####: 3049:	    cc_mode = 3;
    #####: 3050:	  if (!strcmp (cc, "AZ"))
branch  0 never executed
branch  1 never executed
    #####: 3051:	    cc_mode = 4;
    #####: 3052:	  if (!strcmp (cc, "BA"))
branch  0 never executed
branch  1 never executed
    #####: 3053:	    cc_mode = 5;
    #####: 3054:	  if (!strcmp (cc, "BD"))
branch  0 never executed
branch  1 never executed
    #####: 3055:	    cc_mode = 6;
    #####: 3056:	  if (!strcmp (cc, "BF"))
branch  0 never executed
branch  1 never executed
    #####: 3057:	    cc_mode = 7;
    #####: 3058:	  if (!strcmp (cc, "BH"))
branch  0 never executed
branch  1 never executed
    #####: 3059:	    cc_mode = 8;
    #####: 3060:	  if (!strcmp (cc, "BJ"))
branch  0 never executed
branch  1 never executed
    #####: 3061:	    cc_mode = 9;
    #####: 3062:	  if (!strcmp (cc, "BN"))
branch  0 never executed
branch  1 never executed
    #####: 3063:	    cc_mode = 10;
    #####: 3064:	  if (!strcmp (cc, "CI"))
branch  0 never executed
branch  1 never executed
    #####: 3065:	    cc_mode = 11;
    #####: 3066:	  if (!strcmp (cc, "CM"))
branch  0 never executed
branch  1 never executed
    #####: 3067:	    cc_mode = 12;
    #####: 3068:	  if (!strcmp (cc, "DJ"))
branch  0 never executed
branch  1 never executed
    #####: 3069:	    cc_mode = 13;
    #####: 3070:	  if (!strcmp (cc, "DZ"))
branch  0 never executed
branch  1 never executed
    #####: 3071:	    cc_mode = 14;
    #####: 3072:	  if (!strcmp (cc, "EG"))
branch  0 never executed
branch  1 never executed
    #####: 3073:	    cc_mode = 15;
    #####: 3074:	  if (!strcmp (cc, "ER"))
branch  0 never executed
branch  1 never executed
    #####: 3075:	    cc_mode = 16;
    #####: 3076:	  if (!strcmp (cc, "ET"))
branch  0 never executed
branch  1 never executed
    #####: 3077:	    cc_mode = 17;
    #####: 3078:	  if (!strcmp (cc, "FJ"))
branch  0 never executed
branch  1 never executed
    #####: 3079:	    cc_mode = 18;
    #####: 3080:	  if (!strcmp (cc, "GE"))
branch  0 never executed
branch  1 never executed
    #####: 3081:	    cc_mode = 19;
    #####: 3082:	  if (!strcmp (cc, "GH"))
branch  0 never executed
branch  1 never executed
    #####: 3083:	    cc_mode = 20;
    #####: 3084:	  if (!strcmp (cc, "GM"))
branch  0 never executed
branch  1 never executed
    #####: 3085:	    cc_mode = 21;
    #####: 3086:	  if (!strcmp (cc, "GN"))
branch  0 never executed
branch  1 never executed
    #####: 3087:	    cc_mode = 22;
    #####: 3088:	  if (!strcmp (cc, "GW"))
branch  0 never executed
branch  1 never executed
    #####: 3089:	    cc_mode = 23;
    #####: 3090:	  if (!strcmp (cc, "GY"))
branch  0 never executed
branch  1 never executed
    #####: 3091:	    cc_mode = 24;
    #####: 3092:	  if (!strcmp (cc, "ID"))
branch  0 never executed
branch  1 never executed
    #####: 3093:	    cc_mode = 25;
    #####: 3094:	  if (!strcmp (cc, "IN"))
branch  0 never executed
branch  1 never executed
    #####: 3095:	    cc_mode = 26;
    #####: 3096:	  if (!strcmp (cc, "IQ"))
branch  0 never executed
branch  1 never executed
    #####: 3097:	    cc_mode = 27;
    #####: 3098:	  if (!strcmp (cc, "IR"))
branch  0 never executed
branch  1 never executed
    #####: 3099:	    cc_mode = 28;
    #####: 3100:	  if (!strcmp (cc, "JO"))
branch  0 never executed
branch  1 never executed
    #####: 3101:	    cc_mode = 29;
    #####: 3102:	  if (!strcmp (cc, "KE"))
branch  0 never executed
branch  1 never executed
    #####: 3103:	    cc_mode = 30;
    #####: 3104:	  if (!strcmp (cc, "KG"))
branch  0 never executed
branch  1 never executed
    #####: 3105:	    cc_mode = 31;
    #####: 3106:	  if (!strcmp (cc, "KM"))
branch  0 never executed
branch  1 never executed
    #####: 3107:	    cc_mode = 32;
    #####: 3108:	  if (!strcmp (cc, "KW"))
branch  0 never executed
branch  1 never executed
    #####: 3109:	    cc_mode = 33;
    #####: 3110:	  if (!strcmp (cc, "KZ"))
branch  0 never executed
branch  1 never executed
    #####: 3111:	    cc_mode = 34;
    #####: 3112:	  if (!strcmp (cc, "LB"))
branch  0 never executed
branch  1 never executed
    #####: 3113:	    cc_mode = 35;
    #####: 3114:	  if (!strcmp (cc, "LK"))
branch  0 never executed
branch  1 never executed
    #####: 3115:	    cc_mode = 36;
    #####: 3116:	  if (!strcmp (cc, "LY"))
branch  0 never executed
branch  1 never executed
    #####: 3117:	    cc_mode = 37;
    #####: 3118:	  if (!strcmp (cc, "MA") || !strcmp (cc, "EH"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3119:	    cc_mode = 38;
    #####: 3120:	  if (!strcmp (cc, "MK"))
branch  0 never executed
branch  1 never executed
    #####: 3121:	    cc_mode = 39;
    #####: 3122:	  if (!strcmp (cc, "ML"))
branch  0 never executed
branch  1 never executed
    #####: 3123:	    cc_mode = 40;
    #####: 3124:	  if (!strcmp (cc, "MR"))
branch  0 never executed
branch  1 never executed
    #####: 3125:	    cc_mode = 41;
    #####: 3126:	  if (!strcmp (cc, "MU"))
branch  0 never executed
branch  1 never executed
    #####: 3127:	    cc_mode = 42;
    #####: 3128:	  if (!strcmp (cc, "MV"))
branch  0 never executed
branch  1 never executed
    #####: 3129:	    cc_mode = 43;
    #####: 3130:	  if (!strcmp (cc, "MY"))
branch  0 never executed
branch  1 never executed
    #####: 3131:	    cc_mode = 44;
    #####: 3132:	  if (!strcmp (cc, "NE"))
branch  0 never executed
branch  1 never executed
    #####: 3133:	    cc_mode = 45;
    #####: 3134:	  if (!strcmp (cc, "NG"))
branch  0 never executed
branch  1 never executed
    #####: 3135:	    cc_mode = 46;
    #####: 3136:	  if (!strcmp (cc, "NM"))
branch  0 never executed
branch  1 never executed
    #####: 3137:	    cc_mode = 47;
    #####: 3138:	  if (!strcmp (cc, "OM"))
branch  0 never executed
branch  1 never executed
    #####: 3139:	    cc_mode = 48;
    #####: 3140:	  if (!strcmp (cc, "PK"))
branch  0 never executed
branch  1 never executed
    #####: 3141:	    cc_mode = 49;
    #####: 3142:	  if (!strcmp (cc, "QA"))
branch  0 never executed
branch  1 never executed
    #####: 3143:	    cc_mode = 50;
    #####: 3144:	  if (!strcmp (cc, "RW"))
branch  0 never executed
branch  1 never executed
    #####: 3145:	    cc_mode = 51;
    #####: 3146:	  if (!strcmp (cc, "SA"))
branch  0 never executed
branch  1 never executed
    #####: 3147:	    cc_mode = 52;
    #####: 3148:	  if (!strcmp (cc, "SD"))
branch  0 never executed
branch  1 never executed
    #####: 3149:	    cc_mode = 53;
    #####: 3150:	  if (!strcmp (cc, "SG"))
branch  0 never executed
branch  1 never executed
    #####: 3151:	    cc_mode = 54;
    #####: 3152:	  if (!strcmp (cc, "SL"))
branch  0 never executed
branch  1 never executed
    #####: 3153:	    cc_mode = 55;
    #####: 3154:	  if (!strcmp (cc, "SO"))
branch  0 never executed
branch  1 never executed
    #####: 3155:	    cc_mode = 56;
    #####: 3156:	  if (!strcmp (cc, "SR"))
branch  0 never executed
branch  1 never executed
    #####: 3157:	    cc_mode = 57;
    #####: 3158:	  if (!strcmp (cc, "SY"))
branch  0 never executed
branch  1 never executed
    #####: 3159:	    cc_mode = 58;
    #####: 3160:	  if (!strcmp (cc, "TD"))
branch  0 never executed
branch  1 never executed
    #####: 3161:	    cc_mode = 59;
    #####: 3162:	  if (!strcmp (cc, "TG"))
branch  0 never executed
branch  1 never executed
    #####: 3163:	    cc_mode = 60;
    #####: 3164:	  if (!strcmp (cc, "TJ"))
branch  0 never executed
branch  1 never executed
    #####: 3165:	    cc_mode = 61;
    #####: 3166:	  if (!strcmp (cc, "TM"))
branch  0 never executed
branch  1 never executed
    #####: 3167:	    cc_mode = 62;
    #####: 3168:	  if (!strcmp (cc, "TN"))
branch  0 never executed
branch  1 never executed
    #####: 3169:	    cc_mode = 63;
    #####: 3170:	  if (!strcmp (cc, "TR"))
branch  0 never executed
branch  1 never executed
    #####: 3171:	    cc_mode = 64;
    #####: 3172:	  if (!strcmp (cc, "TT"))
branch  0 never executed
branch  1 never executed
    #####: 3173:	    cc_mode = 65;
    #####: 3174:	  if (!strcmp (cc, "TZ"))
branch  0 never executed
branch  1 never executed
    #####: 3175:	    cc_mode = 66;
    #####: 3176:	  if (!strcmp (cc, "UG"))
branch  0 never executed
branch  1 never executed
    #####: 3177:	    cc_mode = 67;
    #####: 3178:	  if (!strcmp (cc, "UZ"))
branch  0 never executed
branch  1 never executed
    #####: 3179:	    cc_mode = 68;
    #####: 3180:	  if (!strcmp (cc, "YE"))
branch  0 never executed
branch  1 never executed
    #####: 3181:	    cc_mode = 69;
    #####: 3182:	  if (!strcmp (cc, "YU"))
branch  0 never executed
branch  1 never executed
    #####: 3183:	    cc_mode = 70;
    #####: 3184:	  if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 3185:	    cc_mode = SPECIAL_VALUE;
        -: 3186:	}
    #####: 3187:      if (cc_mode == YEAR_MAX)
branch  0 never executed
branch  1 never executed
    #####: 3188:	abort ();		/* Error, invalid case! */
call    0 never executed
    #####: 3189:      if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3190:	ptr_cc_id = _("Isl");
        -: 3191:      /*
        -: 3192:         Manage those holidays first, which either cannot exceed
        -: 3193:         the year bounds of a Julian/Gregorian calendar year.
        -: 3194:       */
    #####: 3195:      doy = muharram_1 (year, &doy2);
call    0 never executed
    #####: 3196:      if (!cc_mode
branch  0 never executed
branch  1 never executed
    #####: 3197:	  || cc_mode == 3
branch  0 never executed
branch  1 never executed
    #####: 3198:	  || cc_mode == 4
branch  0 never executed
branch  1 never executed
    #####: 3199:	  || cc_mode == 7
branch  0 never executed
branch  1 never executed
    #####: 3200:	  || cc_mode == 9
branch  0 never executed
branch  1 never executed
    #####: 3201:	  || cc_mode == 11
branch  0 never executed
branch  1 never executed
    #####: 3202:	  || cc_mode == 12
branch  0 never executed
branch  1 never executed
    #####: 3203:	  || cc_mode == 13
branch  0 never executed
branch  1 never executed
    #####: 3204:	  || cc_mode == 16
branch  0 never executed
branch  1 never executed
    #####: 3205:	  || cc_mode == 17
branch  0 never executed
branch  1 never executed
    #####: 3206:	  || cc_mode == 18
branch  0 never executed
branch  1 never executed
    #####: 3207:	  || cc_mode == 19
branch  0 never executed
branch  1 never executed
    #####: 3208:	  || cc_mode == 20
branch  0 never executed
branch  1 never executed
    #####: 3209:	  || cc_mode == 21
branch  0 never executed
branch  1 never executed
    #####: 3210:	  || cc_mode == 24
branch  0 never executed
branch  1 never executed
    #####: 3211:	  || cc_mode == 26
branch  0 never executed
branch  1 never executed
    #####: 3212:	  || cc_mode == 30
branch  0 never executed
branch  1 never executed
    #####: 3213:	  || cc_mode == 36
branch  0 never executed
branch  1 never executed
    #####: 3214:	  || cc_mode == 39
branch  0 never executed
branch  1 never executed
    #####: 3215:	  || cc_mode == 42
branch  0 never executed
branch  1 never executed
    #####: 3216:	  || cc_mode == 45
branch  0 never executed
branch  1 never executed
    #####: 3217:	  || cc_mode == 46
branch  0 never executed
branch  1 never executed
    #####: 3218:	  || cc_mode == 47
branch  0 never executed
branch  1 never executed
    #####: 3219:	  || cc_mode == 51
branch  0 never executed
branch  1 never executed
    #####: 3220:	  || cc_mode == 52
branch  0 never executed
branch  1 never executed
    #####: 3221:	  || cc_mode == 54
branch  0 never executed
branch  1 never executed
    #####: 3222:	  || cc_mode == 55
branch  0 never executed
branch  1 never executed
    #####: 3223:	  || cc_mode == 60
branch  0 never executed
branch  1 never executed
    #####: 3224:	  || cc_mode == 61
branch  0 never executed
branch  1 never executed
    #####: 3225:	  || cc_mode == 62
branch  0 never executed
branch  1 never executed
    #####: 3226:	  || cc_mode == 64
branch  0 never executed
branch  1 never executed
    #####: 3227:	  || cc_mode == 65
branch  0 never executed
branch  1 never executed
    #####: 3228:	  || cc_mode == 66
branch  0 never executed
branch  1 never executed
    #####: 3229:	  || cc_mode == 67 || cc_mode == 70 || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3230:	hdy_prefix = DIS_HLS_PREF;
        -: 3231:      else
    #####: 3232:	hdy_prefix = "+";
        -: 3233:      /*
        -: 3234:         Calculate the year number used in the Islamic calendar.
        -: 3235:       */
    #####: 3236:      (void) doy2date (doy, (days_of_february (year) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 3237:      y = (int) ROUND (((date2num (d, m, year) - 227015L) / 354.36707) + 1.0);
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3238:      sprintf (s2, "%s %d", _(hd_text[HD_ISL_NEW_YEARS_DAY].ht_text), y);
    #####: 3239:      holiday (*init_data, detected, s2, ptr_cc_id,
call    0 never executed
        -: 3240:	       hdy_prefix, doy, 0, year, hd_elems, fday, count);
    #####: 3241:      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3242:	*init_data = FALSE;
    #####: 3243:      if (doy2)
branch  0 never executed
branch  1 never executed
        -: 3244:	{
        -: 3245:	  /*
        -: 3246:	     MuHarram_1 appears twice in YEAR.
        -: 3247:	   */
    #####: 3248:	  check_twice = TRUE;
    #####: 3249:	  sprintf (s2, "%s %d", _(hd_text[HD_ISL_NEW_YEARS_DAY].ht_text),
        -: 3250:		   y + 1);
    #####: 3251:	  holiday (*init_data, detected, s2, ptr_cc_id, hdy_prefix, doy2, 0,
call    0 never executed
        -: 3252:		   year, hd_elems, fday, count);
        -: 3253:	}
        -: 3254:      /*
        -: 3255:         Manage those holidays last, which can exceed the
        -: 3256:         year bounds of a Julian/Gregorian calendar year.
        -: 3257:       */
    #####: 3258:      if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
    #####: 3259:	for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 3260:	  if (n > 621)
branch  0 never executed
branch  1 never executed
        -: 3261:	    {
    #####: 3262:	      doy = muharram_1 (n, &doy2);
call    0 never executed
    #####: 3263:	      if (doy2 && (n == year - 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3264:		(void) doy2date (doy2, (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
        -: 3265:	      else
    #####: 3266:		(void) doy2date (doy, (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 3267:	    LABEL_ih_muharram_1_twice:
    #####: 3268:	      idate = date2num (d, m, n);
call    0 never executed
        -: 3269:	      /*
        -: 3270:	         And manage all ``critical'' holidays.
        -: 3271:	       */
    #####: 3272:	      if (!cc_mode
branch  0 never executed
branch  1 never executed
    #####: 3273:		  || cc_mode == 2
branch  0 never executed
branch  1 never executed
    #####: 3274:		  || cc_mode == 4
branch  0 never executed
branch  1 never executed
    #####: 3275:		  || cc_mode == 8
branch  0 never executed
branch  1 never executed
    #####: 3276:		  || cc_mode == 14
branch  0 never executed
branch  1 never executed
    #####: 3277:		  || cc_mode == 26
branch  0 never executed
branch  1 never executed
    #####: 3278:		  || cc_mode == 27
branch  0 never executed
branch  1 never executed
    #####: 3279:		  || cc_mode == 28
branch  0 never executed
branch  1 never executed
    #####: 3280:		  || cc_mode == 35 || cc_mode == 49 || cc_mode == 50)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3281:		{
    #####: 3282:		  if (!cc_mode || cc_mode == 26)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3283:		    hdy_prefix = DIS_HLS_PREF;
    #####: 3284:		  else if (cc_mode == 2)
branch  0 never executed
branch  1 never executed
    #####: 3285:		    hdy_prefix = DIS_HLS_PREF2;
        -: 3286:		  else
    #####: 3287:		    hdy_prefix = "+";
    #####: 3288:		  if (!cc_mode || cc_mode == 26)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3289:		    j = 1;
        -: 3290:		  else
    #####: 3291:		    j = 2;
    #####: 3292:		  for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 3293:		    {
    #####: 3294:		      num2date (idate + 9 + i, &d, &m, &y);
call    0 never executed
    #####: 3295:		      if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3296:			holiday (*init_data, detected,
call    0 never executed
    #####: 3297:				 _(hd_text[HD_ISL_ASHURA].ht_text), ptr_cc_id,
        -: 3298:				 hdy_prefix, d, m, year, hd_elems, fday,
        -: 3299:				 count);
        -: 3300:		    }
        -: 3301:		}
    #####: 3302:	      if ((cc_mode != 3)
branch  0 never executed
branch  1 never executed
    #####: 3303:		  && (cc_mode != 4)
branch  0 never executed
branch  1 never executed
    #####: 3304:		  && (cc_mode != 12)
branch  0 never executed
branch  1 never executed
    #####: 3305:		  && (cc_mode != 20)
branch  0 never executed
branch  1 never executed
    #####: 3306:		  && (cc_mode != 30)
branch  0 never executed
branch  1 never executed
    #####: 3307:		  && (cc_mode != 39)
branch  0 never executed
branch  1 never executed
    #####: 3308:		  && (cc_mode != 42)
branch  0 never executed
branch  1 never executed
    #####: 3309:		  && (cc_mode != 47)
branch  0 never executed
branch  1 never executed
    #####: 3310:		  && (cc_mode != 50)
branch  0 never executed
branch  1 never executed
    #####: 3311:		  && (cc_mode != 51)
branch  0 never executed
branch  1 never executed
    #####: 3312:		  && (cc_mode != 54)
branch  0 never executed
branch  1 never executed
    #####: 3313:		  && (cc_mode != 60)
branch  0 never executed
branch  1 never executed
    #####: 3314:		  && (cc_mode != 61)
branch  0 never executed
branch  1 never executed
    #####: 3315:		  && (cc_mode != 62)
branch  0 never executed
branch  1 never executed
    #####: 3316:		  && (cc_mode != 64)
branch  0 never executed
branch  1 never executed
    #####: 3317:		  && (cc_mode != 65) && (cc_mode != 67) && (cc_mode != 70))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3318:		{
    #####: 3319:		  if (!cc_mode || cc_mode == 26)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3320:		    hdy_prefix = DIS_HLS_PREF;
    #####: 3321:		  else if (cc_mode == 36)
branch  0 never executed
branch  1 never executed
    #####: 3322:		    hdy_prefix = DIS_HLS_PREF2;
        -: 3323:		  else
    #####: 3324:		    hdy_prefix = "+";
    #####: 3325:		  if (cc_mode == 48)
branch  0 never executed
branch  1 never executed
    #####: 3326:		    j = 2;
        -: 3327:		  else
    #####: 3328:		    j = 1;
    #####: 3329:		  for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 3330:		    {
    #####: 3331:		      num2date (idate + 70 + i, &d, &m, &y);
call    0 never executed
    #####: 3332:		      if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3333:			holiday (*init_data, detected,
call    0 never executed
    #####: 3334:				 _(hd_text[HD_ISL_EID_I_MILAD_UN_NABI].
        -: 3335:				   ht_text), ptr_cc_id, hdy_prefix, d, m,
        -: 3336:				 year, hd_elems, fday, count);
        -: 3337:		    }
        -: 3338:		}
    #####: 3339:	      if (!cc_mode
branch  0 never executed
branch  1 never executed
    #####: 3340:		  || cc_mode == 1
branch  0 never executed
branch  1 never executed
    #####: 3341:		  || cc_mode == 10
branch  0 never executed
branch  1 never executed
    #####: 3342:		  || cc_mode == 25
branch  0 never executed
branch  1 never executed
    #####: 3343:		  || cc_mode == 29
branch  0 never executed
branch  1 never executed
    #####: 3344:		  || cc_mode == 33
branch  0 never executed
branch  1 never executed
    #####: 3345:		  || cc_mode == 35 || cc_mode == 48 || cc_mode == 69)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 3346:		{
    #####: 3347:		  num2date (idate + 203, &d, &m, &y);
call    0 never executed
    #####: 3348:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3349:		    holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3350:			     _(hd_text[HD_ISL_SHAB_E_MIRAJ].ht_text),
        -: 3351:			     ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m,
        -: 3352:			     year, hd_elems, fday, count);
        -: 3353:		}
    #####: 3354:	      if (!cc_mode || cc_mode == 6)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3355:		{
    #####: 3356:		  num2date (idate + 221, &d, &m, &y);
call    0 never executed
    #####: 3357:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3358:		    holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3359:			     _(hd_text[HD_ISL_SHAB_E_BARAT].ht_text),
        -: 3360:			     ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m,
        -: 3361:			     year, hd_elems, fday, count);
        -: 3362:		}
    #####: 3363:	      if (cc_mode == 10 || cc_mode == 43 || cc_mode == 61)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3364:		hdy_prefix = "+";
        -: 3365:	      else
    #####: 3366:		hdy_prefix = DIS_HLS_PREF;
    #####: 3367:	      num2date (idate + 236, &d, &m, &y);
call    0 never executed
    #####: 3368:	      if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3369:		holiday (*init_data, detected,
call    0 never executed
    #####: 3370:			 _(hd_text[HD_ISL_RAMADAN].ht_text), ptr_cc_id,
        -: 3371:			 hdy_prefix, d, m, year, hd_elems, fday, count);
    #####: 3372:	      if (!cc_mode || cc_mode == 6)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3373:		{
    #####: 3374:		  num2date (idate + 262, &d, &m, &y);
call    0 never executed
    #####: 3375:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3376:		    holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3377:			     _(hd_text[HD_ISL_SHAB_E_QADR].ht_text),
        -: 3378:			     ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m,
        -: 3379:			     year, hd_elems, fday, count);
        -: 3380:		}
    #####: 3381:	      if (!cc_mode || cc_mode == 62)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3382:		hdy_prefix = DIS_HLS_PREF;
        -: 3383:	      else
    #####: 3384:		if (cc_mode == 36
branch  0 never executed
branch  1 never executed
    #####: 3385:		    || cc_mode == 39 || cc_mode == 60 || cc_mode == 70)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3386:		hdy_prefix = DIS_HLS_PREF2;
        -: 3387:	      else
    #####: 3388:		hdy_prefix = "+";
    #####: 3389:	      if (cc_mode == 18)
branch  0 never executed
branch  1 never executed
    #####: 3390:		j = 0;
    #####: 3391:	      else if (cc_mode == 5
branch  0 never executed
branch  1 never executed
    #####: 3392:		       || cc_mode == 6
branch  0 never executed
branch  1 never executed
    #####: 3393:		       || cc_mode == 7
branch  0 never executed
branch  1 never executed
    #####: 3394:		       || cc_mode == 9
branch  0 never executed
branch  1 never executed
    #####: 3395:		       || cc_mode == 10
branch  0 never executed
branch  1 never executed
    #####: 3396:		       || cc_mode == 12
branch  0 never executed
branch  1 never executed
    #####: 3397:		       || cc_mode == 16
branch  0 never executed
branch  1 never executed
    #####: 3398:		       || cc_mode == 17
branch  0 never executed
branch  1 never executed
    #####: 3399:		       || cc_mode == 19
branch  0 never executed
branch  1 never executed
    #####: 3400:		       || cc_mode == 21
branch  0 never executed
branch  1 never executed
    #####: 3401:		       || cc_mode == 24
branch  0 never executed
branch  1 never executed
    #####: 3402:		       || cc_mode == 26
branch  0 never executed
branch  1 never executed
    #####: 3403:		       || cc_mode == 30
branch  0 never executed
branch  1 never executed
    #####: 3404:		       || cc_mode == 36
branch  0 never executed
branch  1 never executed
    #####: 3405:		       || cc_mode == 42
branch  0 never executed
branch  1 never executed
    #####: 3406:		       || cc_mode == 44
branch  0 never executed
branch  1 never executed
    #####: 3407:		       || cc_mode == 45
branch  0 never executed
branch  1 never executed
    #####: 3408:		       || cc_mode == 46
branch  0 never executed
branch  1 never executed
    #####: 3409:		       || cc_mode == 47
branch  0 never executed
branch  1 never executed
    #####: 3410:		       || cc_mode == 51
branch  0 never executed
branch  1 never executed
    #####: 3411:		       || cc_mode == 54
branch  0 never executed
branch  1 never executed
    #####: 3412:		       || cc_mode == 55
branch  0 never executed
branch  1 never executed
    #####: 3413:		       || cc_mode == 57
branch  0 never executed
branch  1 never executed
    #####: 3414:		       || cc_mode == 60
branch  0 never executed
branch  1 never executed
    #####: 3415:		       || cc_mode == 62
branch  0 never executed
branch  1 never executed
    #####: 3416:		       || cc_mode == 65
branch  0 never executed
branch  1 never executed
    #####: 3417:		       || cc_mode == 66 || cc_mode == 67 || cc_mode == 70)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3418:		j = 1;
    #####: 3419:	      else if (cc_mode == 2
branch  0 never executed
branch  1 never executed
    #####: 3420:		       || cc_mode == 11
branch  0 never executed
branch  1 never executed
    #####: 3421:		       || cc_mode == 13
branch  0 never executed
branch  1 never executed
    #####: 3422:		       || cc_mode == 14
branch  0 never executed
branch  1 never executed
    #####: 3423:		       || cc_mode == 20
branch  0 never executed
branch  1 never executed
    #####: 3424:		       || cc_mode == 25 || cc_mode == 38 || cc_mode == 62)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3425:		j = 2;
    #####: 3426:	      else if (cc_mode == 28
branch  0 never executed
branch  1 never executed
    #####: 3427:		       || cc_mode == 48 || cc_mode == 50 || cc_mode == 69)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3428:		j = 4;
    #####: 3429:	      else if (cc_mode == 4 || cc_mode == 52)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3430:		j = 7;
        -: 3431:	      else
    #####: 3432:		j = 3;
    #####: 3433:	      for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 3434:		{
    #####: 3435:		  num2date (idate + 266 + i, &d, &m, &y);
call    0 never executed
    #####: 3436:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3437:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3438:			     _(hd_text[HD_ISL_EID_AL_FITR].ht_text),
        -: 3439:			     ptr_cc_id, hdy_prefix, d, m, year, hd_elems,
        -: 3440:			     fday, count);
        -: 3441:		}
    #####: 3442:	      if (!cc_mode || cc_mode == 2 || cc_mode == 15 || cc_mode == 43)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
        -: 3443:		{
    #####: 3444:		  num2date (idate + 333, &d, &m, &y);
call    0 never executed
    #####: 3445:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3446:		    holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3447:			     _(hd_text[HD_ISL_WAQF_AL_ARAFAT].ht_text),
        -: 3448:			     ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m,
        -: 3449:			     year, hd_elems, fday, count);
        -: 3450:		}
    #####: 3451:	      if (!cc_mode || cc_mode == 26)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3452:		hdy_prefix = DIS_HLS_PREF;
        -: 3453:	      else
    #####: 3454:		if (cc_mode == 36
branch  0 never executed
branch  1 never executed
    #####: 3455:		    || cc_mode == 39 || cc_mode == 60 || cc_mode == 70)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3456:		hdy_prefix = DIS_HLS_PREF2;
        -: 3457:	      else
    #####: 3458:		hdy_prefix = "+";
    #####: 3459:	      if (cc_mode == 3
branch  0 never executed
branch  1 never executed
    #####: 3460:		  || cc_mode == 18
branch  0 never executed
branch  1 never executed
    #####: 3461:		  || cc_mode == 30
branch  0 never executed
branch  1 never executed
    #####: 3462:		  || cc_mode == 42
branch  0 never executed
branch  1 never executed
    #####: 3463:		  || cc_mode == 47 || cc_mode == 51 || cc_mode == 65)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3464:		j = 0;
    #####: 3465:	      else if (cc_mode == 5
branch  0 never executed
branch  1 never executed
    #####: 3466:		       || cc_mode == 6
branch  0 never executed
branch  1 never executed
    #####: 3467:		       || cc_mode == 7
branch  0 never executed
branch  1 never executed
    #####: 3468:		       || cc_mode == 9
branch  0 never executed
branch  1 never executed
    #####: 3469:		       || cc_mode == 10
branch  0 never executed
branch  1 never executed
    #####: 3470:		       || cc_mode == 12
branch  0 never executed
branch  1 never executed
    #####: 3471:		       || cc_mode == 16
branch  0 never executed
branch  1 never executed
    #####: 3472:		       || cc_mode == 17
branch  0 never executed
branch  1 never executed
    #####: 3473:		       || cc_mode == 19
branch  0 never executed
branch  1 never executed
    #####: 3474:		       || cc_mode == 21
branch  0 never executed
branch  1 never executed
    #####: 3475:		       || cc_mode == 24
branch  0 never executed
branch  1 never executed
    #####: 3476:		       || cc_mode == 25
branch  0 never executed
branch  1 never executed
    #####: 3477:		       || cc_mode == 36
branch  0 never executed
branch  1 never executed
    #####: 3478:		       || cc_mode == 44
branch  0 never executed
branch  1 never executed
    #####: 3479:		       || cc_mode == 45
branch  0 never executed
branch  1 never executed
    #####: 3480:		       || cc_mode == 46
branch  0 never executed
branch  1 never executed
    #####: 3481:		       || cc_mode == 54
branch  0 never executed
branch  1 never executed
    #####: 3482:		       || cc_mode == 55
branch  0 never executed
branch  1 never executed
    #####: 3483:		       || cc_mode == 57
branch  0 never executed
branch  1 never executed
    #####: 3484:		       || cc_mode == 60
branch  0 never executed
branch  1 never executed
    #####: 3485:		       || cc_mode == 66 || cc_mode == 67 || cc_mode == 70)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3486:		j = 1;
    #####: 3487:	      else if (cc_mode == 2
branch  0 never executed
branch  1 never executed
    #####: 3488:		       || cc_mode == 11
branch  0 never executed
branch  1 never executed
    #####: 3489:		       || cc_mode == 13
branch  0 never executed
branch  1 never executed
    #####: 3490:		       || cc_mode == 14
branch  0 never executed
branch  1 never executed
    #####: 3491:		       || cc_mode == 20 || cc_mode == 38 || cc_mode == 62)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3492:		j = 2;
    #####: 3493:	      else if (cc_mode == 28
branch  0 never executed
branch  1 never executed
    #####: 3494:		       || cc_mode == 29
branch  0 never executed
branch  1 never executed
    #####: 3495:		       || cc_mode == 43
branch  0 never executed
branch  1 never executed
    #####: 3496:		       || cc_mode == 48 || cc_mode == 50 || cc_mode == 64)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3497:		j = 4;
    #####: 3498:	      else if (cc_mode == 69)
branch  0 never executed
branch  1 never executed
    #####: 3499:		j = 5;
    #####: 3500:	      else if (cc_mode == 4 || cc_mode == 52)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3501:		j = 10;
        -: 3502:	      else
    #####: 3503:		j = 3;
    #####: 3504:	      for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 3505:		{
    #####: 3506:		  num2date (idate + 334 + i, &d, &m, &y);
call    0 never executed
    #####: 3507:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3508:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3509:			     _(hd_text[HD_ISL_EID_AL_ADHA].ht_text),
        -: 3510:			     ptr_cc_id, hdy_prefix, d, m, year, hd_elems,
        -: 3511:			     fday, count);
        -: 3512:		}
    #####: 3513:	      if (cc_mode == 43)
branch  0 never executed
branch  1 never executed
        -: 3514:		{
        -: 3515:		  /*
        -: 3516:		     Manage some specific holidays celebrated in Maldives (MV),
        -: 3517:		     which are tied to the Islamic calendar.
        -: 3518:		   */
    #####: 3519:		  num2date (idate + 59, &d, &m, &y);
call    0 never executed
    #####: 3520:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3521:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3522:			     _(hd_text[HD_NATIONAL_HOLIDAY].ht_text),
        -: 3523:			     ptr_cc_id, "+", d, m, year, hd_elems, fday,
        -: 3524:			     count);
    #####: 3525:		  num2date (idate + 177, &d, &m, &y);
call    0 never executed
    #####: 3526:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3527:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3528:			     _(hd_text[HD_HURAVEE_DAY].ht_text), ptr_cc_id,
        -: 3529:			     "+", d, m, year, hd_elems, fday, count);
    #####: 3530:		  num2date (idate + 207, &d, &m, &y);
call    0 never executed
    #####: 3531:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3532:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3533:			     _(hd_text[HD_MARTYRS_DAY].ht_text), ptr_cc_id,
        -: 3534:			     "+", d, m, year, hd_elems, fday, count);
        -: 3535:		}
    #####: 3536:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 3537:		{
    #####: 3538:		  num2date (idate + 15, &d, &m, &y);
call    0 never executed
    #####: 3539:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3540:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3541:			     _(hd_text[HD_ISL_IMAMAT_DAY].ht_text), ptr_cc_id,
        -: 3542:			     DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
    #####: 3543:		  num2date (idate + 170, &d, &m, &y);
call    0 never executed
    #####: 3544:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3545:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3546:			     _(hd_text[HD_ISL_AGA_KHANS_BIRTHDAY].ht_text),
        -: 3547:			     ptr_cc_id, DIS_HLS_PREF, d, m, year, hd_elems,
        -: 3548:			     fday, count);
    #####: 3549:		  num2date (idate + 252, &d, &m, &y);
call    0 never executed
    #####: 3550:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3551:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3552:			     _(hd_text[HD_ISL_NUZUL_AL_QURAN].ht_text),
        -: 3553:			     ptr_cc_id, DIS_HLS_PREF, d, m, year, hd_elems,
        -: 3554:			     fday, count);
    #####: 3555:		  num2date (idate + 265, &d, &m, &y);
call    0 never executed
        -: 3556:		  LOOP
        -: 3557:		  {
    #####: 3558:		    if (weekday_of_date (d, m, y) == 5)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 3559:		      break;
        -: 3560:		    else
    #####: 3561:		      (void) prev_date (&d, &m, &y);
call    0 never executed
        -: 3562:		  }
    #####: 3563:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3564:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3565:			     _(hd_text[HD_ISL_QUDS_DAY].ht_text), ptr_cc_id,
        -: 3566:			     DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
    #####: 3567:		  num2date (idate + 342, &d, &m, &y);
call    0 never executed
    #####: 3568:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3569:		    holiday (*init_data, detected,
call    0 never executed
    #####: 3570:			     _(hd_text[HD_ISL_GHADIR].ht_text), ptr_cc_id,
        -: 3571:			     DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
        -: 3572:		}
    #####: 3573:	      if (check_twice && (n == year))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3574:		{
    #####: 3575:		  check_twice = FALSE;
    #####: 3576:		  (void) doy2date (doy2, (days_of_february (n) == 29), &d,
call    0 never executed
call    1 never executed
        -: 3577:				   &m);
    #####: 3578:		  goto LABEL_ih_muharram_1_twice;
        -: 3579:		}
        -: 3580:	    }
        -: 3581:    }
    #####: 3582:}
        -: 3583:
        -: 3584:
        -: 3585:
        -: 3586:void
function islamic_mth called 0 returned 0% blocks executed 0%
    #####: 3587:islamic_mth (init_data, detected, year, hd_elems, fday, count)
        -: 3588:     Bool *init_data;
        -: 3589:     const Bool detected;
        -: 3590:     const int year;
        -: 3591:     int *hd_elems;
        -: 3592:     const int fday;
        -: 3593:     const int count;
        -: 3594:/*!
        -: 3595:   Manages all Islamic civil-calendar based months since AD 622.
        -: 3596:     Note that this function uses the arithmetical lunar Islamic ***CIVIL***
        -: 3597:     calendar.  This kind of calendar is just a rough estimate of the
        -: 3598:     religious Islamic lunar calendar, which is calculated astronomically.
        -: 3599:     So don't be surprised if some month dates differ from the religious
        -: 3600:     Islamic calendar about +/-1...2 days in some years.
        -: 3601:*/
        -: 3602:{
    #####: 3603:  if (year > 621)
branch  0 never executed
branch  1 never executed
        -: 3604:    {
        -: 3605:      auto Ulint idate;
        -: 3606:      register int i;
        -: 3607:      register int j;
        -: 3608:      register int n;
        -: 3609:      register int doy;
        -: 3610:      auto int doy2;
        -: 3611:      auto int d2;
        -: 3612:      auto int m2;
        -: 3613:      auto int d;
        -: 3614:      auto int m;
        -: 3615:      auto int y;
    #####: 3616:      auto Bool check_twice = FALSE;
        -: 3617:
        -: 3618:
    #####: 3619:      ptr_cc_id = _("Isl");
    #####: 3620:      (void) muharram_1 (year, &doy2);
call    0 never executed
    #####: 3621:      if (doy2)
branch  0 never executed
branch  1 never executed
        -: 3622:	/*
        -: 3623:	   MuHarram_1 appears twice in YEAR.
        -: 3624:	 */
    #####: 3625:	check_twice = TRUE;
    #####: 3626:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 3627:	if (n > 621)
branch  0 never executed
branch  1 never executed
        -: 3628:	  {
    #####: 3629:	    doy = muharram_1 (n, &doy2);
call    0 never executed
    #####: 3630:	    if (doy2 && (n == year - 1))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3631:	      j = doy2;
        -: 3632:	    else
    #####: 3633:	      j = doy;
    #####: 3634:	    (void) doy2date (j, (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 3635:	  LABEL_im_muharram_1_twice:
    #####: 3636:	    idate = date2num (d, m, n);
call    0 never executed
        -: 3637:	    /*
        -: 3638:	       And manage all Islamic civil-calendar months.
        -: 3639:	     */
    #####: 3640:	    for (i = MONTH_MIN; i <= MONTH_MAX; i++)
branch  0 never executed
branch  1 never executed
        -: 3641:	      {
    #####: 3642:		num2date (idate, &d, &m, &y);
call    0 never executed
    #####: 3643:		if (y == year)
branch  0 never executed
branch  1 never executed
        -: 3644:		  {
        -: 3645:		    /*
        -: 3646:		       Calculate the year number used in the Islamic calendar.
        -: 3647:		     */
    #####: 3648:		    (void) doy2date (j, (days_of_february (year) == 29), &d2,
call    0 never executed
call    1 never executed
        -: 3649:				     &m2);
    #####: 3650:		    y =
    #####: 3651:		      (int)
    #####: 3652:		      ROUND (((date2num (d2, m2, n) - 227015L) / 354.36707) +
call    0 never executed
call    1 never executed
call    2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -: 3653:			     1.0);
    #####: 3654:		    ocs_monthtext (init_data, detected, ptr_cc_id, d, m, year,
call    0 never executed
        -: 3655:				   FALSE, i, y, SPECIAL_VALUE, hd_elems, fday,
        -: 3656:				   count);
        -: 3657:		  }
    #####: 3658:		idate += ((i & 1) ? 30 : 29);
branch  0 never executed
branch  1 never executed
        -: 3659:	      }
    #####: 3660:	    if (check_twice && (n == year))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3661:	      {
    #####: 3662:		check_twice = FALSE;
    #####: 3663:		(void) doy2date (doy2, (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 3664:		goto LABEL_im_muharram_1_twice;
        -: 3665:	      }
        -: 3666:	  }
        -: 3667:    }
    #####: 3668:}
        -: 3669:
        -: 3670:
        -: 3671:
        -: 3672:void
function japanese_hdy called 0 returned 0% blocks executed 0%
    #####: 3673:japanese_hdy (init_data, detected, year, hd_elems, fday, count, cc,
        -: 3674:	      is_any_meridian)
        -: 3675:     Bool *init_data;
        -: 3676:     const Bool detected;
        -: 3677:     const int year;
        -: 3678:     int *hd_elems;
        -: 3679:     const int fday;
        -: 3680:     const int count;
        -: 3681:     const char *cc;
        -: 3682:     const Bool is_any_meridian;
        -: 3683:/*!
        -: 3684:   Manages all Japanese calendar based holidays since AD 1645.
        -: 3685:     Earlier years are not respected, because the rules of the Japanese
        -: 3686:     calendar have changed too many times during these former years.
        -: 3687:     The function results have to be interpreted with caution, because
        -: 3688:     of the inaccuratenesses of the Moon phase and the Sun longitude
        -: 3689:     calculation function used.  The rules to calculate the Japanese
        -: 3690:     calendar are identical the rules to calculate the Chinese calendar,
        -: 3691:     except that since AD 1888 they use the longitude 135 degrees east
        -: 3692:     for computations.
        -: 3693:   See the `chinese_hdy()' function for further information.
        -: 3694:*/
        -: 3695:{
    #####: 3696:  if (year > 1644)
branch  0 never executed
branch  1 never executed
        -: 3697:    {
        -: 3698:      auto Ulint conjunction_vector[MONTH_MAX + 4];
    #####: 3699:      auto Ulint *ptr_conjunction_vector = conjunction_vector;
        -: 3700:      auto Ulint zq;
        -: 3701:      register int cj;
        -: 3702:      register int lm;
        -: 3703:      register int cc_mode;
        -: 3704:      register int hour;
        -: 3705:      register int min;
    #####: 3706:      register int extra = 0;
    #####: 3707:      auto int ssd1 = 0;
    #####: 3708:      auto int ssd2 = 0;
        -: 3709:      register int i;
        -: 3710:      register int j;
        -: 3711:      register int k;
        -: 3712:      auto int d;
        -: 3713:      auto int m;
    #####: 3714:      auto int y = year;
    #####: 3715:      auto Bool is_checked = FALSE;
    #####: 3716:      auto Bool check_twice = FALSE;
        -: 3717:
        -: 3718:
    #####: 3719:      if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 3720:	cc_mode = 0;
    #####: 3721:      else if (!strcmp (cc, "KR") || !strcmp (cc, "KP") || !strcmp (cc, "TW"))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3722:	cc_mode = 1;
    #####: 3723:      else if (!strcmp (cc, "JP"))
branch  0 never executed
branch  1 never executed
    #####: 3724:	cc_mode = 2;
    #####: 3725:      else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 3726:	cc_mode = SPECIAL_VALUE;
        -: 3727:      else
    #####: 3728:	abort ();		/* Error, invalid case! */
call    0 never executed
    #####: 3729:      if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3730:	ptr_cc_id = _("Jap");
    #####: 3731:      if (is_any_meridian)
branch  0 never executed
branch  1 never executed
        -: 3732:	{
        -: 3733:	  /*
        -: 3734:	     Astronomical calculations are done for a line at a definite
        -: 3735:	     meridian expressed as a time value.  This time value is given
        -: 3736:	     by the global `time_hour_offset' variable and by the global
        -: 3737:	     `time_min_offset' variable.  If HOUR and MIN are set to zero,
        -: 3738:	     calculations are made for Universal Time (UTC/GMT).  If HOUR
        -: 3739:	     and MIN have a positive sign, UTC/GMT calculations are made
        -: 3740:	     for meridians East of Greenwich, otherwise for meridians
        -: 3741:	     West of Greenwich.
        -: 3742:	   */
    #####: 3743:	  hour = time_hour_offset;
    #####: 3744:	  min = time_min_offset;
        -: 3745:	}
        -: 3746:      else
        -: 3747:	{
        -: 3748:	  /*
        -: 3749:	     Astronomical calculations are based on China/Japan local time.
        -: 3750:	   */
    #####: 3751:	  if (year < 1888)
branch  0 never executed
branch  1 never executed
        -: 3752:	    {
        -: 3753:	      /*
        -: 3754:	         Meridian Beijing (116 25' degrees East), UTC/GMT time difference.
        -: 3755:	       */
    #####: 3756:	      hour = 7;
    #####: 3757:	      min = 45;
        -: 3758:	    }
        -: 3759:	  else
        -: 3760:	    {
        -: 3761:	      /*
        -: 3762:	         UTC/GMT-9 for the meridian 135 degrees East.
        -: 3763:	       */
    #####: 3764:	      hour = 9;
    #####: 3765:	      min = 0;
        -: 3766:	    }
        -: 3767:	}
    #####: 3768:      if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 3769:	{
        -: 3770:	  /*
        -: 3771:	     Manage the major solar term/Zhong-Qi related festivals first.
        -: 3772:	   */
    #####: 3773:	  if (equinox_solstice (NH_VE, &d, &m, &y, hour, min) !=
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3774:	      SPECIAL_VALUE)
        -: 3775:	    {
    #####: 3776:	      holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3777:		       _(hd_text[HD_EQUINOX_DAY].ht_text), ptr_cc_id,
        -: 3778:		       (cc_mode) ? "+" : DIS_HLS_PREF, d, m, y, hd_elems,
        -: 3779:		       fday, count);
    #####: 3780:	      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3781:		*init_data = FALSE;
        -: 3782:	    }
        -: 3783:	  else
    #####: 3784:	    y = year;
    #####: 3785:	  if (equinox_solstice (NH_AE, &d, &m, &y, hour, min) !=
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3786:	      SPECIAL_VALUE)
        -: 3787:	    {
    #####: 3788:	      holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3789:		       _(hd_text[HD_EQUINOX_DAY].ht_text), ptr_cc_id,
        -: 3790:		       (cc_mode) ? "+" : DIS_HLS_PREF, d, m, y, hd_elems,
        -: 3791:		       fday, count);
    #####: 3792:	      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3793:		*init_data = FALSE;
        -: 3794:	    }
        -: 3795:	  else
    #####: 3796:	    y = year;
    #####: 3797:	  if (equinox_solstice (NH_WS, &d, &m, &y, hour, min) !=
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3798:	      SPECIAL_VALUE)
        -: 3799:	    {
    #####: 3800:	      holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3801:		       _(hd_text[HD_SOLSTICE_DAY].ht_text), ptr_cc_id,
        -: 3802:		       (cc_mode) ? "+" : DIS_HLS_PREF, d, m, y, hd_elems,
        -: 3803:		       fday, count);
    #####: 3804:	      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3805:		*init_data = FALSE;
        -: 3806:	    }
        -: 3807:	  else
    #####: 3808:	    y = year;
        -: 3809:	  /*
        -: 3810:	     And manage the minor solar term/Jie-Qi related festivals next.
        -: 3811:	   */
    #####: 3812:	  if (sun_longitude (315.0, &d, &m, &y, hour, min, FALSE) !=
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 3813:	      SPECIAL_VALUE)
        -: 3814:	    {
    #####: 3815:	      (void) prev_date (&d, &m, &y);
call    0 never executed
    #####: 3816:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 3817:		{
    #####: 3818:		  holiday (*init_data, detected,
call    0 never executed
    #####: 3819:			   _(hd_text[HD_SEASON_CHANGE].ht_text), ptr_cc_id,
        -: 3820:			   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 3821:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3822:		    *init_data = FALSE;
        -: 3823:		}
        -: 3824:	    }
    #####: 3825:	  y = year;
        -: 3826:	}
    #####: 3827:    LABEL_japanese_new_year_twice:
        -: 3828:      /*
        -: 3829:         And now the lunar based holidays, so check for a possible leap month.
        -: 3830:       */
    #####: 3831:      lm =
call    0 never executed
    #####: 3832:	find_chinese_leap_month (ptr_conjunction_vector, &zq, y, hour, min);
    #####: 3833:      if (lm == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 3834:	{
        -: 3835:	  /*
        -: 3836:	     Error, cannot compute the lunisolar based calendar correctly.
        -: 3837:	   */
    #####: 3838:	  if (warning_level >= 0)
branch  0 never executed
branch  1 never executed
        -: 3839:	    {
    #####: 3840:	      sprintf (s2,
        -: 3841:		       _
        -: 3842:		       ("Cannot calculate lunisolar calendar for %d correctly"),
        -: 3843:		       y);
    #####: 3844:	      print_text (stderr, s2);
call    0 never executed
    #####: 3845:	      if (warning_level >= WARN_LVL_MAX)
branch  0 never executed
branch  1 never executed
    #####: 3846:		my_error (ERR_INTERNAL_C_FUNC_FAILURE, __FILE__,
call    0 never executed
        -: 3847:			  ((long) __LINE__) - 15L,
        -: 3848:			  "find_chinese_leap_month()::lm!=", lm);
        -: 3849:	    }
        -: 3850:	}
        -: 3851:      else
        -: 3852:	{
        -: 3853:	  /*
        -: 3854:	     Now, since we know the leap month in the year YEAR, we can
        -: 3855:	     calculate the date of the Japanese_New_Year/Japanese calendar
        -: 3856:	     month 1 correctly.  The Japanese_New_Year is on the date of the
        -: 3857:	     second New Moon ***after*** the date of the winter solstice
        -: 3858:	     (which is always in the 11th month of the Japanese calendar)
        -: 3859:	     of the previous YEAR, but only if there is NO leap month 11
        -: 3860:	     or 12 (this case is marked by `lm==-11|-12'), otherwise it is
        -: 3861:	     on the date of the third New Moon ***after*** the date of the
        -: 3862:	     winter solstice of the previous YEAR.
        -: 3863:	   */
    #####: 3864:	  cj = 0;
    #####: 3865:	  if (conjunction_vector[cj] == zq)
branch  0 never executed
branch  1 never executed
    #####: 3866:	    cj++;
    #####: 3867:	  if (lm < 0)
branch  0 never executed
branch  1 never executed
    #####: 3868:	    cj += 2;
        -: 3869:	  else
    #####: 3870:	    cj++;
    #####: 3871:	  if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 3872:	    {
        -: 3873:	      /*
        -: 3874:	         Detect the date of the first day of the Japanese calendar
        -: 3875:	         month 12 of the previous YEAR.
        -: 3876:	       */
    #####: 3877:	      if (lm == -MONTH_MAX)
branch  0 never executed
branch  1 never executed
    #####: 3878:		num2date (conjunction_vector[cj - 2] + 12, &d, &m, &y);
call    0 never executed
        -: 3879:	      else
    #####: 3880:		num2date (conjunction_vector[cj - 1] + 12, &d, &m, &y);
call    0 never executed
    #####: 3881:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 3882:		{
    #####: 3883:		  i = day_of_year (d, m, y);
call    0 never executed
    #####: 3884:		  if ((i != ssd1) && (i != ssd2))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3885:		    {
    #####: 3886:		      ssd1 = i;
    #####: 3887:		      holiday (*init_data, detected,
call    0 never executed
    #####: 3888:			       _(hd_text[HD_SOOT_SWEEPING_DAY].ht_text),
        -: 3889:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 3890:			       fday, count);
    #####: 3891:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3892:			*init_data = FALSE;
        -: 3893:		    }
        -: 3894:		}
        -: 3895:	    }
        -: 3896:	  /*
        -: 3897:	     Detect the date of the last day of the Japanese calendar month,
        -: 3898:	     which is prior the first day of the Japanese calendar month 1.
        -: 3899:	   */
    #####: 3900:	  num2date (conjunction_vector[cj] - 1, &d, &m, &y);
call    0 never executed
    #####: 3901:	  if ((y == year) && (cc_mode != SPECIAL_VALUE))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3902:	    {
    #####: 3903:	      holiday (*init_data, detected,
call    0 never executed
    #####: 3904:		       _(hd_text[HD_JAPANESE_NEW_YEARS_EVE].ht_text),
        -: 3905:		       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems, fday,
        -: 3906:		       count);
    #####: 3907:	      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3908:		*init_data = FALSE;
        -: 3909:	    }
        -: 3910:	  /*
        -: 3911:	     Detect the date of the first day of the Japanese calendar month 1.
        -: 3912:	   */
    #####: 3913:	  (void) next_date (&d, &m, &y);
call    0 never executed
        -: 3914:	  /*
        -: 3915:	     Detect whether it is necessary to respect the holidays of next
        -: 3916:	     YEAR.  This must be always done if we creating dates according
        -: 3917:	     to the proleptic Julian calendar and the Japanese_New_Year
        -: 3918:	     holiday either started in the previous YEAR or started early
        -: 3919:	     in the actual YEAR.
        -: 3920:	   */
    #####: 3921:	  if (!is_checked
branch  0 never executed
branch  1 never executed
    #####: 3922:	      && ((y != year) || ((year <= greg->year) && (year >= 2700))))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 3923:	    is_checked = check_twice = TRUE;
    #####: 3924:	  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 3925:	    {
        -: 3926:	      /*
        -: 3927:	         Calculate the year number used in the Japanese calendar,
        -: 3928:	         based on the first historical record of the 60-year cycle
        -: 3929:	         from 660 BCE.
        -: 3930:	       */
    #####: 3931:	      k = y + 660 + extra;
    #####: 3932:	      sprintf (s2, "%s %d-%d",
    #####: 3933:		       _(hd_text[HD_JAPANESE_NEW_YEARS_DAY].ht_text), k,
        -: 3934:		       (lm < 0) ? 0 : lm);
    #####: 3935:	      holiday (*init_data, detected, s2, ptr_cc_id,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 3936:		       (cc_mode > 0) ? "+" : DIS_HLS_PREF, d, m, y, hd_elems,
        -: 3937:		       fday, count);
    #####: 3938:	      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3939:		*init_data = FALSE;
    #####: 3940:	      if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 3941:		{
        -: 3942:		  /*
        -: 3943:		     Compute the sexagesimal cycle data based on the year number
        -: 3944:		     used in the Chinese calendar, which is based on the first
        -: 3945:		     historical record of the 60-year cycle from 08-Mar-2637 BCE.
        -: 3946:		   */
    #####: 3947:		  k = y + 2637 + extra;
    #####: 3948:		  i = ((k - 1) / 60) + 1;
    #####: 3949:		  j = ((k - 1) % 60) + 1;
    #####: 3950:		  sprintf (s2, "%s %d/%02d-%02d %s-%s",
    #####: 3951:			   _(hd_text[HD_CHINESE_CYCLE].ht_text), i, j,
    #####: 3952:			   (lm < 0) ? 0 : lm, chi_stem[((j - 1) % 10)],
    #####: 3953:			   _(chi_branch[((j - 1) % 12)]));
    #####: 3954:		  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF,
call    0 never executed
        -: 3955:			   d, m, y, hd_elems, fday, count);
        -: 3956:		}
        -: 3957:	    }
    #####: 3958:	  if (cc_mode != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 3959:	    {
    #####: 3960:	      if (!cc_mode)
branch  0 never executed
branch  1 never executed
    #####: 3961:		j = 6;
        -: 3962:	      else
    #####: 3963:		j = 2;
    #####: 3964:	      for (i = 0; i < j; i++)
branch  0 never executed
branch  1 never executed
        -: 3965:		{
    #####: 3966:		  (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 3967:		  if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 3968:		    holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 3969:			     _(hd_text[HD_JAPANESE_NEW_YEARS_DAY].ht_text),
        -: 3970:			     ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m,
        -: 3971:			     y, hd_elems, fday, count);
        -: 3972:		}
        -: 3973:	      /*
        -: 3974:	         Detect the date of the first day of the Japanese calendar
        -: 3975:	         month 3.
        -: 3976:	       */
    #####: 3977:	      if (lm == 1 || lm == 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 3978:		cj++;
    #####: 3979:	      cj += 2;
    #####: 3980:	      num2date (conjunction_vector[cj] + 2, &d, &m, &y);
call    0 never executed
    #####: 3981:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 3982:		{
    #####: 3983:		  holiday (*init_data, detected,
call    0 never executed
    #####: 3984:			   _(hd_text[HD_MUSIC_WATER_BANQUET].ht_text),
        -: 3985:			   ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems, fday,
        -: 3986:			   count);
    #####: 3987:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 3988:		    *init_data = FALSE;
        -: 3989:		}
        -: 3990:	      /*
        -: 3991:	         Detect the date of the first day of the Japanese calendar
        -: 3992:	         month 4.
        -: 3993:	       */
    #####: 3994:	      if (lm == 3)
branch  0 never executed
branch  1 never executed
    #####: 3995:		cj++;
    #####: 3996:	      num2date (conjunction_vector[++cj] + 7, &d, &m, &y);
call    0 never executed
    #####: 3997:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 3998:		{
    #####: 3999:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4000:			   _(hd_text[HD_BUDDHAS_BIRTHDAY].ht_text), ptr_cc_id,
        -: 4001:			   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 4002:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4003:		    *init_data = FALSE;
        -: 4004:		}
        -: 4005:	      /*
        -: 4006:	         Detect the date of the first day of the Japanese calendar
        -: 4007:	         month 5.
        -: 4008:	       */
    #####: 4009:	      if (lm == 4)
branch  0 never executed
branch  1 never executed
    #####: 4010:		cj++;
    #####: 4011:	      num2date (conjunction_vector[++cj] + 4, &d, &m, &y);
call    0 never executed
    #####: 4012:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4013:		{
    #####: 4014:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4015:			   _(hd_text[HD_CHILDRENS_DAY].ht_text), ptr_cc_id,
        -: 4016:			   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 4017:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4018:		    *init_data = FALSE;
        -: 4019:		}
        -: 4020:	      /*
        -: 4021:	         Detect the date of the first day of the Japanese calendar
        -: 4022:	         month 7.
        -: 4023:	       */
    #####: 4024:	      if (lm == 5 || lm == 6)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4025:		cj++;
    #####: 4026:	      cj += 2;
    #####: 4027:	      num2date (conjunction_vector[cj] + 6, &d, &m, &y);
call    0 never executed
    #####: 4028:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4029:		{
    #####: 4030:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4031:			   _(hd_text[HD_STAR_FESTIVAL].ht_text), ptr_cc_id,
        -: 4032:			   DIS_HLS_PREF, d, m, y, hd_elems, fday, count);
    #####: 4033:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4034:		    *init_data = FALSE;
        -: 4035:		}
    #####: 4036:	      num2date (conjunction_vector[cj] + 14, &d, &m, &y);
call    0 never executed
    #####: 4037:	      for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 4038:		{
    #####: 4039:		  if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4040:		    {
    #####: 4041:		      holiday (*init_data, detected,
call    0 never executed
    #####: 4042:			       _(hd_text[HD_FEAST_OF_FORTUNE].ht_text),
        -: 4043:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 4044:			       fday, count);
    #####: 4045:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4046:			*init_data = FALSE;
    #####: 4047:		      (void) next_date (&d, &m, &y);
call    0 never executed
        -: 4048:		    }
        -: 4049:		}
        -: 4050:	      /*
        -: 4051:	         Detect the date of the first day of the Japanese calendar
        -: 4052:	         month 8.
        -: 4053:	       */
    #####: 4054:	      if (lm == 7)
branch  0 never executed
branch  1 never executed
    #####: 4055:		cj++;
    #####: 4056:	      num2date (conjunction_vector[++cj] + 14, &d, &m, &y);
call    0 never executed
    #####: 4057:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4058:		{
    #####: 4059:		  holiday (*init_data, detected,
branch  0 never executed
branch  1 never executed
call    2 never executed
    #####: 4060:			   _(hd_text[HD_MID_AUTUMN_FESTIVAL].ht_text),
        -: 4061:			   ptr_cc_id, (cc_mode) ? "+" : DIS_HLS_PREF, d, m, y,
        -: 4062:			   hd_elems, fday, count);
    #####: 4063:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4064:		    *init_data = FALSE;
        -: 4065:		}
        -: 4066:	      /*
        -: 4067:	         Detect the date of the first day of the Japanese calendar
        -: 4068:	         month 9.
        -: 4069:	       */
    #####: 4070:	      if (lm == 8)
branch  0 never executed
branch  1 never executed
    #####: 4071:		cj++;
    #####: 4072:	      num2date (conjunction_vector[++cj] + 8, &d, &m, &y);
call    0 never executed
    #####: 4073:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4074:		{
    #####: 4075:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4076:			   _(hd_text[HD_CHRYSANTHENUM_DAY].ht_text),
        -: 4077:			   ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems, fday,
        -: 4078:			   count);
    #####: 4079:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4080:		    *init_data = FALSE;
        -: 4081:		}
        -: 4082:	      /*
        -: 4083:	         Detect the date of the first day of the Japanese calendar
        -: 4084:	         month 10.
        -: 4085:	       */
    #####: 4086:	      if (lm == 9)
branch  0 never executed
branch  1 never executed
    #####: 4087:		cj++;
    #####: 4088:	      num2date (conjunction_vector[++cj] + 5, &d, &m, &y);
call    0 never executed
    #####: 4089:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4090:		{
    #####: 4091:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4092:			   _(hd_text[HD_BODHIDHARMAS_BIRTHDAY].ht_text),
        -: 4093:			   ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems, fday,
        -: 4094:			   count);
    #####: 4095:		  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4096:		    *init_data = FALSE;
        -: 4097:		}
        -: 4098:	      /*
        -: 4099:	         Detect the date of the first day of the Japanese calendar
        -: 4100:	         month 12.
        -: 4101:	       */
    #####: 4102:	      if (lm == 10 || lm == 11)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4103:		cj++;
    #####: 4104:	      cj += 2;
    #####: 4105:	      num2date (conjunction_vector[cj] + 12, &d, &m, &y);
call    0 never executed
    #####: 4106:	      if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4107:		{
    #####: 4108:		  i = day_of_year (d, m, y);
call    0 never executed
    #####: 4109:		  if ((i != ssd1) && (i != ssd2))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4110:		    {
    #####: 4111:		      ssd2 = i;
    #####: 4112:		      holiday (*init_data, detected,
call    0 never executed
    #####: 4113:			       _(hd_text[HD_SOOT_SWEEPING_DAY].ht_text),
        -: 4114:			       ptr_cc_id, DIS_HLS_PREF, d, m, y, hd_elems,
        -: 4115:			       fday, count);
    #####: 4116:		      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4117:			*init_data = FALSE;
        -: 4118:		    }
        -: 4119:		}
        -: 4120:	    }
    #####: 4121:	  if (check_twice)
branch  0 never executed
branch  1 never executed
        -: 4122:	    {
    #####: 4123:	      check_twice = FALSE;
    #####: 4124:	      y = year + 1;
    #####: 4125:	      extra++;
    #####: 4126:	      goto LABEL_japanese_new_year_twice;
        -: 4127:	    }
        -: 4128:	}
        -: 4129:    }
    #####: 4130:}
        -: 4131:
        -: 4132:
        -: 4133:
        -: 4134:void
function multicultural_new_year_hdy called 0 returned 0% blocks executed 0%
    #####: 4135:multicultural_new_year_hdy (init_data, detected, year, hd_elems, fday, count)
        -: 4136:     Bool *init_data;
        -: 4137:     const Bool detected;
        -: 4138:     const int year;
        -: 4139:     int *hd_elems;
        -: 4140:     const int fday;
        -: 4141:     const int count;
        -: 4142:/*!
        -: 4143:   Manages all Multicultural New_Year's_Day holidays, which are majorly
        -: 4144:     based on calendar systems different the Julian/Gregorian calendar system.
        -: 4145:*/
        -: 4146:{
        -: 4147:  auto double x;
        -: 4148:  auto Ulint mjd;
        -: 4149:  auto int d;
        -: 4150:  auto int m;
        -: 4151:  auto int y;
        -: 4152:
        -: 4153:
    #####: 4154:  bahai_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY);
call    0 never executed
    #####: 4155:  celtic_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY);
call    0 never executed
    #####: 4156:  chinese_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY,
call    0 never executed
        -: 4157:	       FALSE);
    #####: 4158:  hebrew_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY);
call    0 never executed
    #####: 4159:  islamic_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY);
call    0 never executed
    #####: 4160:  japanese_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY,
call    0 never executed
        -: 4161:		FALSE);
    #####: 4162:  orthodox_hdy (init_data, detected, 0, year, hd_elems, fday, count, HD_MCNY,
call    0 never executed
        -: 4163:		TRUE);
    #####: 4164:  orthodox_hdy (init_data, detected, 0, year, hd_elems, fday, count, HD_MCNY,
call    0 never executed
        -: 4165:		FALSE);
    #####: 4166:  persian_hdy (init_data, detected, year, hd_elems, fday, count, HD_MCNY);
call    0 never executed
    #####: 4167:  if (year > 1791)
branch  0 never executed
branch  1 never executed
        -: 4168:    {
        -: 4169:      /*
        -: 4170:         Calculate the year number used in the French Revolutionary
        -: 4171:         (Republican) calendar, based on the date of the autumnal
        -: 4172:         equinox as it occurs in Paris, FR.
        -: 4173:       */
    #####: 4174:      ptr_cc_id = _("FRR");
    #####: 4175:      y = year;
    #####: 4176:      mjd = (Ulint) equinox_solstice (NH_AE, &d, &m, &y, 0, 9);
call    0 never executed
    #####: 4177:      if (mjd != (Ulint) SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4178:	{
    #####: 4179:	  sprintf (s2, "%s %d", _(hd_text[HD_FRENCH_REVOLUTIONARY].ht_text),
        -: 4180:		   year - 1791);
    #####: 4181:	  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d, m,
call    0 never executed
        -: 4182:		   year, hd_elems, fday, count);
        -: 4183:	}
        -: 4184:    }
    #####: 4185:  if (year > 1887)
branch  0 never executed
branch  1 never executed
        -: 4186:    {
        -: 4187:      /*
        -: 4188:         Calculate the year number used in the Thai ***CIVIL***
        -: 4189:         (western oriented) calendar based on the Buddhist Era.
        -: 4190:       */
    #####: 4191:      ptr_cc_id = "TH";
    #####: 4192:      if (year > 1939)
branch  0 never executed
branch  1 never executed
    #####: 4193:	m = MONTH_MIN;
        -: 4194:      else
    #####: 4195:	m = 4;
    #####: 4196:      if (year <= greg->year)
branch  0 never executed
branch  1 never executed
        -: 4197:	{
    #####: 4198:	  if (m == MONTH_MIN)
branch  0 never executed
branch  1 never executed
        -: 4199:	    {
    #####: 4200:	      mjd = date2num (DAY_MIN, m, year + 1);
call    0 never executed
    #####: 4201:	      mjd -= (((year + 1) / 100) - ((year + 1) / 400) - 2);
    #####: 4202:	      num2date (mjd, &d, &m, &y);
call    0 never executed
    #####: 4203:	      d = day_of_year (d, m, y);
call    0 never executed
    #####: 4204:	      m = year + 1;
        -: 4205:	    }
        -: 4206:	  else
        -: 4207:	    {
    #####: 4208:	      d = day_of_year (DAY_MIN, m, year);
call    0 never executed
    #####: 4209:	      d -= ((year / 100) - (year / 400) - 2);
    #####: 4210:	      m = year;
        -: 4211:	    }
        -: 4212:	}
        -: 4213:      else
        -: 4214:	{
    #####: 4215:	  d = day_of_year (DAY_MIN, m, year);
call    0 never executed
    #####: 4216:	  m = year;
        -: 4217:	}
    #####: 4218:      sprintf (s2, "%s %d", _(hd_text[HD_THAI_NEW_YEARS_DAY].ht_text),
        -: 4219:	       m + 543);
    #####: 4220:      holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d, 0, year,
call    0 never executed
        -: 4221:	       hd_elems, fday, count);
        -: 4222:    }
    #####: 4223:  if (year > 1956)
branch  0 never executed
branch  1 never executed
        -: 4224:    {
        -: 4225:      /*
        -: 4226:         Calculate the year number used in the Indian **CIVIL** (reformed)
        -: 4227:         calendar corresponding to Caitra 1.
        -: 4228:       */
    #####: 4229:      ptr_cc_id = "IN";
    #####: 4230:      sprintf (s2, "%s %d", _(hd_text[HD_INDIAN_NEW_YEARS_DAY].ht_text),
        -: 4231:	       year - 78);
    #####: 4232:      d = 22 - (days_of_february (year) == 29);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4233:      if (year <= greg->year)
branch  0 never executed
branch  1 never executed
    #####: 4234:	d -= 13;
    #####: 4235:      holiday (*init_data, detected, s2, ptr_cc_id,
call    0 never executed
        -: 4236:	       DIS_HLS_PREF, d, 3, year, hd_elems, fday, count);
        -: 4237:    }
    #####: 4238:  if (year > 551)
branch  0 never executed
branch  1 never executed
        -: 4239:    {
        -: 4240:      /*
        -: 4241:         Calculate the year number used in the Old-Armenic calendar,
        -: 4242:         based on the Epoch AD 11-Jul-0552.
        -: 4243:       */
    #####: 4244:      ptr_cc_id = _("AMO");
    #####: 4245:      mjd = date2num (DAY_MIN, MONTH_MIN, year) - 201081L;
call    0 never executed
    #####: 4246:      x = mjd / (double) DAY_LAST;
    #####: 4247:      y = (int) x + 1;
    #####: 4248:      x = ROUND ((1.0 - (x - (Ulint) x)) * (double) DAY_LAST);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4249:      sprintf (s2, "%s %d", _(hd_text[HD_OLD_ARMENIC_NEW_YEARS_DAY].ht_text),
        -: 4250:	       y);
    #####: 4251:      holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, (int) x, 0,
call    0 never executed
        -: 4252:	       year, hd_elems, fday, count);
    #####: 4253:      if ((days_of_february (year) == 29) && ((int) x == 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 4254:	{
    #####: 4255:	  sprintf (s2, "%s %d",
    #####: 4256:		   _(hd_text[HD_OLD_ARMENIC_NEW_YEARS_DAY].ht_text), y + 1);
    #####: 4257:	  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF,
call    0 never executed
        -: 4258:		   DAY_LAST + 1, 0, year, hd_elems, fday, count);
        -: 4259:	}
        -: 4260:    }
        -: 4261:  /*
        -: 4262:     Calculate the year number and the Sothisperiod used in the Old-Egyptic
        -: 4263:     calendar, based on the Epoch 19-Jul-4241 BCE.
        -: 4264:   */
    #####: 4265:  ptr_cc_id = _("EGO");
    #####: 4266:  mjd = date2num (DAY_MIN, MONTH_MIN, year) + MIN_BCE_TO_1_CE - 172235L;
call    0 never executed
    #####: 4267:  m = ((int) (mjd / 533256L)) + 1;
    #####: 4268:  x = mjd / (double) DAY_LAST;
    #####: 4269:  y = (int) x + 1;
    #####: 4270:  x = ROUND ((1.0 - (x - (Ulint) x)) * (double) DAY_LAST);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4271:  sprintf (s2, "%s %d-%d", _(hd_text[HD_OLD_EGYPTIC_NEW_YEARS_DAY].ht_text),
        -: 4272:	   y, m);
    #####: 4273:  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, (int) x, 0,
call    0 never executed
        -: 4274:	   year, hd_elems, fday, count);
    #####: 4275:  if ((days_of_february (year) == 29) && ((int) x == 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -: 4276:    {
    #####: 4277:      sprintf (s2, "%s %d-%d",
    #####: 4278:	       _(hd_text[HD_OLD_EGYPTIC_NEW_YEARS_DAY].ht_text), y + 1, m);
    #####: 4279:      holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF,
call    0 never executed
        -: 4280:	       DAY_LAST + 1, 0, year, hd_elems, fday, count);
        -: 4281:    }
        -: 4282:  /*
        -: 4283:     Calculate the year number used in the Ethiopic calendar.
        -: 4284:   */
    #####: 4285:  ptr_cc_id = "ET";
    #####: 4286:  d = day_of_year (29, 8, year)
call    0 never executed
    #####: 4287:    + ((year & 3) == 3) + julian_gregorian_diff (29, 8, year);
call    0 never executed
    #####: 4288:  sprintf (s2, "%s %d", _(hd_text[HD_ETHIOPIC_NEW_YEARS_DAY].ht_text),
        -: 4289:	   year - 7);
    #####: 4290:  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d, 0, year,
call    0 never executed
        -: 4291:	   hd_elems, fday, count);
    #####: 4292:  if (year > 283)
branch  0 never executed
branch  1 never executed
        -: 4293:    {
        -: 4294:      /*
        -: 4295:         Calculate the year number used in the Coptic calendar.
        -: 4296:       */
    #####: 4297:      ptr_cc_id = "EG";
    #####: 4298:      sprintf (s2, "%s %d", _(hd_text[HD_COPTIC_NEW_YEARS_DAY].ht_text),
        -: 4299:	       year - 283);
    #####: 4300:      holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d, 0, year,
call    0 never executed
        -: 4301:	       hd_elems, fday, count);
        -: 4302:    }
    #####: 4303:}
        -: 4304:
        -: 4305:
        -: 4306:
        -: 4307:void
function old_egyptic_mth called 0 returned 0% blocks executed 0%
    #####: 4308:old_egyptic_mth (init_data, detected, year, hd_elems, fday, count, do_egyptic)
        -: 4309:     Bool *init_data;
        -: 4310:     const Bool detected;
        -: 4311:     const int year;
        -: 4312:     int *hd_elems;
        -: 4313:     const int fday;
        -: 4314:     const int count;
        -: 4315:     const Bool do_egyptic;
        -: 4316:/*!
        -: 4317:   Manages all Old-Armenic/Old-Egyptic calendar based months since
        -: 4318:     AD 11-Jul-0552 (Old-Armenic).
        -: 4319:*/
        -: 4320:{
    #####: 4321:  if (do_egyptic || (!do_egyptic && (year > 551)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 4322:    {
        -: 4323:      auto double mjd;
        -: 4324:      auto Ulint edate;
        -: 4325:      register int sothisperiod;
        -: 4326:      register int em;
        -: 4327:      register int ey;
        -: 4328:      register int i;
        -: 4329:      register int n;
        -: 4330:      auto int d;
        -: 4331:      auto int m;
        -: 4332:      auto int y;
    #####: 4333:      auto Bool is_special_case = FALSE;
        -: 4334:
        -: 4335:
    #####: 4336:      if (do_egyptic)
branch  0 never executed
branch  1 never executed
    #####: 4337:	ptr_cc_id = _("EGO");
        -: 4338:      else
    #####: 4339:	ptr_cc_id = _("AMO");
    #####: 4340:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 4341:	if (do_egyptic || (!do_egyptic && (n > 551)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 4342:	  {
        -: 4343:	    /*
        -: 4344:	       Detect the Old-Armenian/Old-Egyptian_New_Year's_Day date and
        -: 4345:	       calculate the year number used in the Old-Armenic calendar
        -: 4346:	       -- based on the Epoch AD 11-Jul-0552 -- respectively,
        -: 4347:	       calculate the year number used in the Old-Egyptic calendar
        -: 4348:	       -- based on the Epoch 19-Jul-4241 BCE --.
        -: 4349:	     */
    #####: 4350:	    if (do_egyptic)
branch  0 never executed
branch  1 never executed
        -: 4351:	      {
    #####: 4352:		mjd =
    #####: 4353:		  date2num (DAY_MIN, MONTH_MIN,
call    0 never executed
    #####: 4354:			    n) + MIN_BCE_TO_1_CE - 172235L;
    #####: 4355:		sothisperiod = ((int) (mjd / 533256L)) + 1;
        -: 4356:	      }
        -: 4357:	    else
        -: 4358:	      {
    #####: 4359:		mjd = date2num (DAY_MIN, MONTH_MIN, n) - 201081L;
call    0 never executed
    #####: 4360:		sothisperiod = SPECIAL_VALUE;
        -: 4361:	      }
    #####: 4362:	    mjd = mjd / (double) DAY_LAST;
    #####: 4363:	    ey = (int) mjd + 1;
    #####: 4364:	    mjd = ROUND ((1.0 - (mjd - (Ulint) mjd)) * (double) DAY_LAST);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4365:	    if ((n == year)
branch  0 never executed
branch  1 never executed
    #####: 4366:		&& (days_of_february (n - 1) == 29)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 4367:		&& ((int) mjd == DAY_LAST))
branch  0 never executed
branch  1 never executed
        -: 4368:	      {
    #####: 4369:		is_special_case = TRUE;
    #####: 4370:		em = MONTH_MIN;
    #####: 4371:		ey--;
    #####: 4372:		mjd = 30.0;
        -: 4373:	      }
        -: 4374:	    else
    #####: 4375:	      em = 0;
    #####: 4376:	    (void) doy2date ((int) mjd, (days_of_february (n) == 29), &d, &m);
call    0 never executed
call    1 never executed
    #####: 4377:	    edate = date2num (d, m, n);
call    0 never executed
        -: 4378:	    /*
        -: 4379:	       And manage all Old-Armenic/Old-Egyptic calendar months.
        -: 4380:	     */
    #####: 4381:	    for (i = 0; i <= MONTH_MAX; em++, i++)
branch  0 never executed
branch  1 never executed
        -: 4382:	      {
    #####: 4383:		num2date (edate, &d, &m, &y);
call    0 never executed
    #####: 4384:		if (y == year)
branch  0 never executed
branch  1 never executed
        -: 4385:		  {
    #####: 4386:		    if (is_special_case)
branch  0 never executed
branch  1 never executed
        -: 4387:		      {
    #####: 4388:			if (i == MONTH_MAX - 1)
branch  0 never executed
branch  1 never executed
    #####: 4389:			  edate -= 25;
    #####: 4390:			else if (i == MONTH_MAX)
branch  0 never executed
branch  1 never executed
        -: 4391:			  {
    #####: 4392:			    em = 0;
    #####: 4393:			    ey++;
        -: 4394:			  }
        -: 4395:		      }
    #####: 4396:		    ocs_monthtext (init_data, detected, ptr_cc_id, d, m, year,
branch  0 never executed
branch  1 never executed
call    2 never executed
        -: 4397:				   (em == MONTH_MAX),
        -: 4398:				   (em == MONTH_MAX) ? em : em + 1, ey,
        -: 4399:				   sothisperiod, hd_elems, fday, count);
        -: 4400:		  }
    #####: 4401:		edate += 30;
        -: 4402:	      }
    #####: 4403:	    if ((n == year)
branch  0 never executed
branch  1 never executed
    #####: 4404:		&& (days_of_february (n) == 29) && ((int) mjd == 1))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
    #####: 4405:	      ocs_monthtext (init_data, detected, ptr_cc_id, DAY_LAST + 1, 0,
call    0 never executed
        -: 4406:			     year, FALSE, MONTH_MIN, ey + 1, sothisperiod,
        -: 4407:			     hd_elems, fday, count);
        -: 4408:	  }
        -: 4409:    }
    #####: 4410:}
        -: 4411:
        -: 4412:
        -: 4413:
        -: 4414:void
function orthodox_hdy called 0 returned 0% blocks executed 0%
    #####: 4415:orthodox_hdy (init_data, detected, easter, year, hd_elems, fday, count, cc,
        -: 4416:	      is_new_calendar)
        -: 4417:     Bool *init_data;
        -: 4418:     const Bool detected;
        -: 4419:     int easter;
        -: 4420:     const int year;
        -: 4421:     int *hd_elems;
        -: 4422:     const int fday;
        -: 4423:     const int count;
        -: 4424:     const char *cc;
        -: 4425:     const Bool is_new_calendar;
        -: 4426:/*!
        -: 4427:   Manages all Orthodox Christian Eastern churches calendar based holidays.
        -: 4428:     If `is_new_calendar' is set to TRUE, the new calendar holidays are
        -: 4429:     computed, otherwise the old calendar holidays.
        -: 4430:*/
        -: 4431:{
    #####: 4432:  register int i = year;
        -: 4433:  register int cc_mode;
        -: 4434:  auto int greg_diff;
        -: 4435:  auto int d;
        -: 4436:  auto int m;
        -: 4437:  auto int y;
        -: 4438:
        -: 4439:
    #####: 4440:  if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 4441:    cc_mode = 0;
    #####: 4442:  else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 4443:    cc_mode = SPECIAL_VALUE;
        -: 4444:  else
    #####: 4445:    abort ();			/* Error, invalid case! */
call    0 never executed
    #####: 4446:  if (is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4447:    ptr_cc_id = _("OxN");
        -: 4448:  else
    #####: 4449:    ptr_cc_id = _("OxO");
        -: 4450:  /*
        -: 4451:     Process the holiday data.
        -: 4452:   */
    #####: 4453:  if (cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4454:    {
    #####: 4455:      d = DAY_MIN;
    #####: 4456:      if (!is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4457:	d += julian_gregorian_diff (d, MONTH_MIN, year);
call    0 never executed
    #####: 4458:      else if (year <= greg->year)
branch  0 never executed
branch  1 never executed
        -: 4459:	{
    #####: 4460:	  greg_diff = (year / 100) - (year / 400) - 2;
    #####: 4461:	  if (greg_diff < 0)
branch  0 never executed
branch  1 never executed
        -: 4462:	    {
        -: 4463:	      auto Ulint mjd;
        -: 4464:
        -: 4465:
    #####: 4466:	      i = y = year + 1;
    #####: 4467:	      greg_diff = (y / 100) - (y / 400) - 2;
    #####: 4468:	      mjd = date2num (d, MONTH_MIN, y);
call    0 never executed
    #####: 4469:	      num2date (mjd + greg_diff, &d, &m, &y);
call    0 never executed
    #####: 4470:	      d = day_of_year (d, m, y);
call    0 never executed
        -: 4471:	    }
        -: 4472:	  else
    #####: 4473:	    d += greg_diff;
        -: 4474:	}
    #####: 4475:      sprintf (s2, "%s %d", _(hd_text[HD_ORTHODOX_NEW_YEARS_DAY].ht_text), i);
    #####: 4476:      holiday (*init_data, detected, s2, ptr_cc_id,
call    0 never executed
        -: 4477:	       DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4478:      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4479:	*init_data = FALSE;
        -: 4480:    }
        -: 4481:  else
        -: 4482:    {
    #####: 4483:      easter = orthodox_easter (year, &greg_diff, 1924, 3, 10, 22);
call    0 never executed
    #####: 4484:      holiday (*init_data, detected, _(hd_text[HD_ASH_MONDAY].ht_text),
call    0 never executed
        -: 4485:	       ptr_cc_id, DIS_HLS_PREF, easter - 48, 0, year, hd_elems, fday,
        -: 4486:	       count);
    #####: 4487:      if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4488:	*init_data = FALSE;
    #####: 4489:      holiday (*init_data, detected, _(hd_text[HD_PALM_SUNDAY].ht_text),
call    0 never executed
        -: 4490:	       ptr_cc_id, DIS_HLS_PREF, easter - DAY_MAX, 0, year, hd_elems,
        -: 4491:	       fday, count);
    #####: 4492:      holiday (*init_data, detected, _(hd_text[HD_MAUNDY_THURSDAY].ht_text),
call    0 never executed
        -: 4493:	       ptr_cc_id, DIS_HLS_PREF, easter - 3, 0, year, hd_elems, fday,
        -: 4494:	       count);
    #####: 4495:      holiday (*init_data, detected, _(hd_text[HD_GOOD_FRIDAY].ht_text),
call    0 never executed
        -: 4496:	       ptr_cc_id, DIS_HLS_PREF, easter - 2, 0, year, hd_elems, fday,
        -: 4497:	       count);
    #####: 4498:      holiday (*init_data, detected, _(hd_text[HD_GOOD_SATURDAY].ht_text),
call    0 never executed
        -: 4499:	       ptr_cc_id, DIS_HLS_PREF, easter - 1, 0, year, hd_elems, fday,
        -: 4500:	       count);
    #####: 4501:      holiday (*init_data, detected, _(hd_text[HD_EASTER_SUNDAY].ht_text),
call    0 never executed
        -: 4502:	       ptr_cc_id, DIS_HLS_PREF, easter, 0, year, hd_elems, fday,
        -: 4503:	       count);
    #####: 4504:      holiday (*init_data, detected,
call    0 never executed
    #####: 4505:	       _(hd_text[HD_CHRISTS_ASCENSION_DAY].ht_text), ptr_cc_id,
        -: 4506:	       DIS_HLS_PREF, easter + 39, 0, year, hd_elems, fday, count);
    #####: 4507:      holiday (*init_data, detected, _(hd_text[HD_PENTECOST].ht_text),
call    0 never executed
        -: 4508:	       ptr_cc_id, DIS_HLS_PREF, easter + 49, 0, year, hd_elems, fday,
        -: 4509:	       count);
    #####: 4510:      d = DAY_MIN;
    #####: 4511:      if (!is_new_calendar && (year > 1924))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4512:	d += greg_diff;
    #####: 4513:      holiday (*init_data, detected,
call    0 never executed
    #####: 4514:	       _(hd_text[HD_ORTHODOX_NEW_YEARS_DAY].ht_text), ptr_cc_id,
        -: 4515:	       DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4516:      d = 6;
    #####: 4517:      if (!is_new_calendar && (year > 1924))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4518:	d += greg_diff;
    #####: 4519:      holiday (*init_data, detected, _(hd_text[HD_THREE_KINGS_DAY].ht_text),
call    0 never executed
        -: 4520:	       ptr_cc_id, DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4521:      d = 14;
    #####: 4522:      if (!is_new_calendar && (year > 1924))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4523:	d += greg_diff;
    #####: 4524:      holiday (*init_data, detected,
call    0 never executed
    #####: 4525:	       _(hd_text[HD_JESUS_CIRCUMCISION].ht_text), ptr_cc_id,
        -: 4526:	       DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4527:      d = day_of_year (2, 2, year);
call    0 never executed
    #####: 4528:      if (!is_new_calendar && (year > 1924))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4529:	d += greg_diff;
    #####: 4530:      holiday (*init_data, detected, _(hd_text[HD_MARYS_CANDLEMAS].ht_text),
call    0 never executed
        -: 4531:	       ptr_cc_id, DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4532:      d = day_of_year (25, 3, year);
call    0 never executed
    #####: 4533:      if (!is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4534:	d += greg_diff;
    #####: 4535:      holiday (*init_data, detected,
call    0 never executed
    #####: 4536:	       _(hd_text[HD_MARYS_ANNUNCIATION_DAY].ht_text), ptr_cc_id,
        -: 4537:	       DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4538:      d = day_of_year (6, 8, year);
call    0 never executed
    #####: 4539:      if (!is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4540:	d += greg_diff;
    #####: 4541:      holiday (*init_data, detected,
call    0 never executed
    #####: 4542:	       _(hd_text[HD_TRANSFIGURATION_DAY].ht_text), ptr_cc_id,
        -: 4543:	       DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4544:      d = day_of_year (15, 8, year);
call    0 never executed
    #####: 4545:      if (!is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4546:	d += greg_diff;
    #####: 4547:      holiday (*init_data, detected,
call    0 never executed
    #####: 4548:	       _(hd_text[HD_MARYS_ASCENSION_DAY].ht_text), ptr_cc_id,
        -: 4549:	       DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4550:      d = day_of_year (8, 9, year);
call    0 never executed
    #####: 4551:      if (!is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4552:	d += greg_diff;
    #####: 4553:      holiday (*init_data, detected, _(hd_text[HD_MARYS_NATIVITY].ht_text),
call    0 never executed
        -: 4554:	       ptr_cc_id, DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4555:      d = day_of_year (14, 9, year);
call    0 never executed
    #####: 4556:      if (!is_new_calendar)
branch  0 never executed
branch  1 never executed
    #####: 4557:	d += greg_diff;
    #####: 4558:      holiday (*init_data, detected, _(hd_text[HD_CROSS_RAISING_DAY].ht_text),
call    0 never executed
        -: 4559:	       ptr_cc_id, DIS_HLS_PREF, d, 0, year, hd_elems, fday, count);
    #####: 4560:      if (is_new_calendar)
branch  0 never executed
branch  1 never executed
        -: 4561:	{
    #####: 4562:	  holiday (*init_data, detected,
call    0 never executed
    #####: 4563:		   _(hd_text[HD_ALL_SAINTS_DAY].ht_text), ptr_cc_id,
        -: 4564:		   DIS_HLS_PREF, DAY_MIN, 11, year, hd_elems, fday, count);
    #####: 4565:	  holiday (*init_data, detected, _(hd_text[HD_ALL_SOULS_DAY].ht_text),
call    0 never executed
        -: 4566:		   ptr_cc_id, DIS_HLS_PREF, 2, 11, year, hd_elems, fday,
        -: 4567:		   count);
        -: 4568:	}
    #####: 4569:      d = 24;
    #####: 4570:      m = MONTH_MAX;
    #####: 4571:      if (!is_new_calendar && (year != 1924))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4572:	{
    #####: 4573:	  y = year - 1;
    #####: 4574:	  for (i = 0; i < greg_diff; i++)
branch  0 never executed
branch  1 never executed
    #####: 4575:	    (void) next_date (&d, &m, &y);
call    0 never executed
        -: 4576:	}
    #####: 4577:      if (is_new_calendar || (!is_new_calendar && (year != 1924)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4578:	holiday (*init_data, detected, _(hd_text[HD_CHRISTMAS_EVE].ht_text),
call    0 never executed
        -: 4579:		 ptr_cc_id, DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
    #####: 4580:      d = 25;
    #####: 4581:      m = MONTH_MAX;
    #####: 4582:      if (!is_new_calendar && (year != 1924))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 4583:	{
    #####: 4584:	  y = year - 1;
    #####: 4585:	  for (i = 0; i < greg_diff; i++)
branch  0 never executed
branch  1 never executed
    #####: 4586:	    (void) next_date (&d, &m, &y);
call    0 never executed
        -: 4587:	}
    #####: 4588:      if (is_new_calendar || (!is_new_calendar && (year != 1924)))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 4589:	holiday (*init_data, detected, _(hd_text[HD_CHRISTMAS_DAY].ht_text),
call    0 never executed
        -: 4590:		 ptr_cc_id, DIS_HLS_PREF, d, m, year, hd_elems, fday, count);
        -: 4591:    }
    #####: 4592:}
        -: 4593:
        -: 4594:
        -: 4595:
        -: 4596:void
function persian_hdy called 0 returned 0% blocks executed 0%
    #####: 4597:persian_hdy (init_data, detected, year, hd_elems, fday, count, cc)
        -: 4598:     Bool *init_data;
        -: 4599:     const Bool detected;
        -: 4600:     const int year;
        -: 4601:     int *hd_elems;
        -: 4602:     const int fday;
        -: 4603:     const int count;
        -: 4604:     const char *cc;
        -: 4605:/*!
        -: 4606:   Manages all Persian ``Jalaali'' calendar based holidays since AD 622.
        -: 4607:     Note that this function calculates the solar ``Jalaali'' calendar
        -: 4608:     astronomically and not arithmetically, so necessary calendar reformations
        -: 4609:     which must apply in the furture for the arithmetical solution are avoided.
        -: 4610:*/
        -: 4611:{
    #####: 4612:  if (year > 621)
branch  0 never executed
branch  1 never executed
        -: 4613:    {
        -: 4614:      auto double mjd;
        -: 4615:      auto Ulint pdate;
        -: 4616:      register int cc_mode;
        -: 4617:      register int i;
        -: 4618:      register int n;
        -: 4619:      auto int d;
        -: 4620:      auto int m;
    #####: 4621:      auto int y = year;
        -: 4622:      auto char *hdy_prefix;
        -: 4623:
        -: 4624:
    #####: 4625:      if (cc == (char *) NULL)
branch  0 never executed
branch  1 never executed
    #####: 4626:	cc_mode = 0;
    #####: 4627:      else if (!strcmp (cc, "AF"))
branch  0 never executed
branch  1 never executed
    #####: 4628:	cc_mode = 1;
    #####: 4629:      else if (!strcmp (cc, "AL"))
branch  0 never executed
branch  1 never executed
    #####: 4630:	cc_mode = 2;
    #####: 4631:      else if (!strcmp (cc, "AZ"))
branch  0 never executed
branch  1 never executed
    #####: 4632:	cc_mode = 3;
    #####: 4633:      else if (!strcmp (cc, "IR"))
branch  0 never executed
branch  1 never executed
    #####: 4634:	cc_mode = 4;
    #####: 4635:      else if (!strcmp (cc, "KG"))
branch  0 never executed
branch  1 never executed
    #####: 4636:	cc_mode = 5;
    #####: 4637:      else if (!strcmp (cc, "KZ"))
branch  0 never executed
branch  1 never executed
    #####: 4638:	cc_mode = 6;
    #####: 4639:      else if (!strcmp (cc, "TJ"))
branch  0 never executed
branch  1 never executed
    #####: 4640:	cc_mode = 7;
    #####: 4641:      else if (!strcmp (cc, "TM"))
branch  0 never executed
branch  1 never executed
    #####: 4642:	cc_mode = 8;
    #####: 4643:      else if (!strcmp (cc, "UZ"))
branch  0 never executed
branch  1 never executed
    #####: 4644:	cc_mode = 9;
    #####: 4645:      else if (!strcmp (cc, HD_MCNY))
branch  0 never executed
branch  1 never executed
    #####: 4646:	cc_mode = SPECIAL_VALUE;
        -: 4647:      else
    #####: 4648:	abort ();		/* Error, invalid case! */
call    0 never executed
    #####: 4649:      if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4650:	ptr_cc_id = _("Per");
        -: 4651:      /*
        -: 4652:         Detect the Persian_New_Year/Noruz, which is around the vernal equinox.
        -: 4653:         The calculation of the vernal equinox is based on Iraq local time,
        -: 4654:         not on UTC/GMT.  Tehran local time (not respecting Daylight Savings)
        -: 4655:         is UTC/GMT-3.5.
        -: 4656:       */
    #####: 4657:      mjd = equinox_solstice (NH_VE, &d, &m, &y, 3, 30);
call    0 never executed
    #####: 4658:      if (mjd != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4659:	{
    #####: 4660:	  if (mjd - (Ulint) mjd >= 0.5)
branch  0 never executed
branch  1 never executed
        -: 4661:	    /*
        -: 4662:	       If the vernal equinox appears at or after noon,
        -: 4663:	       the Persian_New_Year/Noruz is on the next day.
        -: 4664:	     */
    #####: 4665:	    (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 4666:	  mjd = day_of_year (d, m, y);
call    0 never executed
        -: 4667:	  /*
        -: 4668:	     Manage those holidays first, which cannot exceed the
        -: 4669:	     year bounds of a Julian/Gregorian calendar year.
        -: 4670:	   */
    #####: 4671:	  if (!cc_mode || cc_mode == SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 4672:	    hdy_prefix = DIS_HLS_PREF;
    #####: 4673:	  else if (cc_mode == 2)
branch  0 never executed
branch  1 never executed
    #####: 4674:	    hdy_prefix = DIS_HLS_PREF2;
        -: 4675:	  else
    #####: 4676:	    hdy_prefix = "+";
        -: 4677:	  /*
        -: 4678:	     Calculate the year number used in the Persian ``Jalaali'' calendar.
        -: 4679:	   */
    #####: 4680:	  sprintf (s2, "%s %d", _(hd_text[HD_PERSIAN_NEW_YEARS_DAY].ht_text),
        -: 4681:		   year - 621);
    #####: 4682:	  holiday (*init_data, detected, s2, ptr_cc_id, hdy_prefix, (int) mjd,
call    0 never executed
        -: 4683:		   0, year, hd_elems, fday, count);
    #####: 4684:	  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4685:	    *init_data = FALSE;
    #####: 4686:	  if (!cc_mode)
branch  0 never executed
branch  1 never executed
        -: 4687:	    {
    #####: 4688:	      for (i = 0; i < 5; i++)
branch  0 never executed
branch  1 never executed
        -: 4689:		{
    #####: 4690:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4691:			   _(hd_text[HD_MID_SPRING_FESTIVAL].ht_text),
    #####: 4692:			   ptr_cc_id, DIS_HLS_PREF, (int) mjd + 40 + i, 0,
        -: 4693:			   year, hd_elems, fday, count);
    #####: 4694:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4695:			   _(hd_text[HD_MIDSUMMER_DAY].ht_text), ptr_cc_id,
    #####: 4696:			   DIS_HLS_PREF, (int) mjd + 100 + i, 0, year,
        -: 4697:			   hd_elems, fday, count);
    #####: 4698:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4699:			   _(hd_text[HD_BRINGING_IN_THE_HARVEST_DAY].ht_text),
    #####: 4700:			   ptr_cc_id, DIS_HLS_PREF, (int) mjd + 175 + i, 0,
        -: 4701:			   year, hd_elems, fday, count);
    #####: 4702:		  holiday (*init_data, detected,
call    0 never executed
    #####: 4703:			   _(hd_text[HD_BRINGING_HOME_THE_HERDS_DAY].ht_text),
    #####: 4704:			   ptr_cc_id, DIS_HLS_PREF, (int) mjd + 205 + i, 0,
        -: 4705:			   year, hd_elems, fday, count);
        -: 4706:		}
        -: 4707:	      /*
        -: 4708:	         Manage those holidays last, which can exceed
        -: 4709:	         the year bounds of a Julian/Gregorian calendar year.
        -: 4710:	       */
    #####: 4711:	      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 4712:		if (n > 621)
branch  0 never executed
branch  1 never executed
        -: 4713:		  {
    #####: 4714:		    y = n;
    #####: 4715:		    mjd = equinox_solstice (NH_VE, &d, &m, &y, 3, 30);
call    0 never executed
    #####: 4716:		    if (mjd != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4717:		      {
    #####: 4718:			if (mjd - (Ulint) mjd >= 0.5)
branch  0 never executed
branch  1 never executed
    #####: 4719:			  (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 4720:			pdate = date2num (d, m, y) - 1;
call    0 never executed
        -: 4721:			/*
        -: 4722:			   And manage all ``critical'' holidays.
        -: 4723:			 */
    #####: 4724:			for (i = 0; i < 5; i++)
branch  0 never executed
branch  1 never executed
        -: 4725:			  {
    #####: 4726:			    num2date (pdate + 286 + i, &d, &m, &y);
call    0 never executed
    #####: 4727:			    if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 4728:			      holiday (*init_data, detected,
call    0 never executed
    #####: 4729:				       _(hd_text[HD_MID_YEAR_FESTIVAL].
        -: 4730:					 ht_text), ptr_cc_id, DIS_HLS_PREF, d,
        -: 4731:				       m, year, hd_elems, fday, count);
    #####: 4732:			    num2date (pdate + 361 + i, &d, &m, &y);
call    0 never executed
    #####: 4733:			    if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 4734:			      holiday (*init_data, detected,
call    0 never executed
    #####: 4735:				       _(hd_text[HD_ALL_SOULS_DAY].ht_text),
        -: 4736:				       ptr_cc_id, DIS_HLS_PREF, d, m, year,
        -: 4737:				       hd_elems, fday, count);
        -: 4738:			  }
    #####: 4739:			num2date (pdate + 310, &d, &m, &y);
call    0 never executed
    #####: 4740:			if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 4741:			  holiday (*init_data, detected,
call    0 never executed
    #####: 4742:				   _(hd_text[HD_FESTIVAL_OF_SADEH].ht_text),
        -: 4743:				   ptr_cc_id, DIS_HLS_PREF, d, m, year,
        -: 4744:				   hd_elems, fday, count);
        -: 4745:		      }
        -: 4746:		  }
        -: 4747:	    }
        -: 4748:	}
        -: 4749:    }
    #####: 4750:}
        -: 4751:
        -: 4752:
        -: 4753:
        -: 4754:void
function persian_mth called 0 returned 0% blocks executed 0%
    #####: 4755:persian_mth (init_data, detected, year, hd_elems, fday, count)
        -: 4756:     Bool *init_data;
        -: 4757:     const Bool detected;
        -: 4758:     const int year;
        -: 4759:     int *hd_elems;
        -: 4760:     const int fday;
        -: 4761:     const int count;
        -: 4762:/*!
        -: 4763:   Manages all Persian ``Jalaali'' calendar based months since AD 622.
        -: 4764:     Note that this function calculates the solar ``Jalaali'' calendar
        -: 4765:     astronomically and not arithmetically, so necessary calendar reformations
        -: 4766:     which must apply in the furture for the arithmetical solution are avoided.
        -: 4767:*/
        -: 4768:{
    #####: 4769:  if (year > 621)
branch  0 never executed
branch  1 never executed
        -: 4770:    {
        -: 4771:      auto double mjd;
        -: 4772:      auto Ulint pdate;
        -: 4773:      register int i;
        -: 4774:      register int n;
        -: 4775:      auto int d;
        -: 4776:      auto int m;
        -: 4777:      auto int y;
        -: 4778:
    #####: 4779:      ptr_cc_id = _("Per");
    #####: 4780:      for (n = year - 1; n <= year; n++)
branch  0 never executed
branch  1 never executed
    #####: 4781:	if (n > 621)
branch  0 never executed
branch  1 never executed
        -: 4782:	  {
    #####: 4783:	    y = n;
        -: 4784:	    /*
        -: 4785:	       Detect the Persian_New_Year/Noruz, which is around the vernal
        -: 4786:	       equinox.  The calculation of the vernal equinox is based on
        -: 4787:	       Iraq local time, not on UTC/GMT.  Tehran local time (not
        -: 4788:	       respecting Daylight Savings) is UTC/GMT-3.5.
        -: 4789:	     */
    #####: 4790:	    mjd = equinox_solstice (NH_VE, &d, &m, &y, 3, 30);
call    0 never executed
    #####: 4791:	    if (mjd != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4792:	      {
    #####: 4793:		if (mjd - (Ulint) mjd >= 0.5)
branch  0 never executed
branch  1 never executed
        -: 4794:		  /*
        -: 4795:		     If the vernal equinox appears at or after noon,
        -: 4796:		     the Persian_New_Year/Noruz is on the next day.
        -: 4797:		   */
    #####: 4798:		  (void) next_date (&d, &m, &y);
call    0 never executed
    #####: 4799:		pdate = date2num (d, m, y);
call    0 never executed
        -: 4800:		/*
        -: 4801:		   And manage all Persian calendar months.
        -: 4802:		 */
    #####: 4803:		for (i = MONTH_MIN; i <= MONTH_MAX; i++)
branch  0 never executed
branch  1 never executed
        -: 4804:		  {
    #####: 4805:		    num2date (pdate, &d, &m, &y);
call    0 never executed
    #####: 4806:		    if (y == year)
branch  0 never executed
branch  1 never executed
    #####: 4807:		      ocs_monthtext (init_data, detected, ptr_cc_id, d, m,
call    0 never executed
        -: 4808:				     year, FALSE, i, n - 621, SPECIAL_VALUE,
        -: 4809:				     hd_elems, fday, count);
    #####: 4810:		    pdate += ((i < 7) ? 31 : 30);
branch  0 never executed
branch  1 never executed
        -: 4811:		  }
        -: 4812:	      }
        -: 4813:	  }
        -: 4814:    }
    #####: 4815:}
        -: 4816:
        -: 4817:
        -: 4818:
        -: 4819:void
function zodiacal_marker_hdy called 0 returned 0% blocks executed 0%
    #####: 4820:zodiacal_marker_hdy (init_data, detected, year, hd_elems, fday, count)
        -: 4821:     Bool *init_data;
        -: 4822:     const Bool detected;
        -: 4823:     const int year;
        -: 4824:     int *hd_elems;
        -: 4825:     const int fday;
        -: 4826:     const int count;
        -: 4827:/*!
        -: 4828:   Manages all Zodiacal/Solar Seasonal Marker based holidays.
        -: 4829:     Calculations are done for a line at a definite meridian expressed as a
        -: 4830:     time value.  This time value is given by the global `time_hour_offset'
        -: 4831:     variable and by the global `time_min_offset' variable.  If HOUR and MIN
        -: 4832:     are set to zero, calculations are made for Universal Time (UTC/GMT).  If
        -: 4833:     HOUR and MIN have a positive sign, UTC/GMT calculations are made for
        -: 4834:     meridians East of Greenwich, otherwise for meridians West of Greenwich.
        -: 4835:*/
        -: 4836:{
        -: 4837:  auto double n;
        -: 4838:  auto double mjd;
        -: 4839:  register int i;
        -: 4840:  auto int the_min;
        -: 4841:  auto int the_hour;
        -: 4842:  auto int d;
        -: 4843:  auto int m;
    #####: 4844:  auto int y = year;
        -: 4845:
        -: 4846:
    #####: 4847:  ptr_cc_id = _("Zod");
        -: 4848:  /*
        -: 4849:     All major zodiacal/solar term/Zhong-Qi seasonal markers.
        -: 4850:   */
    #####: 4851:  for (i = 0, n = 0.0; i < MONTH_MAX; i++, n += 30.0)
branch  0 never executed
branch  1 never executed
        -: 4852:    {
    #####: 4853:      mjd =
call    0 never executed
    #####: 4854:	sun_longitude (n, &d, &m, &y, time_hour_offset, time_min_offset,
        -: 4855:		       FALSE);
    #####: 4856:      if (mjd != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4857:	{
    #####: 4858:	  val2hours (mjd, &the_hour, &the_min, NULL);
call    0 never executed
    #####: 4859:	  sprintf (s2, "ZhongQi-%02d/%s[%03d] %02d%s%02d",
    #####: 4860:		   ((i + 1) % MONTH_MAX) + 1, zod_name[i], (int) n, the_hour,
        -: 4861:		   time_sep, the_min);
    #####: 4862:	  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d, m, y,
call    0 never executed
        -: 4863:		   hd_elems, fday, count);
    #####: 4864:	  if (*init_data)
branch  0 never executed
branch  1 never executed
    #####: 4865:	    *init_data = FALSE;
        -: 4866:	}
        -: 4867:      else
    #####: 4868:	y = year;
        -: 4869:    }
        -: 4870:  /*
        -: 4871:     All minor zodiacal/solar term/Jie-Qi seasonal markers.
        -: 4872:   */
    #####: 4873:  for (i = 0, n = 15.0; i < MONTH_MAX; i++, n += 30.0)
branch  0 never executed
branch  1 never executed
        -: 4874:    {
    #####: 4875:      mjd =
call    0 never executed
    #####: 4876:	sun_longitude (n, &d, &m, &y, time_hour_offset, time_min_offset,
        -: 4877:		       FALSE);
    #####: 4878:      if (mjd != SPECIAL_VALUE)
branch  0 never executed
branch  1 never executed
        -: 4879:	{
    #####: 4880:	  val2hours (mjd, &the_hour, &the_min, NULL);
call    0 never executed
    #####: 4881:	  sprintf (s2, "JieQi-%02d[%03d] %02d%s%02d",
    #####: 4882:		   ((i + 2) % MONTH_MAX) + 1, (int) n, the_hour, time_sep,
        -: 4883:		   the_min);
    #####: 4884:	  holiday (*init_data, detected, s2, ptr_cc_id, DIS_HLS_PREF, d, m, y,
call    0 never executed
        -: 4885:		   hd_elems, fday, count);
        -: 4886:	}
        -: 4887:      else
    #####: 4888:	y = year;
        -: 4889:    }
    #####: 4890:}
